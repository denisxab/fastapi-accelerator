{"config":{"lang":["en","ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#fastapi-api","title":"\u0423\u0441\u043a\u043e\u0440\u044f\u0435\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043d\u0430 FastAPI: \u041c\u043e\u0449\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API","text":"<p>\u0412 \u043c\u0438\u0440\u0435 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 FastAPI \u0437\u0430\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043b \u0441\u0435\u0431\u044f \u043a\u0430\u043a \u043c\u043e\u0449\u043d\u044b\u0439 \u0438 \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f API. \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0430\u0434 \u043a\u0440\u0443\u043f\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0447\u0430\u0441\u0442\u043e \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0443\u0442\u0438\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043a\u043e\u0434\u0430 \u0438 \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u0412 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0440\u0435\u0448\u0438\u0442\u044c \u044d\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043d\u0430 FastAPI.</p> <p>\u0425\u043e\u0434\u044f \u043f\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439, \u044f \u0437\u0430\u043c\u0435\u0442\u0438\u043b \u0447\u0442\u043e \u043c\u043d\u043e\u0433\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 FastAPI, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u043d\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u0438 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0439 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435\u0442. \u042f, \u043a\u0430\u043a \u043e\u043f\u044b\u0442\u043d\u044b\u0439 backend-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043d\u0430 Python \u0438 Django, \u0440\u0435\u0448\u0438\u043b \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0438 \u0432\u043e\u0441\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 REST API \u0432 FastAPI, \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u0441\u0432\u043e\u0435\u043c \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Django.</p> <p>\u041a\u0440\u0430\u0442\u043a\u043e\u0441\u0440\u043e\u0447\u043d\u0430\u044f \u0446\u0435\u043b\u044c: \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0432\u044f\u0437\u044c \u043e\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u043e \u0434\u0430\u043d\u043d\u043e\u0439 \u0438\u0434\u0435\u0435.</p> <p>\u0414\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u0430\u044f \u0446\u0435\u043b\u044c: \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0432 open source, \u043f\u043e\u0431\u0443\u0436\u0434\u0430\u044f \u043a\u0440\u0443\u043f\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0440\u0438\u0435\u0442\u0430\u0440\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430. \u0412\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e \u043c\u044b \u0441\u0442\u0440\u0435\u043c\u0438\u043c\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u044d\u043a\u043e\u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u0433\u0434\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043e\u0431\u0449\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439, \u043d\u043e \u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0435\u0433\u043e \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0438, \u0432\u043d\u043e\u0441\u044f \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434 \u0432 open-source \u043f\u0440\u043e\u0435\u043a\u0442.</p> <ul> <li>https://github.com/denisxab/fastapi_accelerator</li> <li>https://pypi.org/project/fastapi_accelerator</li> </ul>"},{"location":"#_1","title":"\u0414\u043b\u044f \u043a\u043e\u0433\u043e \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e?","text":"<ul> <li>Backend-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u043c \u0438\u043b\u0438 \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u044e\u0449\u0438\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c FastAPI</li> <li>\u041a\u043e\u043c\u0430\u043d\u0434\u0430\u043c, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u043c \u043d\u0430\u0434 \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u0438 \u043a\u0440\u0443\u043f\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u043d\u0430 FastAPI</li> <li>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u043e\u0442\u044f\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0441\u0432\u043e\u0438\u0445 FastAPI-\u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0438 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438</li> <li>\u0422\u0435\u043c, \u043a\u0442\u043e \u0438\u0449\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439</li> </ul>"},{"location":"#_2","title":"\u0417\u0430\u0447\u0435\u043c \u043d\u0443\u0436\u0435\u043d \u044d\u0442\u043e\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439?","text":"<p>FastAPI Accelerator - \u044d\u0442\u043e open-source \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 REST API.</p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f - \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0438 \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u043d\u0430 FastAPI.</p> <p>\u042d\u0442\u043e \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u043c:</p> <ol> <li>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0439 \u0438 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439.</li> <li>\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u0442\u0438\u043f\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447.</li> <li>\u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0420\u0421\u0423\u0411\u0414.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 ViewSet \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0441 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u043e\u0439.</li> <li>\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e JWT.</li> <li>\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f API.</li> <li>\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Alembic \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0432 production \u0438 test \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\u0445.</li> <li>\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u043f\u043e HTTP.</li> </ol> <p>\u0412\u0441\u0435 \u044d\u0442\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0430\u043d\u044b \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0430, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u0443\u044f \u0440\u0443\u0442\u0438\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"#_3","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430","text":"<p>\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043d\u0430\u0448\u0435\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f:</p> <pre><code>fastapi_accelerator/\n\u251c\u2500\u2500 db/             # \u041b\u043e\u0433\u0438\u043a\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0420\u0421\u0423\u0411\u0414\n\u251c\u2500\u2500 pattern/        # \u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432\n\u251c\u2500\u2500 testutils/      # \u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f FastAPI\n\u251c\u2500\u2500 integration/    # \u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438\n\u251c\u2500\u2500 commands/       # CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n\u251c\u2500\u2500 cache.py        # \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\u251c\u2500\u2500 auth_jwt.py     # \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e JWT\n\u251c\u2500\u2500 exception.py    # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439\n\u251c\u2500\u2500 middleware.py   # Middleware \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b\n\u251c\u2500\u2500 paginator.py    # \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438\n\u251c\u2500\u2500 timezone.py     # \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043e\u043d\u0430\u043c\u0438\n\u251c\u2500\u2500 viewset.py      # \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f ViewSet\n\u2514\u2500\u2500 utils.py        # \u041e\u0431\u0449\u0438\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b\n</code></pre>"},{"location":"#fastapi","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a FastAPI","text":"<p>\u0424\u0430\u0439\u043b <code>main.py</code>:</p> <pre><code>from fastapi import FastAPI\nfrom fastapi_accelerator.pattern.pattern_fastapi import base_pattern\nfrom app.core.config import BASE_DIR_PROJECT, DEBUG, SECRET_KEY\nfrom fastapi_accelerator.timezone import moscow_tz\nfrom app.core.db import DatabaseManager\nfrom app.core.security import AuthJWT\n\nimport app.api.v1.router as RouterV1\n\napp = FastAPI()\n\n# \u041f\u0430\u0442\u0442\u0435\u0440\u043d \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\nbase_pattern(\n    app,\n    routers=(RouterV1.router,),\n    timezone=moscow_tz,\n    cache_status=True,\n    debug=DEBUG,\n    base_dir=BASE_DIR_PROJECT,\n    database_manager=DatabaseManager,\n    secret_key=SECRET_KEY,\n)\n\n# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\nAuthJWT.mount_auth(app)\n</code></pre>"},{"location":"#_4","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","text":""},{"location":"#base-pattern","title":"Base Pattern","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f <code>base_pattern</code> \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 <code>app</code>, \u0432\u043a\u043b\u044e\u0447\u0430\u044f:</p> <ul> <li>\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 <code>state</code> \u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0443 <code>app</code>.</li> <li>\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 <code>CORS</code>.</li> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 <code>ViewSet</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 <code>healthcheck</code>.</li> <li><code>Middleware</code> \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f API-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</li> <li>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u0434\u043b\u044f <code>HTTP</code> \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439.</li> </ul>"},{"location":"#databasemanager","title":"DatabaseManager","text":"<p><code>DatabaseManager</code> - \u044d\u0442\u043e \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0420\u0421\u0423\u0411\u0414, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043a\u0430\u043a \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435, \u0442\u0430\u043a \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435(\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043d\u0430 <code>a</code>) \u043c\u0435\u0442\u043e\u0434\u044b. <code>DatabaseManager</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0430\u0442\u0435\u0440 \u043e\u0434\u0438\u043d\u043e\u0447\u043a\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u0434\u043c\u0435\u043d\u0435\u043d \u0432 \u0442\u0435\u0441\u0442\u0430\u0445.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>from app.core.config import DATABASE_URL, DEBUG, DEV_STATUS\nfrom fastapi_accelerator.dbsession import MainDatabaseManager\n\nDatabaseManager = MainDatabaseManager(DATABASE_URL, echo=DEBUG, DEV_STATUS=DEV_STATUS)\n</code></pre> <ul> <li> <p>\u041e\u0431\u0449\u0438\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438</p> <ul> <li><code>DEV_STATUS</code> - \u0418\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0436\u0438\u043c\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u041f\u0440\u0438 <code>DEV_STATUS=False</code> \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (<code>create_all</code>, <code>drop_all</code>, <code>clear_all</code>). \u042d\u0442\u043e \u043c\u0435\u0440\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b.</li> </ul> </li> <li> <p>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b</p> <ul> <li><code>database_url</code> - \u0410\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>engine</code> - \u041c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0411\u0414.</li> <li><code>session</code> - \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439.</li> <li> <p><code>Base</code> - \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445.</p> </li> <li> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c:</p> <ul> <li><code>get_session</code> - \u0418\u043d\u0436\u0435\u043a\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0411\u0414.</li> <li><code>get_session_transaction</code> - \u0418\u043d\u0436\u0435\u043a\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0411\u0414 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</li> <li><code>create_all</code> - \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0441\u0435\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u0432 \u0411\u0414.</li> <li><code>drop_all</code> - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0411\u0414.</li> <li><code>clear_all</code> - \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0430\u0431\u043b\u0438\u0446. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>exclude_tables_name</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043e\u0447\u0438\u0441\u0442\u043a\u0438.</li> </ul> </li> </ul> </li> <li> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b</p> <ul> <li><code>adatabase_url</code> - \u0410\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0411\u0414.</li> <li><code>aengine</code> - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u0443\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439.</li> <li> <p><code>asession</code> - \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439.</p> </li> <li> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c:</p> <ul> <li><code>aget_session</code> - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438\u043d\u0436\u0435\u043a\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0411\u0414.</li> <li><code>aget_session_transaction</code> - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438\u043d\u0436\u0435\u043a\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0411\u0414 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</li> </ul> </li> </ul> </li> </ul>"},{"location":"#ormasync","title":"OrmAsync","text":"<p>\u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0411\u0414:</p> <ul> <li><code>get</code> - \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c.</li> <li><code>get_list</code> - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443. (\u0421 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438)</li> <li><code>update</code> - \u041c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443.</li> <li><code>delete</code> - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c.</li> <li><code>get_item</code> - \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443. (\u0421 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438)</li> <li><code>create_item</code> - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430. (\u0421 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f)</li> <li><code>update_item</code> - \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443. (\u0421 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f)</li> <li><code>delete_item</code> - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443. (\u0421 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0433\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f)</li> </ul> <p>\u0413\u043b\u0443\u0431\u043e\u043a\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430/\u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 - \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0410\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c <code>deep=True</code></p> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u044b:</p> <ul> <li>get_list, get_item - \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 Pydantic</li> <li>create_item - \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445</li> <li>update_item - \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445</li> <li>delete_item - \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446</li> </ul>"},{"location":"#viewset","title":"ViewSet","text":"<p>ViewSet \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439. \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>from fastapi_accelerator.viewset import AppOrm, FullViewSet\nfrom fastapi import APIRouter, Depends, Query\n\nfrom app.api.v1.schemas.timemeasurement import TaskExecution\nfrom app.models.timemeasurement import TaskExecution as TaskExecutionDb\n\nrouter = APIRouter(prefix=\"/api/v1\")\n\nclass FileViewSet(FullViewSet):\n    \"\"\"\n    \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438\n    \"\"\"\n\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u0411\u0414\n    db_model = TaskExecutionDb\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u0421\u0445\u0435\u043c\u044b\n    pydantic_model = TaskExecution\n\n    '''\n    # \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n    cache_class = redis_client\n    cache_ttl = timedelta(minutes=10)\n\n    # \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f\n    paginator_class = DefaultPaginator\n\n    # \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0445\u0435\u043c pydantic\n    # \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n    deep_schema = True\n\n    # \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0437\u0430\u0449\u0438\u0442\u0443 \u0447\u0435\u0440\u0435\u0437 JWT\n    dependencies = [Depends(jwt_auth)]\n\n    # \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0442\u0430\u043a\u0436\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b:\n\n    async def db_update(\n        self, item_id: str | int | UUID, item: type[BaseModel], aorm: OrmAsync\n    ) -&gt; object:\n        \"\"\"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 db_update\"\"\"\n        return await super().db_update(item_id, item, aorm)\n\n    def list(self):\n        \"\"\"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 list\"\"\"\n\n        @self.router.get(f\"{self.prefix}\", tags=self.tags)\n        async def get_list_items(\n            skip: int = Query(0),\n            limit: int = Query(100),\n            aorm: OrmAsync = Depends(AppOrm.aget_orm),\n        ) -&gt; List[self.pydantic_model]:\n            return await aorm.get_list(\n                select(self.db_model).offset(skip).limit(limit),\n                deep=self.deep_schema,\n                db_model=self.db_model,\n            )\n        return get_list_items\n    '''\n\nrouter.views = [\n    FileViewSet().as_view(router, prefix=\"/file\"),\n]\n</code></pre>"},{"location":"#jwt","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e JWT","text":"<p>\u0414\u043b\u044f \u0437\u0430\u0449\u0438\u0442\u044b API-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c JWT-\u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e:</p> <pre><code>from fastapi_accelerator.auth_jwt import BaseAuthJWT\n\nclass AuthJWT(BaseAuthJWT):\n    async def check_auth(username: str, password: str) -&gt; bool:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.\"\"\"\n        return username == \"admin\" and password == \"admin\"\n\nAuthJWT.mount_auth(app)\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0449\u0438\u0442\u044b API \u043c\u0435\u0442\u043e\u0434\u0430:</p> <pre><code>from fastapi_accelerator.auth_jwt import jwt_auth\n\n@app.get(\"/check_protected\", summary=\"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\")\nasync def protected_route(jwt: dict = Depends(jwt_auth)):\n    return {\"message\": \"This is a protected route\", \"user\": jwt}\n</code></pre>"},{"location":"#api","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 API","text":"<p>\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e API-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0442 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 API \u0438\u043b\u0438 gRPC/RPC \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0422\u0430\u043a\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u0438 \u0447\u0430\u0441\u0442\u043e \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0435 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c. \u0418\u0437-\u0437\u0430 \u044d\u0442\u043e\u0433\u043e \u043e\u043d\u0438 \u043b\u0435\u0433\u043a\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u043b\u0435\u0433\u0430\u0441\u0438-\u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043b\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c, \u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.</p> <p>\u0412\u0430\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0431\u044b\u043b\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u0441\u043b\u0435\u0434\u044f\u0449\u0430\u044f \u0437\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0438 \u0437\u0430\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0434\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438. \u0418\u043c\u0435\u043d\u043d\u043e \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438:</p> <ul> <li><code>IntegrationHTTP</code>: \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u043f\u043e REST HTTP.</li> <li><code>Stability Patterns</code>: \u041f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043a \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.</li> <li><code>py2dantic</code>: \u0423\u0442\u0438\u043b\u0438\u0442\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 Python dict \u0432 Pydantic \u0441\u0445\u0435\u043c\u0443.</li> <li><code>docintegration</code>: \u0410\u0432\u0442\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439.</li> </ul> <p>\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430:</p> <ul> <li>\u042f\u0432\u043d\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u043e\u0442\u0432\u0435\u0442\u0430.</li> <li>\u041b\u0435\u0433\u043a\u0430\u044f \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u2014 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u044b, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 <code>IntegrationHTTP</code>.</li> <li>\u041a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043e\u0434\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435, \u0447\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443.</li> <li>\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043b\u0435\u0433\u043a\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043d\u0430 <code>mock</code> \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u041b\u0435\u0433\u043a\u043e\u0435 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 <code>Stability Patterns</code> \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.</li> </ul> <p>\u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0448\u0430\u0433\u0430\u043c:</p> <ol> <li>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c \u043a\u043e\u0434 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 <code>app/integration/\u0418\u043c\u044f\u041f\u0430\u043a\u0435\u0442\u0430\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438</code>.</li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 <code>app/integration/\u0418\u043c\u044f\u041f\u0430\u043a\u0435\u0442\u0430\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438/endpoint.py</code>:</p> <pre><code>import httpx\nfrom pydantic import BaseModel\n\nfrom fastapi_accelerator.integration.http_integration import (\n    ApiHTTP,\n    EndpointsDeclaration,\n    HTTPMethod,\n    IntegrationHTTP,\n)\nfrom fastapi_accelerator.integration.stability_patterns import sp\n\nclass \u0418\u043c\u044fIntegration(EndpointsDeclaration):\n\n    integration = IntegrationHTTP(\n        \"\u0418\u043c\u044f \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\",\n        doc=\"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 ... API\",\n    )\n\n    class Schema:\n        \"\"\"\u0421\u0445\u0435\u043c\u044b Pydantic \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\"\"\"\n\n        class Successful(BaseModel)\n            body: str\n\n    class SchemaError:\n        \"\"\"\u0421\u0445\u0435\u043c\u044b Pydantic \u0434\u043b\u044f \u043d\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\"\"\"\n\n        class http400(BaseModel)\n            error: str\n\n    @integration.endpoint(\n        HTTPMethod.post,\n        \"/\u043f\u0443\u0442\u044c\",\n        version=\"...\",\n        docurl=\"https://...\"\n    )\n    @sp.RetryPattern()\n    async def \u0438\u043c\u044f_\u043c\u0435\u0442\u043e\u0434\u0430(api: ApiHTTP, \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442_1: str) -&gt; Schema.Successful | SchemaError.http400:\n        try:\n            response: httpx.Response = await api.client.post(api.url.geturl(), json=...)\n            return response.json()\n        except httpx.RequestError as e:\n            raise e\n</code></pre> </li> <li> <p>\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0443 <code>app/core/useintegration.py</code>:</p> <pre><code>\"\"\"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435\"\"\"\n\nfrom app.integration.\u0418\u043c\u044f\u041f\u0430\u043a\u0435\u0442\u0430\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.endpoint import \u0418\u043c\u044fIntegration\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n\u0438\u043c\u044f_api = \u0418\u043c\u044fIntegration(\n    # \u041d\u0430\u0447\u0430\u043b\u043e \u0434\u043b\u044f url \u043f\u0443\u0442\u0438\n    base_url=\"https://\u043f\u0443\u0442\u044c...\",\n    # \u0414\u043e\u0441\u0442\u0443\u043f\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    credentials={...},\n)\n</code></pre> </li> <li> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0432 <code>FastAPI</code>:</p> <pre><code>from app.core.useintegration import \u0438\u043c\u044f_api\nfrom app.integration.\u0418\u043c\u044f\u041f\u0430\u043a\u0435\u0442\u0430\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.schema import \u0418\u043c\u044fSchema\n\n@router.get(\"/\u0438\u043c\u044f\")\nasync def \u0438\u043c\u044f(\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442_1: str) -&gt; \u0418\u043c\u044fIntegration.Schema.Successful:\n    # \u0412\u044b\u0437\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    return await \u0438\u043c\u044f_api.\u0438\u043c\u044f_\u043c\u0435\u0442\u043e\u0434\u0430(\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442_1)\n</code></pre> </li> </ol>"},{"location":"#_5","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u041e\u0434\u043d\u043e\u0439 \u0438\u0437 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u043d\u0430\u0448\u0435\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u043e\u0449\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432. \u041e\u043d\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f:</p> <ol> <li>\u0424\u0438\u043a\u0441\u0442\u0443\u0440\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c API.</li> <li>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0444\u0438\u043a\u0441\u0442\u0443\u0440.</li> <li>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f SQL-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</li> <li>\u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 JSON-\u043e\u0442\u0432\u0435\u0442\u043e\u0432.</li> <li>\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u043a\u043b\u0430\u0441\u0441\u044b.</li> </ol> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0442\u0435\u0441\u0442\u0430:</p> <pre><code>from typing import Callable, NamedTuple\n\nfrom fastapi.testclient import TestClient\n\nfrom app.fixture.items_v1 import export_fixture_file\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\nfrom fastapi_accelerator.testutils import apply_fixture_db, client_auth_jwt, track_queries, check_response_json\n\n\n# \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n@client_auth_jwt(username=\"test\")\n# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0430\u043c\u0438\n@apply_fixture_db(export_fixture_file)\ndef test_\u0438\u043c\u044f(\n    client: TestClient,               # \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f API \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n    url_path_for: Callable,           # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f url \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\n    db_manager: MainDatabaseManager,  # \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0411\u0414\n    fixtures: NamedTuple,             # \u0425\u0440\u0430\u043d\u0438\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\n):\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 SQL \u043a\u043e\u043c\u0430\u043d\u0434\n    with track_queries(db_manager, expected_count=3):\n        # \u0417\u0430\u043f\u0440\u043e\u0441 \u0432 API\n        response = client.get(url_path_for(\"\u0418\u043c\u044f\u0424\u0443\u043d\u043a\u0446\u0438\u0438\"))\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 JSON API \u043e\u0442\u0432\u0435\u0442\u0430\n    check_response_json(\n        response,\n        200,\n        {\n            \"id\": fixtures.\u0418\u043c\u044f.id,\n        },\n    )\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0442\u0435\u0441\u0442 \u043a\u043b\u0430\u0441\u0441\u0430:</p> <pre><code>from typing import Callable, NamedTuple\n\nfrom fastapi.testclient import TestClient\n\nfrom app.fixture.items_v1 import export_fixture_file\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\nfrom fastapi_accelerator.testutils import apply_fixture_db\nfrom fastapi_accelerator.testutils.fixture_auth import client_auth_jwt\nfrom fastapi_accelerator.testutils.fixture_db.trace_sql import track_queries\nfrom fastapi_accelerator.testutils.utils import BaseAuthJwtPytest, check_response_json\n\nBASE_URL_V1 = \"/api/v1/\"\n\nclass Test\u0418\u043c\u044f(BaseAuthJwtPytest):\n\n    # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0430\u043c\u0438\n    @apply_fixture_db(export_fixture_file)\n    def setUp(self, fixtures: NamedTuple):\n        self.url = BASE_URL_V1 + \"taskexecution\"\n        self.fixtures = fixtures # \u0425\u0440\u0430\u043d\u0438\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\n\n    def test_\u0438\u043c\u044f(self, client: TestClient, db_manager: MainDatabaseManager):\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 SQL \u043a\u043e\u043c\u0430\u043d\u0434\n        with track_queries(db_manager, expected_count=3):\n            # \u0417\u0430\u043f\u0440\u043e\u0441 \u0432 API\n            response = client.get(self.url)\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 JSON API \u043e\u0442\u0432\u0435\u0442\u0430\n        check_response_json(\n            response,\n            200,\n            {\n                \"id\": self.fixtures.\u0418\u043c\u044f.id,\n            },\n        )\n</code></pre>"},{"location":"#_6","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438","text":"<p>\u0425\u043e\u0442\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0449\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u043d\u0430\u0448\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0432\u043e\u0435\u0439 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439:</p> <ol> <li><code>FastAPI-Utils</code>: \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043d\u043e \u043c\u0435\u043d\u0435\u0435 \u0444\u043e\u043a\u0443\u0441\u0438\u0440\u043e\u0432\u0430\u043d \u043d\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438.</li> <li><code>FastAPI-SQLAlchemy</code>: \u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442 FastAPI \u0441 SQLAlchemy, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li><code>FastAPI-Toolkit</code>: \u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u043e \u043c\u0435\u043d\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li><code>freddie</code> - \u0412 \u0430\u0440\u0445\u0438\u0432\u0435 \u043d\u0430 GitHub, \u0442\u043e\u043b\u044c\u043a\u043e viewset</li> <li><code>fastapi_viewsets</code> - \u0422\u043e\u043b\u044c\u043a\u043e viewset</li> <li><code>FastAPIwee</code> - \u041c\u0435\u043d\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> </ol> <p>\u041d\u0430\u0448\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043c, \u0447\u0442\u043e:</p> <ol> <li>\u0411\u043e\u043b\u0435\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439.</li> <li>\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@apply_fixture_db</code> \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 <code>track_queries</code>.</li> <li>\u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0430\u0441\u043f\u0435\u043a\u0442\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439.</li> </ol>"},{"location":"#_7","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0438 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043d\u0430 FastAPI. \u041e\u043d \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0438\u043f\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0430 \u043d\u0435 \u043d\u0430 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0435\u0442\u0430\u043b\u044f\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</p> <p>\u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u044d\u043a\u043e\u0441\u0438\u0441\u0442\u0435\u043c\u0435 FastAPI, \u043d\u0430\u0448\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0432\u043e\u0435\u0439 \u043f\u043e\u043b\u043d\u043e\u0442\u043e\u0439 \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u042d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e \u0446\u0435\u043d\u043d\u044b\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 FastAPI.</p> <p>\u041c\u044b \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u043c \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0438 \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0434\u044b \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u043e\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430. \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0438\u0434\u0435\u0438 \u043f\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0438\u043b\u0438 \u0432\u044b \u043d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 issue \u0432 \u043d\u0430\u0448\u0435\u043c \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u043d\u0430 GitHub.</p>"},{"location":"about/","title":"About","text":"<ul> <li>https://github.com/denisxab/fastapi-accelerator</li> </ul>"},{"location":"business_logic/","title":"Business logic","text":""},{"location":"business_logic/#use-base-pattern","title":"Use Base Pattern","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f <code>base_pattern</code> \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 <code>app</code>, \u0432\u043a\u043b\u044e\u0447\u0430\u044f:</p> <ul> <li>\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 <code>state</code> \u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0443 <code>app</code>.</li> <li>\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 <code>CORS</code>.</li> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 <code>ViewSet</code>.</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 <code>healthcheck</code>.</li> <li><code>Middleware</code> \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f API-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</li> <li>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u0434\u043b\u044f <code>HTTP</code> \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439.</li> <li>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c docintegration</li> </ul>"},{"location":"business_logic/#use-databasemanager","title":"Use DatabaseManager","text":"<p><code>DatabaseManager</code> - \u044d\u0442\u043e \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0420\u0421\u0423\u0411\u0414, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043a\u0430\u043a \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435, \u0442\u0430\u043a \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435(\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043d\u0430 <code>a</code>) \u043c\u0435\u0442\u043e\u0434\u044b. <code>DatabaseManager</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0430\u0442\u0435\u0440 \u043e\u0434\u0438\u043d\u043e\u0447\u043a\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u0434\u043c\u0435\u043d\u0435\u043d \u0432 \u0442\u0435\u0441\u0442\u0430\u0445.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0411\u0414 \u0432 \u0444\u0430\u0439\u043b\u0435 <code>app/db/base.py</code>:</p> <pre><code>\"\"\"\u041c\u043e\u0434\u0443\u043b\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0420\u0421\u0423\u0411\u0414\"\"\"\n\nfrom app.core.config import DATABASE_URL, DEBUG, DEV_STATUS\nfrom fastapi_accelerator.dbsession import MainDatabaseManager\n\n# \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0434\u043b\u044f \u0420\u0421\u0423\u0411\u0414\nDatabaseManager = MainDatabaseManager(DATABASE_URL, echo=DEBUG, DEV_STATUS=DEV_STATUS)\n</code></pre>"},{"location":"business_logic/#maindatabasemanager","title":"\u041e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b <code>MainDatabaseManager</code>","text":"<ul> <li> <p>\u041e\u0431\u0449\u0438\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438</p> <ul> <li><code>DEV_STATUS</code> - \u0418\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0436\u0438\u043c\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u041f\u0440\u0438 <code>DEV_STATUS=False</code> \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (<code>create_all</code>, <code>drop_all</code>, <code>clear_all</code>). \u042d\u0442\u043e \u043c\u0435\u0440\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b.</li> </ul> </li> <li> <p>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b</p> <ul> <li><code>database_url</code> - \u0410\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>engine</code> - \u041c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0411\u0414.</li> <li><code>session</code> - \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439.</li> <li> <p><code>Base</code> - \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445.</p> </li> <li> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c:</p> <ul> <li><code>get_session</code> - \u0418\u043d\u0436\u0435\u043a\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0411\u0414.</li> <li><code>get_session_transaction</code> - \u0418\u043d\u0436\u0435\u043a\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0411\u0414 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</li> <li><code>create_all</code> - \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0441\u0435\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u0432 \u0411\u0414.</li> <li><code>drop_all</code> - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0411\u0414.</li> <li><code>clear_all</code> - \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0442\u0430\u0431\u043b\u0438\u0446. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>exclude_tables_name</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043e\u0447\u0438\u0441\u0442\u043a\u0438.</li> </ul> </li> </ul> </li> <li> <p>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b</p> <ul> <li><code>adatabase_url</code> - \u0410\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0411\u0414.</li> <li><code>aengine</code> - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u0443\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439.</li> <li> <p><code>asession</code> - \u0413\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439.</p> </li> <li> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c:</p> <ul> <li><code>aget_session</code> - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438\u043d\u0436\u0435\u043a\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0411\u0414.</li> <li><code>aget_session_transaction</code> - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438\u043d\u0436\u0435\u043a\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0411\u0414 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</li> </ul> </li> </ul> </li> </ul>"},{"location":"business_logic/#use-ormasync","title":"Use OrmAsync","text":"<p>\u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0411\u0414:</p> <ul> <li><code>get</code> - \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c.</li> <li><code>get_list</code> - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443. (\u0421 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438)</li> <li><code>update</code> - \u041c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443.</li> <li><code>delete</code> - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c.</li> <li><code>get_item</code> - \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443. (\u0421 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438)</li> <li><code>create_item</code> - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430. (\u0421 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f)</li> <li><code>update_item</code> - \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443. (\u0421 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f)</li> <li><code>delete_item</code> - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u043c\u0443 \u043a\u043b\u044e\u0447\u0443. (\u0421 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u043e\u0433\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f)</li> <li><code>eager_refresh</code> - \u041f\u043e\u043b\u043d\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432\u0441\u0435\u0445 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430.</li> </ul> <p>\u0413\u043b\u0443\u0431\u043e\u043a\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430/\u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 - \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0410\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c <code>deep=True</code></p> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u044b:</p> <ul> <li>get_list, get_item - \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 Pydantic</li> <li>create_item - \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445</li> <li>update_item - \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445</li> <li>delete_item - \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446</li> </ul>"},{"location":"business_logic/#databasemanager","title":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0447\u0435\u0440\u0435\u0437 DatabaseManager","text":"<pre><code>from sqlalchemy import Column, Integer, String\n\nfrom app.db.base import DatabaseManager\n\n\nclass User(DatabaseManager.Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    login = Column(String, index=True)\n    pthone = Column(String, index=True)\n    email = Column(String, unique=True, index=True)\n</code></pre>"},{"location":"business_logic/#crud-databasemanager","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 CRUD \u0447\u0435\u0440\u0435\u0437 DatabaseManager","text":"<pre><code># \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\nclass FileView:\n    @router.get(\"/file\")\n    async def get_files(\n        skip=Query(0),\n        limit=Query(100),\n        aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n    ) -&gt; List[File]:\n        return await aorm.get_list(select(FileDb).offset(skip).limit(limit))\n\n    @router.get(\"/file/{file_uid}\")\n    async def get_file(\n        file_uid: str = Path(),\n        aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n    ) -&gt; File:\n        return await aorm.get(select(FileDb).filter(FileDb.uid == file_uid))\n\n    @router.post(\"/file\")\n    async def create_file(\n        aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n    ) -&gt; File:\n        file_uid = uuid.uuid4()\n        new_user = FileDb(uid=file_uid)\n        return await aorm.create_item(new_user)\n\n    @router.put(\"/file/{file_uid}\")\n    async def update_file(\n        file_uid: str = Path(),\n        aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n    ) -&gt; File:\n        update_data = {\"filename\": \"new\"}\n        return await aorm.update(\n            update(FileDb).filter(FileDb.uid == file_uid), update_data\n        )\n\n    @router.delete(\"/file/{file_uid}\")\n    async def delte_file(\n        file_uid: str = Path(),\n        aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n    ):\n        return await aorm.delete(delete(FileDb).filter(FileDb.uid == file_uid))\n\n# \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\n@router.get(\"/file-sync\")\nasync def get_file_sync(\n    session: Session = Depends(DatabaseManager.get_session),\n) -&gt; List[File]:\n    skip = 0\n    limit = 100\n    res = session.query(FileDb).offset(skip).limit(limit).all()\n    return res\n</code></pre>"},{"location":"business_logic/#alembic","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 Alembic","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430</li> </ol> <pre><code>poetry add alembic\n</code></pre> <ol> <li>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> </ol> <pre><code>alembic init alembic\n</code></pre> <ol> <li>\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c <code>alembic/env.py</code></li> </ol> <pre><code># \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0411\u0414\nfrom app.core.db import DatabaseManager\n\n# &gt; ! \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c\nfrom app.models import *  # noqa F401\n\nfrom fastapi_accelerator.pattern.pattern_alembic import AlembicEnv\n\n# \u041f\u0440\u0435\u0434\u043d\u0430\u0441\u0442\u043e\u0435\u043d\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0447\u0440\u0435\u0437 Alembic\nAlembicEnv(DatabaseManager).run()\n</code></pre> <ol> <li>\u041c\u043e\u0436\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c <code>alembic.ini</code></li> </ol> <pre><code># \u0424\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u0430 \u0441 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0435\u0439\nfile_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n</code></pre> <p>\u0412\u0430\u0436\u043d\u044b\u0439 \u0430\u0441\u043f\u0435\u043a\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439</p> <p>\u041d\u0443\u0436\u043d\u043e \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u044b\u0442\u044c \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 <code>alembic/env.py</code> \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043b\u0438 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 <code>Base.metadata</code></p> <p>\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e:</p> <ol> <li>\u0412 <code>app.models.__init__.py</code> \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438</li> </ol> <pre><code>from .files import *\nfrom .users import *\n</code></pre> <ol> <li>\u0412 <code>alembic/env.py</code> \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435(\u0438\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435) \u043c\u043e\u0434\u0435\u043b\u0438</li> </ol> <pre><code>from app.models import *\n</code></pre> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0438\u0445</li> </ol> <pre><code># \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044e\nalembic revision --autogenerate\n# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044e \u043a \u0411\u0414\nalembic upgrade head\n</code></pre>"},{"location":"business_logic/#use-cache","title":"Use Cache","text":"<ul> <li>\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b <code>app/core/cache.py</code>:</li> </ul> <pre><code>import redis.asyncio as redis\n\nfrom app.core.config import REDIS_URL\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 Redis\nredis_client = redis.from_url(REDIS_URL, encoding=\"utf-8\", decode_responses=True)\n</code></pre> <ul> <li>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API \u043e\u0442\u0432\u0435\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@cache_redis()</code></li> </ul> <pre><code>from datetime import timedelta\nfrom fastapi_accelerator.cache import cache_redis\n\n@app.get(f\"files/{{item_id}}\")\n@cache_redis(cache_class=redis_client, cache_ttl=timedelta(minutes=10))\nasync def get_item(\n    request: Request,\n    item_uid: str = Path(...),\n    aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n) -&gt; FilesSchema:\n    response = await aorm.get(\n        select(Files).filter(Files.id == item_uid)\n    )\n    return response\n</code></pre>"},{"location":"business_logic/#use-viewset","title":"Use ViewSet","text":"<ol> <li>\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 <code>app/api/v1/router.py</code></li> </ol> <pre><code>from datetime import timedelta\nfrom typing import List\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Depends, Query\nfrom pydantic import BaseModel\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Session\n\nfrom app.api.v1.schemas.file import File\nfrom app.api.v1.schemas.timemeasurement import TaskExecution\nfrom app.api.v1.schemas.user import User\nfrom app.core.cache import redis_client\nfrom app.core.db import DatabaseManager\nfrom app.models.file import File as FileDb\nfrom app.models.timemeasurement import TaskExecution as TaskExecutionDb\nfrom app.models.users import User as UserDb\nfrom fastapi_accelerator.auth_jwt import jwt_auth\nfrom fastapi_accelerator.db.dbsession import OrmAsync\nfrom fastapi_accelerator.paginator import DefaultPaginator\nfrom fastapi_accelerator.viewset import AppOrm, FullViewSet\n\nrouter = APIRouter(prefix=\"/api/v1\")\n\nclass FileViewSet(FullViewSet):\n    \"\"\"\n    \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438\n    \"\"\"\n\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u0411\u0414\n    db_model = FileDb\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u0421\u0445\u0435\u043c\u044b\n    pydantic_model = File\n    # \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n    cache_class = redis_client\n    cache_ttl = timedelta(minutes=10)\n    # \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f\n    paginator_class = DefaultPaginator\n\n    async def db_update(\n        self, item_id: str | int | UUID, item: type[BaseModel], aorm: OrmAsync\n    ) -&gt; object:\n        \"\"\"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 db_update\"\"\"\n        return await super().db_update(item_id, item, aorm)\n\n\nclass UserViewSet(FullViewSet):\n    \"\"\"\n    \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438\n    \"\"\"\n\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u0411\u0414\n    db_model = UserDb\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u0421\u0445\u0435\u043c\u044b\n    pydantic_model = User\n\n    def list(self):\n        \"\"\"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 list\"\"\"\n\n        @self.router.get(f\"{self.prefix}\", tags=self.tags)\n        async def get_list_items(\n            skip: int = Query(0),\n            limit: int = Query(100),\n            aorm: OrmAsync = Depends(AppOrm.aget_orm),\n        ) -&gt; List[self.pydantic_model]:\n            return await aorm.get_list(\n                select(self.db_model).offset(skip).limit(limit),\n                deep=self.deep_schema,\n                db_model=self.db_model,\n            )\n        return get_list_items\n\nclass TaskExecutionViewSet(FullViewSet):\n    \"\"\"\n    \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0442\u0440\u0443\u0434\u043e\u0437\u0430\u0442\u0440\u0430\u0442\u0430\u043c\u0438\n    \"\"\"\n\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u0411\u0414\n    db_model = TaskExecutionDb\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u0421\u0445\u0435\u043c\u044b\n    pydantic_model = TaskExecution\n\n    # \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f\n    paginator_class = DefaultPaginator\n\n    # \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0445\u0435\u043c pydantic\n    # \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n    deep_schema = True\n\n    # \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0437\u0430\u0449\u0438\u0442\u0443 \u0447\u0435\u0440\u0435\u0437 JWT\n    dependencies = [Depends(jwt_auth)]\n\n# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c ViewSet\nrouter.views = [\n    FileViewSet().as_view(router, prefix=\"/file\"),\n    UserViewSet().as_view(router, prefix=\"/user\"),\n    TaskExecutionViewSet().as_view(router, prefix=\"/taskexecution\"),\n]\n</code></pre>"},{"location":"business_logic/#use-time-zone","title":"Use Time Zone","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u0435\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0437\u043e\u043d\u044b</p> <pre><code>import pytz\nfrom fastapi_accelerator.timezone import get_datetime_now\n\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1\nget_datetime_now(request.app.state.TIMEZONE).isoformat()\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2\nget_datetime_now(app.state.TIMEZONE).isoformat()\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 3\nget_datetime_now(pytz.timezone(\"Europe/Moscow\")).isoformat()\n# \u0412\u0430\u0440\u0438\u0430\u043d\u0442 4\ntimezone = TIMEZONE() or TIMEZONE(request.app)\nget_datetime_now(timezone).isoformat()\n</code></pre>"},{"location":"business_logic/#use-httpexception","title":"Use HTTPException","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435:</li> </ul> <pre><code>from fastapi_accelerator.exception import HTTPException403\n\n@router.get(\"/\")\nasync def get_users():\n    if True:\n        raise HTTPException403()\n    return [{\"user_id\": \"user1\"}, {\"user_id\": \"user2\"}]\n</code></pre>"},{"location":"business_logic/#use-authjwt","title":"Use AuthJWT","text":"<p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0447\u0435\u0440\u0435\u0437 JWT</p> <ul> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a FastAPI \u043f\u0440\u043e\u0435\u043a\u0442\u0443:</li> </ul> <pre><code>from fastapi_accelerator.auth_jwt import BaseAuthJWT\n\nclass AuthJWT(BaseAuthJWT):\n    async def check_auth(username: str, password: str) -&gt; bool:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.\"\"\"\n        return username == \"admin\" and password == \"admin\"\n\n    async def add_jwt_body(username: str) -&gt; dict:\n        \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"\"\"\n        return {\"version\": username.title()}\n\n\n# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\nAuthJWT.mount_auth(app)\n</code></pre> <ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0449\u0438\u0442\u044b API \u043c\u0435\u0442\u043e\u0434\u0430:</li> </ul> <pre><code>from fastapi_accelerator.auth_jwt import jwt_auth\n\n@app.get(\"/check_protected\", summary=\"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\")\nasync def protected_route(jwt: dict = Depends(jwt_auth)):\n    return {\"message\": \"This is a protected route\", \"user\": jwt}\n</code></pre>"},{"location":"business_logic/#use-integration","title":"Use Integration","text":"<p>\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e API-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0442 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 API \u0438\u043b\u0438 gRPC/RPC \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0422\u0430\u043a\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u0438 \u0447\u0430\u0441\u0442\u043e \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0435 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c. \u0418\u0437-\u0437\u0430 \u044d\u0442\u043e\u0433\u043e \u043e\u043d\u0438 \u043b\u0435\u0433\u043a\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u043b\u0435\u0433\u0430\u0441\u0438-\u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043b\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c, \u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.</p> <p>\u0412\u0430\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0431\u044b\u043b\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u0441\u043b\u0435\u0434\u044f\u0449\u0430\u044f \u0437\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0438 \u0437\u0430\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0434\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438. \u0418\u043c\u0435\u043d\u043d\u043e \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438:</p> <ul> <li><code>IntegrationHTTP</code>: \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u043f\u043e HTTP.</li> <li><code>Stability Patterns</code>: \u041f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043a \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.</li> <li><code>py2dantic</code>: \u0423\u0442\u0438\u043b\u0438\u0442\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 Python dict \u0432 Pydantic \u0441\u0445\u0435\u043c\u0443.</li> <li><code>docintegration</code>: \u0410\u0432\u0442\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439.</li> </ul>"},{"location":"business_logic/#use-integration-http","title":"Use Integration HTTP","text":"<p><code>IntegrationHTTP</code> - \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043f\u043e HTTP, \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u043a \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c, \u043f\u0440\u043e\u0432\u043e\u0434\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e API.</p> <p>\u041f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430:</p> <ul> <li>\u042f\u0432\u043d\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u043e\u0442\u0432\u0435\u0442\u0430.</li> <li>\u041b\u0435\u0433\u043a\u0430\u044f \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u2014 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u044b, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 <code>IntegrationHTTP</code>.</li> <li>\u041a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043b\u043e\u0433\u0438\u043a\u0438 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043e\u0434\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435, \u0447\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443.</li> <li>\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043b\u0435\u0433\u043a\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043d\u0430 <code>mock</code> \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u041b\u0435\u0433\u043a\u043e\u0435 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 <code>Stability Patterns</code> \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.</li> </ul> <p>\u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0448\u0430\u0433\u0430\u043c:</p> <ol> <li>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c \u043a\u043e\u0434 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 <code>app/integration/\u0418\u043c\u044f\u041f\u0430\u043a\u0435\u0442\u0430\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438</code>.</li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 <code>app/integration/\u0418\u043c\u044f\u041f\u0430\u043a\u0435\u0442\u0430\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438/endpoint.py</code>:</p> <pre><code>import httpx\nfrom pydantic import BaseModel\n\nfrom fastapi_accelerator.integration.http_integration import (\n    ApiHTTP,\n    EndpointsDeclaration,\n    HTTPMethod,\n    IntegrationHTTP,\n)\nfrom fastapi_accelerator.integration.stability_patterns import sp\n\nclass \u0418\u043c\u044fIntegration(EndpointsDeclaration):\n\n    integration = IntegrationHTTP(\n        \"\u0418\u043c\u044f \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\",\n        doc=\"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 ... API\",\n    )\n\n    class Schema:\n        \"\"\"\u0421\u0445\u0435\u043c\u044b Pydantic \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\"\"\"\n\n        class Successful(BaseModel)\n            body: str\n\n    class SchemaError:\n        \"\"\"\u0421\u0445\u0435\u043c\u044b Pydantic \u0434\u043b\u044f \u043d\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\"\"\"\n\n        class http400(BaseModel)\n            error: str\n\n    @integration.endpoint(\n        HTTPMethod.post,\n        \"/\u043f\u0443\u0442\u044c\",\n        version=\"...\",\n        docurl=\"https://...\"\n    )\n    @sp.RetryPattern()\n    async def \u0438\u043c\u044f_\u043c\u0435\u0442\u043e\u0434\u0430(api: ApiHTTP, \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442_1: str) -&gt; Schema.Successful | SchemaError.http400:\n        try:\n            response: httpx.Response = await api.client.post(api.url.geturl(), json=...)\n            return response.json()\n        except httpx.RequestError as e:\n            raise e\n</code></pre> </li> <li> <p>\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0443 <code>app/core/useintegration.py</code>:</p> <pre><code>\"\"\"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435\"\"\"\n\nfrom app.integration.\u0418\u043c\u044f\u041f\u0430\u043a\u0435\u0442\u0430\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.endpoint import \u0418\u043c\u044fIntegration\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n\u0438\u043c\u044f_api = \u0418\u043c\u044fIntegration(\n    # \u041d\u0430\u0447\u0430\u043b\u043e \u0434\u043b\u044f url \u043f\u0443\u0442\u0438\n    base_url=\"https://\u043f\u0443\u0442\u044c...\",\n    # \u0414\u043e\u0441\u0442\u0443\u043f\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    credentials={...},\n)\n</code></pre> </li> <li> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0432 <code>FastAPI</code>:</p> <pre><code>from app.core.useintegration import \u0438\u043c\u044f_api\nfrom app.integration.\u0418\u043c\u044f\u041f\u0430\u043a\u0435\u0442\u0430\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.schema import \u0418\u043c\u044fSchema\n\n@router.get(\"/\u0438\u043c\u044f\")\nasync def \u0438\u043c\u044f(\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442_1: str) -&gt; \u0418\u043c\u044fIntegration.Schema.Successful:\n    # \u0412\u044b\u0437\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    return await \u0438\u043c\u044f_api.\u0438\u043c\u044f_\u043c\u0435\u0442\u043e\u0434\u0430(\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442_1)\n</code></pre> </li> </ol> <p>\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.</p> <p>\u041e\u0442\u0432\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c:</p> <ul> <li><code>dict</code>: \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u0441\u0445\u0435\u043c\u0443 <code>Pydantic</code>.</li> <li><code>list[dict]</code>: \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0445\u0435\u043c <code>Pydantic</code>.</li> <li>\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0438\u043f\u043e\u0432 \u043e\u0442\u0432\u0435\u0442\u0430: \u042d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0438 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>-&gt; \u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439\u041e\u0442\u0432\u0435\u0442 | \u041d\u0435\u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439\u041e\u0442\u0432\u0435\u0442</code> \u0438\u043b\u0438 <code>-&gt; list[\u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439\u041e\u0442\u0432\u0435\u0442] | \u041d\u0435\u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439\u041e\u0442\u0432\u0435\u0442</code>.</li> <li>\u0412 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c <code>Any</code>.</li> </ul>"},{"location":"business_logic/#google-translate","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 Google Translate","text":"<ul> <li>\u041a\u043b\u0430\u0441\u0441\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 <code>app/integration/google_translate/endpoint.py</code>:</li> </ul> <pre><code>import httpx\nfrom pydantic import BaseModel\n\nfrom fastapi_accelerator.integration.http_integration import (\n    ApiHTTP,\n    EndpointsDeclaration,\n    HTTPMethod,\n    IntegrationHTTP,\n)\nfrom fastapi_accelerator.integration.stability_patterns import sp\n\n\nclass GoogleTranslateEndpoints(EndpointsDeclaration):\n    integration = IntegrationHTTP(\n        \"Google Translate\",\n        doc=\"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 Google Translate API\",\n    )\n\n    class Schema:\n        \"\"\"\u0421\u0445\u0435\u043c\u044b \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\"\"\"\n\n        class TranslateV2(BaseModel):\n            text: str\n\n    class SchemaError:\n        \"\"\"\u0421\u0445\u0435\u043c\u044b \u0434\u043b\u044f \u043d\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\"\"\"\n\n        class http400Error(BaseModel):\n            code: int\n            message: str\n            errors: list[dict]\n            status: str\n            details: list[dict]\n\n        class http400(BaseModel):\n            error: dict\n\n    @integration.endpoint(\n        HTTPMethod.post,\n        \"/v1/translateHtml\",\n        version=\"v2\",\n        docurl=\"https://cloud.google.com/translate/docs/reference/rest\",\n    )\n    # \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    @sp.Timeout()\n    # \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u043e\u0448\u0438\u0431\u043a\u0438.\n    @sp.RetryPattern()\n    async def translate(\n        api: ApiHTTP,\n        text: str,\n        from_lang: str,\n        to_lang: str,\n    ) -&gt; Schema.TranslateV2 | SchemaError.http400:  # \u0423\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0438\u043f\u0430 \u043e\u0442\u0432\u0435\u0442\u0430\n        \"\"\"\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0442\u0435\u043a\u0441\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Google Translate\"\"\"\n        try:\n            # \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043a \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435\n            response: httpx.Response = await api.client.post(\n                api.url.geturl(),\n                json=[[text.split(\"\\n\"), from_lang, to_lang], \"te_lib\"],\n                headers={\n                    \"content-type\": \"application/json+protobuf\",\n                    \"x-goog-api-key\": api.credentials[\"API_TOKEN\"],\n                },\n            )\n            # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430\n            print(f\"Processed {api.url}: Status {response.status_code}\")\n            return {\"text\": \"\\n\".join(x[0] for x in response.json())}\n        except httpx.RequestError as e:\n            print(f\"Error processing {api.url}: {e}\")\n            raise e\n</code></pre> <ul> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432 <code>app/core/useintegration.py</code>:</li> </ul> <pre><code>\"\"\"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435\"\"\"\n\nfrom app.integration.google_translate.endpoint import GoogleTranslateIntegration\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\ngtapi = GoogleTranslateIntegration(\n    base_url=\"https://translate-pa.googleapis.com\",\n    # \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u043a\u043b\u0430\u0441\u0441 \u0434\u043e\u0441\u0442\u0443\u043f\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    credentials={\"API_TOKEN\": \"...\"},\n)\n</code></pre> <ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0435 <code>FastAPI</code>:</li> </ul> <pre><code>from datetime import timedelta\nfrom fastapi_accelerator.cache import cache_redis\nfrom app.core.cache import redis_client\nfrom app.core.useintegration import gtapi\nfrom app.integration.google_translate.schema import GoogleTranslateSchema\n\n@router.get(\"/translate\")\n# \u041c\u043e\u0436\u0435\u043c \u043b\u0435\u0433\u043a\u043e \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u044b \u043e\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439\n@cache_redis(cache_class=redis_client, cache_ttl=timedelta(minutes=10))\nasync def translate(\n    text: str, from_lang: str = \"en\", to_lang: str = \"ru\"\n) -&gt; GoogleTranslateEndpoints.Schema.TranslateV2:\n    # \u0412\u044b\u0437\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    return await gtapi.translate(text, from_lang, to_lang)\n</code></pre>"},{"location":"business_logic/#use-stability-patterns","title":"Use Stability Patterns","text":"<p>\u041c\u043e\u0434\u0443\u043b\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 (Stability Patterns), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043e\u043a \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438.</p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0435\u043c \u043d\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f (raise) \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438. \u0415\u0441\u043b\u0438 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043e\u0442\u0432\u0435\u0442 \u0441 \u043a\u043e\u0434\u043e\u043c 400 (\u043e\u0448\u0438\u0431\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430) \u0438\u043b\u0438 500 (\u043e\u0448\u0438\u0431\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430), \u043d\u043e \u043d\u0435 \u0432\u044b\u0437\u0432\u0430\u043b\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, Stability Patterns \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u044d\u0442\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0438 \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442 \u0441\u0432\u043e\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a.</p> <p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432:</p> <ul> <li><code>@sp.Fallback</code> (\u0420\u0435\u0437\u0435\u0440\u0432\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442) - \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0431\u043e\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0434\u0435\u0433\u0440\u0430\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u043e, \u0430 \u043d\u0435 \u043f\u0430\u0434\u0430\u0442\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.</li> <li><code>@sp.Timeout</code> (\u0422\u0430\u0439\u043c-\u0430\u0443\u0442) - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430. \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0443 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u0440\u0438 \u0437\u0430\u0432\u0438\u0441\u0430\u043d\u0438\u0438 \u0432\u044b\u0437\u043e\u0432\u0430.</li> <li><code>@sp.CircuitBreaker</code> (\u041f\u0440\u0435\u0434\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435\u043b\u044c) - \u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430. \u041f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u043b\u0438\u043c\u0438\u0442\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u0437\u043e\u0432, \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u044f \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0435 \u0441\u0431\u043e\u0438.</li> <li><code>@sp.RetryPattern</code> (\u041f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f) - \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u043e\u0448\u0438\u0431\u043a\u0438.</li> <li><code>@sp.Throttling</code> (\u0420\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435) - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0443 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0438. \u0417\u0430\u0449\u0438\u0449\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e\u0442 \u0448\u0442\u043e\u0440\u043c\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</li> </ul> <p>\u042d\u0442\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0434\u0435\u043b\u0430\u044e\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0431\u043e\u043b\u0435\u0435 \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0439, \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u044f \u0440\u0438\u0441\u043a \u0441\u0431\u043e\u0435\u0432 \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u043f\u043b\u0430\u0432\u043d\u0443\u044e \u0434\u0435\u0433\u0440\u0430\u0434\u0430\u0446\u0438\u044e \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c.</p>"},{"location":"business_logic/#use-py2dantic","title":"Use py2dantic","text":"<p><code>py2dantic</code> \u2014 \u044d\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u0443\u0442\u0438\u043b\u0438\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0445\u0435\u043c\u044b Pydantic \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 Python. \u042d\u0442\u0438 \u0441\u0445\u0435\u043c\u044b \u043c\u043e\u0436\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435.</p> <ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:</li> </ul> <pre><code>from fastapi_accelerator.commands.py2dantic import generate_pydantic_models\n\nsample_data = {\n    \"items\": [\n        {\n            \"id\": \"0000\",\n            \"premium\": False,\n            \"name\": \"Python Developer\",\n            \"department\": None,\n            \"has_test\": True,\n            \"response_letter_required\": False,\n            \"salary\": None,\n            \"type\": {\"id\": \"open\", \"name\": \"\u041e\u0442\u043a\u0440\u044b\u0442\u0430\u044f\"},\n            \"address\": None,\n            \"response_url\": None,\n            \"sort_point_distance\": None,\n            \"published_at\": \"2024-09-04T08:27:02+0300\",\n            \"created_at\": \"2024-09-04T08:27:02+0300\",\n            \"archived\": False,\n            \"apply_alternate_url\": \"https://hh.ru/applicant/vacancy_response?vacancyId=0000\",\n            \"branding\": {\"type\": \"MAKEUP\", \"tariff\": None},\n            \"show_logo_in_search\": True\n        },\n    ],\n    \"found\": 187,\n    \"pages\": 2,\n    \"page\": 1,\n    \"per_page\": 100,\n    \"clusters\": None,\n    \"arguments\": None,\n    \"fixes\": None,\n    \"suggests\": None,\n    \"alternate_url\": \"https://hh.ru/search/vacancy?enable_snippets=true&amp;items_on_page=100&amp;order_by=publication_time&amp;page=1&amp;salary=200000&amp;schedule=remote&amp;text=Python+FastAPI\",\n}\n\nassert (\n    generate_pydantic_models(sample_data, depth=2, prfix_class_name=\"Job\").strip()\n    == \"\"\"\nclass Job_ItemsItem(BaseModel):\n    id: str = None\n    premium: int = None\n    name: str = None\n    department: Any = None\n    has_test: int = None\n    response_letter_required: int = None\n    area: Dict = None\n    salary: Any = None\n    type: Dict = None\n    address: Any = None\n    response_url: Any = None\n    sort_point_distance: Any = None\n    published_at: str = None\n    created_at: str = None\n    archived: int = None\n    apply_alternate_url: str = None\n    branding: Dict = None\n    show_logo_in_search: int = None\n\nclass Job(BaseModel):\n    items: List[Job_ItemsItem]\n    found: int = None\n    pages: int = None\n    page: int = None\n    per_page: int = None\n    clusters: Any = None\n    arguments: Any = None\n    fixes: Any = None\n    suggests: Any = None\n    alternate_url: str = None\n    \"\"\".strip()\n    )\n</code></pre>"},{"location":"business_logic/#use-docintegration","title":"Use docintegration","text":"<p>\u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0437\u043d\u0430\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435, \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0442\u043e\u043c\u0443, \u043a\u0430\u043a \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0432 OpenAPI Swagger \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e FastAPI.</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: <code>http://host:port/docintegration</code>.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043f\u0443\u0442\u044c, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432 \u0444\u0430\u0439\u043b\u0435 <code>main.py</code> \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 <code>base_pattern</code> \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0432 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0435 <code>useintegration</code>:</p> <pre><code>from app.core.useintegration import \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f_1, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f_2\nfrom fastapi_accelerator.pattern.pattern_fastapi import base_pattern\n\n# \u041f\u0430\u0442\u0442\u0435\u0440\u043d \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\nbase_pattern(\n    app,\n    ...,\n    useintegration=[\u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f_1, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f_2],\n)\n</code></pre> <p></p>"},{"location":"business_logic/#use-admin-panel","title":"Use Admin Panel","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430</li> </ol> <pre><code>poetry add flask-admin\n</code></pre> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b <code>admin_panel.py</code></li> </ol> <pre><code>from flask import Flask\n\nfrom app.core.config import ADMIN_PASSWORD, ADMIN_USERNAME, SECRET_KEY\nfrom app.db.base import DatabaseManager\nfrom app.models import File, User\nfrom fastapi_accelerator.pattern_flask_admin import base_pattern\n\napp = Flask(__name__)\n\nadmin = base_pattern(\n    app,\n    SECRET_KEY,\n    ADMIN_PASSWORD,\n    ADMIN_USERNAME,\n    # &gt; \u041c\u043e\u0434\u0435\u043b\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u044b \u0432 \u0430\u0434\u043c\u0438\u043d \u043f\u0430\u043d\u0435\u043b\u0438\n    models=[User, File],\n    database_manager=DatabaseManager,\n)\n\n\nif __name__ == \"__main__\":\n    app.run(\n        host=\"0.0.0.0\",\n        port=8001,\n        debug=True,\n    )\n</code></pre> <ol> <li> <p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c <code>python admin_panel.py</code></p> </li> <li> <p>\u0412\u043e\u0439\u0442\u0438 \u0432 \u0430\u0434\u043c\u0438\u043d \u043f\u0430\u043d\u0435\u043b\u044c:</p> </li> <li> <p><code>http://localhost:8233/admin</code></p> </li> <li><code>http://localhost:8233/login</code></li> <li><code>http://localhost:8233/logout</code></li> </ol>"},{"location":"code_docs/","title":"Code Docs","text":""},{"location":"code_docs/#fastapi_acceleratorauth_jwt","title":"fastapi_accelerator.auth_jwt","text":"<p>\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e JWT</p>"},{"location":"code_docs/#fastapi_accelerator.auth_jwt.BaseAuthJWT","title":"<code>BaseAuthJWT</code>","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>class AuthJWT(BaseAuthJWT):\n    async def check_auth(username: str, password: str) -&gt; bool:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.\"\"\"\n        return username == \"admin\" and password == \"admin\"\n\n    async def add_jwt_body(username: str) -&gt; dict:\n        \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"\"\"\n        return {\"version\": username.title()}\n\n\n# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\nAuthJWT.mount_auth(app)\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0449\u0438\u0442\u044b API \u043c\u0435\u0442\u043e\u0434\u0430:</p> <pre><code>@app.get(\"/cheack_protected\", summary=\"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\")\nasync def protected_route(jwt: dict = Depends(jwt_auth)):\n    return {\"message\": \"This is a protected route\", \"user\": jwt}\n</code></pre> Source code in <code>fastapi_accelerator/auth_jwt.py</code> <pre><code>class BaseAuthJWT:\n    '''\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n\n    ```python\n    class AuthJWT(BaseAuthJWT):\n        async def check_auth(username: str, password: str) -&gt; bool:\n            \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.\"\"\"\n            return username == \"admin\" and password == \"admin\"\n\n        async def add_jwt_body(username: str) -&gt; dict:\n            \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"\"\"\n            return {\"version\": username.title()}\n\n\n    # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\n    AuthJWT.mount_auth(app)\n    ```\n\n    \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0449\u0438\u0442\u044b API \u043c\u0435\u0442\u043e\u0434\u0430:\n\n    ```python\n    @app.get(\"/cheack_protected\", summary=\"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\")\n    async def protected_route(jwt: dict = Depends(jwt_auth)):\n        return {\"message\": \"This is a protected route\", \"user\": jwt}\n    ```\n    '''\n\n    ALGORITHM = \"HS256\"\n    ACCESS_TOKEN_EXPIRE_MINUTES = 30\n    # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432 mount_auth\n    secret_key = None\n\n    @abc.abstractmethod\n    async def check_auth(username: str, password: str) -&gt; bool:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.\"\"\"\n        raise NotImplementedError()\n\n    @abc.abstractmethod\n    async def add_jwt_body(username: str) -&gt; dict:\n        \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"\"\"\n\n    @classmethod\n    def mount_auth(cls, app: FastAPI):\n        \"\"\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e JWT\"\"\"\n        # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\n        app.state.auth_jwt = cls\n        cls.secret_key = app.state.SECRET_KEY\n\n        @app.post(\"/token\", summary=\"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e JWT\", tags=[\"common\"])\n        async def login(\n            user: Annotated[OAuth2PasswordRequestForm, Depends()],\n        ) -&gt; Token:\n            if await cls.check_auth(user.username, user.password):\n                return Token(\n                    access_token=cls._create_access_token(\n                        data={\n                            \"sub\": user.username,\n                            **await cls.add_jwt_body(user.username),\n                        },\n                    ),\n                    token_type=\"bearer\",\n                )\n            else:\n                raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n\n        @app.get(\n            \"/check_protected\",\n            summary=\"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\",\n            tags=[\"common\"],\n        )\n        async def protected_route(request: Request, jwt: dict = Depends(jwt_auth)):\n            return {\"message\": \"This is a protected route\", \"user\": jwt}\n\n        return login, protected_route\n\n    @classmethod\n    def _create_access_token(\n        cls,\n        data: dict,\n        expires_delta: Union[timedelta, None] = None,\n    ) -&gt; str:\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 JWT \u0442\u043e\u043a\u0435\u043d\u0430\"\"\"\n        to_encode = data.copy()\n        if expires_delta:\n            expire = datetime.utcnow() + expires_delta\n        else:\n            expire = datetime.utcnow() + timedelta(\n                minutes=cls.ACCESS_TOKEN_EXPIRE_MINUTES\n            )\n        to_encode.update({\"exp\": expire})\n        encoded_jwt = jwt.encode(to_encode, cls.secret_key, algorithm=cls.ALGORITHM)\n        return encoded_jwt\n\n    @classmethod\n    def _verify_token(cls, token: str) -&gt; Optional[dict]:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u0438 JWT \u0442\u043e\u043a\u0435\u043d\u0430\"\"\"\n        try:\n            payload = jwt.decode(token, cls.secret_key, algorithms=[cls.ALGORITHM])\n            return payload\n        except jwt.ExpiredSignatureError:\n            return None\n        except jwt.InvalidTokenError:\n            return None\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.auth_jwt.BaseAuthJWT.add_jwt_body","title":"<code>add_jwt_body(username)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p> Source code in <code>fastapi_accelerator/auth_jwt.py</code> <pre><code>@abc.abstractmethod\nasync def add_jwt_body(username: str) -&gt; dict:\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.auth_jwt.BaseAuthJWT.check_auth","title":"<code>check_auth(username, password)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.</p> Source code in <code>fastapi_accelerator/auth_jwt.py</code> <pre><code>@abc.abstractmethod\nasync def check_auth(username: str, password: str) -&gt; bool:\n    \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.\"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.auth_jwt.BaseAuthJWT.mount_auth","title":"<code>mount_auth(app)</code>  <code>classmethod</code>","text":"<p>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e JWT</p> Source code in <code>fastapi_accelerator/auth_jwt.py</code> <pre><code>@classmethod\ndef mount_auth(cls, app: FastAPI):\n    \"\"\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e JWT\"\"\"\n    # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\n    app.state.auth_jwt = cls\n    cls.secret_key = app.state.SECRET_KEY\n\n    @app.post(\"/token\", summary=\"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e JWT\", tags=[\"common\"])\n    async def login(\n        user: Annotated[OAuth2PasswordRequestForm, Depends()],\n    ) -&gt; Token:\n        if await cls.check_auth(user.username, user.password):\n            return Token(\n                access_token=cls._create_access_token(\n                    data={\n                        \"sub\": user.username,\n                        **await cls.add_jwt_body(user.username),\n                    },\n                ),\n                token_type=\"bearer\",\n            )\n        else:\n            raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n\n    @app.get(\n        \"/check_protected\",\n        summary=\"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\",\n        tags=[\"common\"],\n    )\n    async def protected_route(request: Request, jwt: dict = Depends(jwt_auth)):\n        return {\"message\": \"This is a protected route\", \"user\": jwt}\n\n    return login, protected_route\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.auth_jwt.jwt_auth","title":"<code>jwt_auth(request, token=Depends(oauth2_scheme))</code>","text":"<p>Depends \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 JWT</p> Source code in <code>fastapi_accelerator/auth_jwt.py</code> <pre><code>def jwt_auth(request: Request, token: str = Depends(oauth2_scheme)) -&gt; dict:\n    \"\"\"Depends \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 JWT\"\"\"\n    auth_jwt: BaseAuthJWT = AUTH_JWT() or AUTH_JWT(request.app)\n    payload = auth_jwt._verify_token(token)\n    if payload is None:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Could not validate credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return payload\n</code></pre>"},{"location":"code_docs/#fastapi_acceleratorcache","title":"fastapi_accelerator.cache","text":"<p>\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u0435\u0448 Redis</p>"},{"location":"code_docs/#fastapi_accelerator.cache.cache_redis","title":"<code>cache_redis(cache_class, cache_ttl, cache=True)</code>","text":"<p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432 API \u0432 Redis.</p> <p>Parameters:</p> Name Type Description Default <code>cache_class</code> <code>BaseCache</code> <p>\u041a\u043b\u0430\u0441\u0441 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Redis.</p> required <code>cache_ttl</code> <code>timedelta</code> <p>\u0412\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438 \u043a\u0435\u0448\u0430.</p> required <code>cache</code> <code>bool</code> <p>\u0424\u043b\u0430\u0433, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.</p> <code>True</code> <pre><code>class ViewSetRetrieve(BaseViewSet):\n    def register_routes(self):\n        '''\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432'''\n\n        @self.router.get(f\"{self.prefix}/{{item_uid}}\", tags=self.tags)\n        @cache_redis(self.cache, self.cache_class, self.cache_ttl)\n        async def get_item(\n            request: Request,\n            item_uid: str = Path(...),\n            aorm: OrmAsync = Depends(AppOrm.aget_orm),\n        ) -&gt; self.pydantic_model:\n            response = await aorm.get(\n                select(self.db_model).filter(self._name_pk == item_uid)\n            )\n            return response\n\n        return get_item\n</code></pre> Source code in <code>fastapi_accelerator/cache.py</code> <pre><code>def cache_redis(cache_class: BaseCache, cache_ttl: timedelta, cache: bool = True):\n    \"\"\"\n    \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432 API \u0432 Redis.\n\n    Args:\n        cache_class: \u041a\u043b\u0430\u0441\u0441 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Redis.\n        cache_ttl: \u0412\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438 \u043a\u0435\u0448\u0430.\n        cache: \u0424\u043b\u0430\u0433, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.\n\n    ```python\n    class ViewSetRetrieve(BaseViewSet):\n        def register_routes(self):\n            '''\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432'''\n\n            @self.router.get(f\"{self.prefix}/{{item_uid}}\", tags=self.tags)\n            @cache_redis(self.cache, self.cache_class, self.cache_ttl)\n            async def get_item(\n                request: Request,\n                item_uid: str = Path(...),\n                aorm: OrmAsync = Depends(AppOrm.aget_orm),\n            ) -&gt; self.pydantic_model:\n                response = await aorm.get(\n                    select(self.db_model).filter(self._name_pk == item_uid)\n                )\n                return response\n\n            return get_item\n    ```\n    \"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            request: Request = kwargs[\"request\"]\n\n            cache_status = CACHE_STATUS() or CACHE_STATUS(request.app)\n\n            if not cache_status or not cache:\n                # \u043a\u0435\u0448 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\n                return await func(*args, **kwargs)\n\n            key_cache: str = f\"{request.url.path}?{request.url.query}\"\n            cache_response = await cache_class.get(key_cache)\n            if cache_response:\n                # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u043c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043a\u0435\u0448\u0430\n                return JSONResponse(\n                    content=json.loads(cache_response), headers={\"X-Cache\": \"HIT\"}\n                )\n\n            response = await func(*args, **kwargs)\n\n            json_data = jsonable_encoder(response)\n            await cache_class.set(key_cache, json.dumps(json_data), ex=cache_ttl)\n            # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c\n            return JSONResponse(content=json_data, headers={\"X-Cache\": \"MISS\"})\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"code_docs/#fastapi_acceleratorexception","title":"fastapi_accelerator.exception","text":""},{"location":"code_docs/#fastapi_accelerator.exception.custom_http_exception_handler","title":"<code>custom_http_exception_handler(request, exc)</code>  <code>async</code>","text":"<p>\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439</p> <p>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435:</p> <pre><code>from starlette.exceptions import HTTPException as StarletteHTTPException\napp.exception_handler(StarletteHTTPException)(custom_http_exception_handler)\n</code></pre> Source code in <code>fastapi_accelerator/exception.py</code> <pre><code>async def custom_http_exception_handler(request: Request, exc: StarletteHTTPException):\n    \"\"\"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439\n\n    \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435:\n\n        from starlette.exceptions import HTTPException as StarletteHTTPException\n        app.exception_handler(StarletteHTTPException)(custom_http_exception_handler)\n    \"\"\"\n    exc_status_code = exc.status_code\n    if exc_status_code in (400, 401, 403, 404, 429, 503, 504):\n        debug = DEBUG() or DEBUG(request.app)\n        timezone = TIMEZONE() or TIMEZONE(request.app)\n\n        content = {}\n        content[\"detail\"] = exc.detail\n        content[\"context\"] = request_log_format(request, exc_status_code)\n        content[\"erorr_id\"] = str(uuid.uuid4())\n        content[\"datetime\"] = get_datetime_now(timezone).isoformat()\n        content[\"host\"] = request.headers[\"host\"]\n        content[\"http_method\"] = request.method\n        content[\"request_path\"] = request.url.path\n        content[\"query_params\"] = dict(request.query_params)\n        content[\"user-agent\"] = request.headers.get(\"User-Agent\", \"unknown\")\n\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0443 \u0441\u0442\u0435\u043a\u0430 \u0432 debug \u0440\u0435\u0436\u0438\u043c\u0435\n        if debug:\n            content[\"traceback\"] = traceback.format_exc()\n        return JSONResponse(\n            status_code=exc_status_code, content=content, headers=exc.headers\n        )\n    return await http_exception_handler(request, exc)\n</code></pre>"},{"location":"code_docs/#fastapi_acceleratormiddleware","title":"fastapi_accelerator.middleware","text":"<p>options:     show_source: true     heading_level: 3</p>"},{"location":"code_docs/#fastapi_accelerator.middleware.log_request_response","title":"<code>log_request_response(request, call_next)</code>  <code>async</code>","text":"<p>\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u0435\u043d\u0438\u0435 API \u0437\u0430\u043f\u0440\u043e\u0441\u0430</p> <p>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435:</p> <p>app.middleware('http')(log_request_response)</p> Source code in <code>fastapi_accelerator/middleware.py</code> <pre><code>async def log_request_response(request: Request, call_next):\n    \"\"\"\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u0435\u043d\u0438\u0435 API \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n\n    \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435:\n\n    app.middleware('http')(log_request_response)\n    \"\"\"\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = (time.perf_counter() - start_time) * 1000\n\n    debug = DEBUG() or DEBUG(request.app)\n    if debug:\n        logger = logging.getLogger(\"uvicorn\")\n        logger.info(request_log_format(request, response.status_code, process_time))\n    response.headers[\"X-Process-Time\"] = f\"{process_time:.2f} ms\"\n    return response\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.middleware.request_log_format","title":"<code>request_log_format(request, status_code, process_time=None)</code>","text":"<p>\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 \u043b\u043e\u0433 \u0441\u0442\u0440\u043e\u043a\u0443</p> Source code in <code>fastapi_accelerator/middleware.py</code> <pre><code>def request_log_format(\n    request: Request, status_code: int, process_time: float = None\n) -&gt; str:\n    \"\"\"\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 \u043b\u043e\u0433 \u0441\u0442\u0440\u043e\u043a\u0443\"\"\"\n    query = request.url.query\n    return (\n        '{host}:{port} - \"{method} {path}{query}\" - {status_code}{process_time}'.format(\n            host=request.client.host,\n            port=request.client.port,\n            method=request.method,\n            path=request.url.path,\n            query=f\"?{query}\" if query else \"\",\n            status_code=status_code,\n            process_time=f\" - [{process_time:.2f} ms]\" if process_time else \"\",\n        )\n    )\n</code></pre>"},{"location":"code_docs/#fastapi_acceleratorpaginator","title":"fastapi_accelerator.paginator","text":"<p>\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u044f\u043b \u043f\u0430\u0433\u0438\u0430\u0446\u0438\u0438 \u043e\u0432\u0442\u0435\u0442\u0430</p> <p>options:     show_source: true     heading_level: 3</p>"},{"location":"code_docs/#fastapi_acceleratortimezone","title":"fastapi_accelerator.timezone","text":"<p>\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043e\u043d\u0430\u043c\u0438</p>"},{"location":"code_docs/#fastapi_accelerator.timezone.get_datetime_now","title":"<code>get_datetime_now(timezone)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0442\u0430\u0439\u043c \u0437\u043e\u043d\u044b</p>"},{"location":"code_docs/#fastapi_accelerator.timezone.get_datetime_now--_1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0432\u0440\u043c\u0435\u043d\u043d\u043e\u0439 \u0437\u043e\u043d\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>app.state.TIMEZONE = moscow_tz</p> Source code in <code>fastapi_accelerator/timezone.py</code> <pre><code>def get_datetime_now(timezone: pytz.timezone) -&gt; datetime:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0442\u0430\u0439\u043c \u0437\u043e\u043d\u044b\n\n    # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0432\u0440\u043c\u0435\u043d\u043d\u043e\u0439 \u0437\u043e\u043d\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n    app.state.TIMEZONE = moscow_tz\n    \"\"\"\n    return datetime.now(timezone)\n</code></pre>"},{"location":"code_docs/#fastapi_acceleratorutils","title":"fastapi_accelerator.utils","text":""},{"location":"code_docs/#fastapi_accelerator.utils.NoInstanceMeta","title":"<code>NoInstanceMeta</code>","text":"<p>               Bases: <code>type</code></p> <p>\u041d\u0435\u043b\u044c\u0437\u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430</p> Source code in <code>fastapi_accelerator/utils.py</code> <pre><code>class NoInstanceMeta(type):\n    \"\"\"\u041d\u0435\u043b\u044c\u0437\u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n\n    def __call__(cls, *args, **kwargs):\n        raise TypeError(\"You cannot create instances of this class\")\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.utils.SingletonMeta","title":"<code>SingletonMeta</code>","text":"<p>               Bases: <code>type</code></p> <p>\u041c\u0435\u0442\u0430 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u041e\u0434\u0438\u043d\u043e\u0447\u043a\u0430</p> Source code in <code>fastapi_accelerator/utils.py</code> <pre><code>class SingletonMeta(type):\n    \"\"\"\u041c\u0435\u0442\u0430 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u041e\u0434\u0438\u043d\u043e\u0447\u043a\u0430\"\"\"\n\n    instance = None\n\n    def __call__(cls, *args, **kwargs):\n        if cls.instance is None:\n            cls.instance = super(SingletonMeta, cls).__call__(*args, **kwargs)\n        return cls.instance\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.utils.run_async","title":"<code>run_async(async_function)</code>","text":"<p>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0431\u0435\u0440\u0442\u043a\u0430 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430</p> Source code in <code>fastapi_accelerator/utils.py</code> <pre><code>def run_async(async_function):\n    \"\"\"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0431\u0435\u0440\u0442\u043a\u0430 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430\"\"\"\n    return asyncio.get_event_loop().run_until_complete(async_function)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.utils.singleton","title":"<code>singleton(func)</code>","text":"<p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u041e\u0434\u0438\u043d\u043e\u0447\u043a\u0430</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>@singleton\ndef CACHE_STATUS(app=None) -&gt; bool:\n    return app.state.CACHE_STATUS\n\ncache_status = CACHE_STATUS() or CACHE_STATUS(request.app)\n</code></pre> Source code in <code>fastapi_accelerator/utils.py</code> <pre><code>def singleton(func):\n    \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u041e\u0434\u0438\u043d\u043e\u0447\u043a\u0430\n\n    \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:\n\n        @singleton\n        def CACHE_STATUS(app=None) -&gt; bool:\n            return app.state.CACHE_STATUS\n\n        cache_status = CACHE_STATUS() or CACHE_STATUS(request.app)\n    \"\"\"\n\n    instance = None\n\n    def wrapper(*args, **kwargs):\n        nonlocal instance\n        if instance is not None:\n            return instance\n        if instance is None and (not args and not kwargs):\n            return False\n        if instance is None:\n            instance = func(*args, **kwargs)\n        return instance\n\n    return wrapper\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.utils.to_namedtuple","title":"<code>to_namedtuple(**kwargs)</code>","text":"<p>\u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0440\u0442\u0435\u0436</p> Source code in <code>fastapi_accelerator/utils.py</code> <pre><code>def to_namedtuple(**kwargs: dict[str, Any]) -&gt; NamedTuple:\n    \"\"\"\u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0440\u0442\u0435\u0436\"\"\"\n    return namedtuple(\"CommonNameTuple\", kwargs.keys())(**kwargs)\n</code></pre>"},{"location":"code_docs/#fastapi_acceleratorviewset","title":"fastapi_accelerator.viewset","text":"<p>\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u0434\u0445\u043e\u0434 ViewSet \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u0443\u044e\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 CRUD \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b, \u0438 \u043f\u043e\u0432\u0430\u043b\u044f\u044e\u0442 \u0433\u0438\u0431\u043a\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 ViewSet</p>"},{"location":"code_docs/#fastapi_accelerator.viewset.AppOrm","title":"<code>AppOrm</code>","text":"<p>\u0411\u0440\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a APP DATABASE_MANAGER</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>class AppOrm:\n    \"\"\"\u0411\u0440\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a APP DATABASE_MANAGER\"\"\"\n\n    @classmethod\n    async def aget_orm(cls, request: Request):\n        \"\"\"\u041c\u0435\u0442\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0435\u0440\u0435\u043c \u0438\u0437 \u043d\u0430\u0441\u0442\u043e\u0435\u043a APP\"\"\"\n        database_manager: MainDatabaseManager = DATABASE_MANAGER() or DATABASE_MANAGER(\n            request.app\n        )\n        async for orm in database_manager.aget_orm():\n            yield orm\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.AppOrm.aget_orm","title":"<code>aget_orm(request)</code>  <code>async</code> <code>classmethod</code>","text":"<p>\u041c\u0435\u0442\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0435\u0440\u0435\u043c \u0438\u0437 \u043d\u0430\u0441\u0442\u043e\u0435\u043a APP</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>@classmethod\nasync def aget_orm(cls, request: Request):\n    \"\"\"\u041c\u0435\u0442\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0435\u0440\u0435\u043c \u0438\u0437 \u043d\u0430\u0441\u0442\u043e\u0435\u043a APP\"\"\"\n    database_manager: MainDatabaseManager = DATABASE_MANAGER() or DATABASE_MANAGER(\n        request.app\n    )\n    async for orm in database_manager.aget_orm():\n        yield orm\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.BaseViewSet","title":"<code>BaseViewSet</code>","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>class BaseViewSet(abc.ABC):\n    def _register_endpoint(self):\n        \"\"\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432\"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.GenericViewSet","title":"<code>GenericViewSet</code>","text":"<p>from app.api.v1.schemas.file import File from app.models.file import File as FileDb</p> <p>router = APIRouter()</p> <p>class FileViewSet(FullViewSet):     db_model = FileDb     pydantic_model = File</p> <p>router.views = [     FileViewSet().as_view(router, prefix=\"/file\"), ]</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>class GenericViewSet:\n    \"\"\"\n    from app.api.v1.schemas.file import File\n    from app.models.file import File as FileDb\n\n    router = APIRouter()\n\n    class FileViewSet(FullViewSet):\n        db_model = FileDb\n        pydantic_model = File\n\n    router.views = [\n        FileViewSet().as_view(router, prefix=\"/file\"),\n    ]\n    \"\"\"\n\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u0411\u0414 SqlAlchemy\n    db_model: Type\n    # \u041c\u043e\u0434\u0435\u043b\u044c \u0421\u0445\u0435\u043c\u044b\n    pydantic_model: Type[BaseModel]\n\n    # \u0422\u0435\u0433\u0438 \u0434\u043b\u044f URL\n    tags: Optional[List[str]]\n\n    # \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0434\u043b\u044f List\n    paginator_class: Optional[BasePaginatorClass]\n\n    # \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 List, Retrieve\n    cache_class: Optional[BaseCache]\n    # \u0412\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438 \u043e\u0442\u0432\u0435\u0442\u0430 \u0432 \u043a\u0435\u0448\u0435\n    cache_ttl: Optional[timedelta]\n\n    # \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0445\u0435\u043c pydantic\n    # \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n    deep_schema: Optional[bool]\n\n    # \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0430 \u0432\u0435\u0441\u044c ViewSet\n    # \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT `[Depends(jwt_auth)]`\n    dependencies: Optional[list[Callable]]\n\n    # \u041a\u0430\u043a\u043e\u0439 \u0442\u0438\u043f \u0443 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0434\u043b\u044f Api \u043c\u0435\u0442\u043e\u0434\u0430\n    type_item_id: Optional[type]\n\n    def as_view(self, router: APIRouter, prefix: str):\n        self._mro_class = self.__class__.mro()\n        # \u041c\u043e\u0434\u0435\u043b\u044c \u0411\u0414 SqlAlchemy\n        self.router: APIRouter = router\n        # \u041c\u043e\u0434\u0435\u043b\u044c \u0421\u0445\u0435\u043c\u044b\n        self.db_model: Type = self.db_model\n        self.pydantic_model: Type[BaseModel] = self.pydantic_model\n        # \u041f\u0440\u0435\u0444\u0438\u043a\u0441 \u0434\u043b\u044f URL\n        self.prefix: str = prefix\n        # \u0422\u0435\u0433\u0438\n        self.tags: List[str] = getattr(self, \"tags\", [self._mro_class[0].__name__])\n        # \u0418\u043c\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u043c \u043a\u043b\u044e\u0447\u043e\u043c\n        self.name_pk: str = get_pk(self.db_model)\n        # \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0445\u0435\u043c\n        self.deep_schema = getattr(self, \"deep_schema\", False)\n        # \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0430 \u0432\u0435\u0441\u044c ViewSet\n        self.dependencies = getattr(self, \"dependencies\", [])\n        # \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0434\u043b\u044f List\n        self.paginator_class = getattr(self, \"paginator_class\", None)\n        # \u041a\u0430\u043a\u043e\u0439 \u0442\u0438\u043f \u0443 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0434\u043b\u044f Api \u043c\u0435\u0442\u043e\u0434\u0430\n        self.type_item_id = getattr(\n            self,\n            \"type_item_id\",\n            # \u041f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0438\u043f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438\n            SQL_TO_PYTHON_TYPE.get(\n                class_mapper(self.db_model).primary_key[0].type.__class__,\n                Union[str, int, UUID],\n            ),\n        )\n\n        # \u041b\u043e\u0433\u0438\u043a\u0430 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n        self.cache = False\n        if cache_class := getattr(self, \"cache_class\", False):\n            self.cache = True\n            self.cache_class = cache_class\n            self.cache_ttl = getattr(self, \"cache_ttl\", timedelta(seconds=3))\n        else:\n            self.cache_class = None\n            self.cache_ttl = None\n\n        # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438\n        for cls in self._mro_class:\n            if cls in (\n                ViewSetList,\n                ViewSetCreate,\n                ViewSetRetrieve,\n                ViewSetUpdate,\n                ViewSetDelete,\n            ):\n                cls._register_endpoint(self)\n\n        # \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u0433\u043e\u0432\n        self.openapi_tag = {\"name\": self.tags[0], \"description\": str(self)}\n        return self\n\n    def __str__(self) -&gt; str:\n        \"\"\"\u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0434\u043b\u044f ViewSet\"\"\"\n        description = \"ViewSet\"\n        if doc := self._mro_class[0].__doc__:\n            description = \"{doc}: {db_model}{dependencies}{cache}{deep_schema}\".format(\n                doc=doc.strip(),\n                db_model=f\" **db_model**={self.db_model.__name__}\",\n                dependencies=(\n                    f\" **dependencies**=[{', '.join(d.dependency.__name__ for d in self.dependencies)}]\"\n                    if self.dependencies\n                    else \"\"\n                ),\n                cache=(\" **cache**=On\" if self.cache else \"\"),\n                deep_schema=(\" **deep_schema**=On\" if self.deep_schema else \"\"),\n            )\n        return description\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.GenericViewSet.__str__","title":"<code>__str__()</code>","text":"<p>\u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0434\u043b\u044f ViewSet</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0434\u043b\u044f ViewSet\"\"\"\n    description = \"ViewSet\"\n    if doc := self._mro_class[0].__doc__:\n        description = \"{doc}: {db_model}{dependencies}{cache}{deep_schema}\".format(\n            doc=doc.strip(),\n            db_model=f\" **db_model**={self.db_model.__name__}\",\n            dependencies=(\n                f\" **dependencies**=[{', '.join(d.dependency.__name__ for d in self.dependencies)}]\"\n                if self.dependencies\n                else \"\"\n            ),\n            cache=(\" **cache**=On\" if self.cache else \"\"),\n            deep_schema=(\" **deep_schema**=On\" if self.deep_schema else \"\"),\n        )\n    return description\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetCreate","title":"<code>ViewSetCreate</code>","text":"<p>               Bases: <code>BaseViewSet</code></p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>class ViewSetCreate(BaseViewSet):\n    def _register_endpoint(self):\n        self.create()\n\n    def _to_db_item(self, item: Type[BaseModel]) -&gt; T:\n        \"\"\"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 pydantic \u0432 db_item\"\"\"\n        db_item = (\n            deep_instance(self.db_model, item)\n            if self.deep_schema\n            else self.db_model(**item.dict())\n        )\n        return db_item\n\n    def create(self):\n        \"\"\"API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\"\"\"\n\n        @self.router.post(\n            f\"{self.prefix}\", tags=self.tags, dependencies=self.dependencies\n        )\n        async def create_item(\n            item: self.pydantic_model, aorm: OrmAsync = Depends(AppOrm.aget_orm)\n        ) -&gt; self.pydantic_model:\n            return await self.db_create(item, aorm)\n\n        return create_item\n\n    async def db_create(self, item: Type[BaseModel], aorm: OrmAsync) -&gt; object:\n        \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414.\"\"\"\n        return await aorm.create_item(self._to_db_item(item), deep=self.deep_schema)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetCreate.create","title":"<code>create()</code>","text":"<p>API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>def create(self):\n    \"\"\"API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\"\"\"\n\n    @self.router.post(\n        f\"{self.prefix}\", tags=self.tags, dependencies=self.dependencies\n    )\n    async def create_item(\n        item: self.pydantic_model, aorm: OrmAsync = Depends(AppOrm.aget_orm)\n    ) -&gt; self.pydantic_model:\n        return await self.db_create(item, aorm)\n\n    return create_item\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetCreate.db_create","title":"<code>db_create(item, aorm)</code>  <code>async</code>","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414.</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>async def db_create(self, item: Type[BaseModel], aorm: OrmAsync) -&gt; object:\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414.\"\"\"\n    return await aorm.create_item(self._to_db_item(item), deep=self.deep_schema)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetDelete","title":"<code>ViewSetDelete</code>","text":"<p>               Bases: <code>BaseViewSet</code></p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>class ViewSetDelete(BaseViewSet):\n    def _register_endpoint(self):\n        self.delete()\n\n    def delete(self):\n        \"\"\"API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\"\"\"\n\n        @self.router.delete(\n            f\"{self.prefix}/{{item_id}}\", tags=self.tags, dependencies=self.dependencies\n        )\n        async def delete_item(\n            item_id: self.type_item_id, aorm: OrmAsync = Depends(AppOrm.aget_orm)\n        ):\n            return await self.db_delete(item_id, aorm)\n\n        return delete_item\n\n    async def db_delete(self, item_id: Union[str, int, UUID], aorm: OrmAsync):\n        \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414\"\"\"\n        return await aorm.delete_item(self.db_model, item_id, deep=self.deep_schema)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetDelete.db_delete","title":"<code>db_delete(item_id, aorm)</code>  <code>async</code>","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>async def db_delete(self, item_id: Union[str, int, UUID], aorm: OrmAsync):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414\"\"\"\n    return await aorm.delete_item(self.db_model, item_id, deep=self.deep_schema)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetDelete.delete","title":"<code>delete()</code>","text":"<p>API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>def delete(self):\n    \"\"\"API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\"\"\"\n\n    @self.router.delete(\n        f\"{self.prefix}/{{item_id}}\", tags=self.tags, dependencies=self.dependencies\n    )\n    async def delete_item(\n        item_id: self.type_item_id, aorm: OrmAsync = Depends(AppOrm.aget_orm)\n    ):\n        return await self.db_delete(item_id, aorm)\n\n    return delete_item\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetList","title":"<code>ViewSetList</code>","text":"<p>               Bases: <code>BaseViewSet</code></p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>class ViewSetList(BaseViewSet):\n    def _register_endpoint(self):\n        self.list_paginator() if self.paginator_class else self.list()\n\n    @staticmethod\n    def get_offset(page: int, size: int) -&gt; int:\n        return (page - 1) * size\n\n    def list_paginator(self):\n        \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a API \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439\"\"\"\n\n        @self.router.get(\n            f\"{self.prefix}\", tags=self.tags, dependencies=self.dependencies\n        )\n        @cache_redis(self.cache_class, self.cache_ttl, self.cache)\n        async def get_list_items_paginator(\n            request: Request,\n            page: int = Query(1, gt=0),\n            size: int = Query(10, gt=0),\n            aorm: OrmAsync = Depends(AppOrm.aget_orm),\n        ) -&gt; self.paginator_class.Schema:\n            offset = self.get_offset(page, size)\n            response = await aorm.get_list(\n                select(self.db_model).order_by(self.name_pk).offset(offset).limit(size),\n                deep=self.deep_schema,\n                db_model=self.db_model,\n            )\n            return self.paginator_class.json(page, size, response)\n\n        return get_list_items_paginator\n\n    def list(self):\n        \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a API\"\"\"\n\n        @self.router.get(\n            f\"{self.prefix}\", tags=self.tags, dependencies=self.dependencies\n        )\n        @cache_redis(self.cache_class, self.cache_ttl, self.cache)\n        async def get_list_items(\n            request: Request,\n            skip: int = Query(0, gte=0),\n            limit: int = Query(100, gt=0),\n            aorm: OrmAsync = Depends(AppOrm.aget_orm),\n        ) -&gt; List[self.pydantic_model]:\n            return await aorm.get_list(\n                select(self.db_model).offset(skip).limit(limit),\n                deep=self.deep_schema,\n                db_model=self.db_model,\n            )\n\n        return get_list_items\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetList.list","title":"<code>list()</code>","text":"<p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a API</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>def list(self):\n    \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a API\"\"\"\n\n    @self.router.get(\n        f\"{self.prefix}\", tags=self.tags, dependencies=self.dependencies\n    )\n    @cache_redis(self.cache_class, self.cache_ttl, self.cache)\n    async def get_list_items(\n        request: Request,\n        skip: int = Query(0, gte=0),\n        limit: int = Query(100, gt=0),\n        aorm: OrmAsync = Depends(AppOrm.aget_orm),\n    ) -&gt; List[self.pydantic_model]:\n        return await aorm.get_list(\n            select(self.db_model).offset(skip).limit(limit),\n            deep=self.deep_schema,\n            db_model=self.db_model,\n        )\n\n    return get_list_items\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetList.list_paginator","title":"<code>list_paginator()</code>","text":"<p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a API \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>def list_paginator(self):\n    \"\"\"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a API \u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439\"\"\"\n\n    @self.router.get(\n        f\"{self.prefix}\", tags=self.tags, dependencies=self.dependencies\n    )\n    @cache_redis(self.cache_class, self.cache_ttl, self.cache)\n    async def get_list_items_paginator(\n        request: Request,\n        page: int = Query(1, gt=0),\n        size: int = Query(10, gt=0),\n        aorm: OrmAsync = Depends(AppOrm.aget_orm),\n    ) -&gt; self.paginator_class.Schema:\n        offset = self.get_offset(page, size)\n        response = await aorm.get_list(\n            select(self.db_model).order_by(self.name_pk).offset(offset).limit(size),\n            deep=self.deep_schema,\n            db_model=self.db_model,\n        )\n        return self.paginator_class.json(page, size, response)\n\n    return get_list_items_paginator\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetUpdate","title":"<code>ViewSetUpdate</code>","text":"<p>               Bases: <code>BaseViewSet</code></p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>class ViewSetUpdate(BaseViewSet):\n    def _register_endpoint(self):\n        self.update()\n\n    def update(self):\n        \"\"\"API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\"\"\"\n\n        @self.router.put(\n            f\"{self.prefix}/{{item_id}}\", tags=self.tags, dependencies=self.dependencies\n        )\n        async def update_item(\n            item_id: self.type_item_id,\n            item: self.pydantic_model,\n            aorm: OrmAsync = Depends(AppOrm.aget_orm),\n        ) -&gt; self.pydantic_model:\n            return await self.db_update(item_id, item, aorm)\n\n        return update_item\n\n    async def db_update(\n        self, item_id: Union[str, int, UUID], item: Type[BaseModel], aorm: OrmAsync\n    ) -&gt; object:\n        \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414\"\"\"\n        return await aorm.update_item(\n            self.db_model, item_id, item.dict(exclude_unset=True), deep=self.deep_schema\n        )\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetUpdate.db_update","title":"<code>db_update(item_id, item, aorm)</code>  <code>async</code>","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>async def db_update(\n    self, item_id: Union[str, int, UUID], item: Type[BaseModel], aorm: OrmAsync\n) -&gt; object:\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414\"\"\"\n    return await aorm.update_item(\n        self.db_model, item_id, item.dict(exclude_unset=True), deep=self.deep_schema\n    )\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.viewset.ViewSetUpdate.update","title":"<code>update()</code>","text":"<p>API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438</p> Source code in <code>fastapi_accelerator/viewset.py</code> <pre><code>def update(self):\n    \"\"\"API \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\"\"\"\n\n    @self.router.put(\n        f\"{self.prefix}/{{item_id}}\", tags=self.tags, dependencies=self.dependencies\n    )\n    async def update_item(\n        item_id: self.type_item_id,\n        item: self.pydantic_model,\n        aorm: OrmAsync = Depends(AppOrm.aget_orm),\n    ) -&gt; self.pydantic_model:\n        return await self.db_update(item_id, item, aorm)\n\n    return update_item\n</code></pre>"},{"location":"code_docs/#fastapi_acceleratordb","title":"fastapi_accelerator.db","text":""},{"location":"code_docs/#fastapi_accelerator.db.BaseDatabaseManager","title":"<code>BaseDatabaseManager</code>","text":"<p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0420\u0421\u0423\u0411\u0414</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>class BaseDatabaseManager(metaclass=SingletonMeta):\n    \"\"\"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0420\u0421\u0423\u0411\u0414\"\"\"\n\n    def __init__(\n        self,\n        database_url: str,\n        *,\n        pool_size=10,\n        max_overflow=0,\n        echo=True,\n        DEV_STATUS: bool = False,\n    ):\n        self.database_url = None\n        self.engine = None\n        self.session = None\n        self.Base = None\n        self.adatabase_url = None\n        self.aengine = None\n        self.asession = None\n        self._aBase = None\n        self.DEV_STATUS = None\n\n    def get_session() -&gt; Generator[Session, None, None]:\n        pass\n\n    def get_session_transaction() -&gt; Generator[Session, None, None]:\n        pass\n\n    async def aget_session() -&gt; AsyncGenerator[AsyncSession, None]:\n        pass\n\n    async def aget_session_transaction() -&gt; AsyncGenerator[AsyncSession, None]:\n        pass\n\n    def check_dev(self):\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438\"\"\"\n        if not self.DEV_STATUS:\n            raise ValueError(\"\u0422\u0430\u043a\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 DEV \u0440\u0435\u0436\u0438\u043c\u0435.\")\n\n    def create_all(self):\n        pass\n\n    def drop_all(self):\n        pass\n\n    async def acreate_all(self):\n        pass\n\n    async def adrop_all(self):\n        pass\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.BaseDatabaseManager.check_dev","title":"<code>check_dev()</code>","text":"<p>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>def check_dev(self):\n    \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438\"\"\"\n    if not self.DEV_STATUS:\n        raise ValueError(\"\u0422\u0430\u043a\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 DEV \u0440\u0435\u0436\u0438\u043c\u0435.\")\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.BaseOrm","title":"<code>BaseOrm</code>","text":"Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>class BaseOrm:\n\n    def __init__(self, asession: AsyncSession):\n        self.asession = asession\n\n    async def _execute(\n        self, query: Select, deep: bool = False, db_model: Type[T] | None = None\n    ):\n        \"\"\"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c Select \u0437\u0430\u043f\u0440\u043e\u0441\"\"\"\n        if not deep:\n            response = await self.asession.execute(query)\n            return response\n        else:\n            if not db_model:\n                raise TypeError(\"Not set db_model\")\n            relationships = class_mapper(db_model).relationships\n            options = [joinedload(getattr(db_model, rel.key)) for rel in relationships]\n            response = await self.asession.execute(query.options(*options))\n            return response\n\n    async def get(\n        self,\n        query: Select,\n        deep: bool = False,\n        db_model: Type[T] | None = None,\n    ) -&gt; Optional[T]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443\"\"\"\n        response = await self._execute(query, deep, db_model)\n        return response.scalar_one_or_none()\n\n    async def get_list(\n        self,\n        query: Select,\n        deep: bool = False,\n        db_model: Type[T] | None = None,\n    ) -&gt; list[T]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443\"\"\"\n        response = await self._execute(query, deep, db_model)\n        return response.scalars().all()\n\n    async def update(self, query: Update, update_data: dict) -&gt; T:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443\"\"\"\n        query = query.values(**update_data).returning(query.table)\n        result = await self.asession.execute(query)\n        await self.asession.commit()\n        return result.scalars().first()\n\n    async def delete(self, query: Delete) -&gt; bool:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443\"\"\"\n        result = await self.asession.execute(query)\n        await self.asession.commit()\n        return result.rowcount &gt; 0\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.BaseOrm.delete","title":"<code>delete(query)</code>  <code>async</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>async def delete(self, query: Delete) -&gt; bool:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443\"\"\"\n    result = await self.asession.execute(query)\n    await self.asession.commit()\n    return result.rowcount &gt; 0\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.BaseOrm.get","title":"<code>get(query, deep=False, db_model=None)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>async def get(\n    self,\n    query: Select,\n    deep: bool = False,\n    db_model: Type[T] | None = None,\n) -&gt; Optional[T]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443\"\"\"\n    response = await self._execute(query, deep, db_model)\n    return response.scalar_one_or_none()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.BaseOrm.get_list","title":"<code>get_list(query, deep=False, db_model=None)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>async def get_list(\n    self,\n    query: Select,\n    deep: bool = False,\n    db_model: Type[T] | None = None,\n) -&gt; list[T]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443\"\"\"\n    response = await self._execute(query, deep, db_model)\n    return response.scalars().all()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.BaseOrm.update","title":"<code>update(query, update_data)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>async def update(self, query: Update, update_data: dict) -&gt; T:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443\"\"\"\n    query = query.values(**update_data).returning(query.table)\n    result = await self.asession.execute(query)\n    await self.asession.commit()\n    return result.scalars().first()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseAsyncSessionMixin","title":"<code>DatabaseAsyncSessionMixin</code>","text":"<p>               Bases: <code>BaseDatabaseManager</code></p> <p>\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0420\u0421\u0423\u0411\u0414 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0443\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>class DatabaseAsyncSessionMixin(BaseDatabaseManager):\n    \"\"\"\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0420\u0421\u0423\u0411\u0414 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0443\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439\"\"\"\n\n    @classmethod\n    async def aget_session(cls) -&gt; AsyncGenerator[AsyncSession, None]:\n        \"\"\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\n\n        \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e:\n\n        async for asession in aget_orm():\n            yield asession\n        \"\"\"\n        async with cls.instance.asession() as asession:\n            yield asession\n\n    @classmethod\n    async def aget_orm(cls) -&gt; AsyncGenerator[OrmAsync, None]:\n        \"\"\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0435\u0439\n\n        \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e:\n\n        async for orm in aget_orm():\n            yield orm\n        \"\"\"\n        async for asession in cls.aget_session():\n            yield OrmAsync(asession)\n\n    @classmethod\n    async def aget_session_transaction(cls) -&gt; AsyncGenerator[AsyncSession, None]:\n        \"\"\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044e \u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n\n        \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e:\n\n        async for asession in aget_session_transaction():\n            yield asession\n        \"\"\"\n        async with cls.instance.asession() as asession:\n            async with asession.begin():\n                yield asession\n\n    @classmethod\n    async def acreate_all(cls):\n        cls.instance.check_dev()\n        async with cls.instance.aengine.begin() as aconn:\n            # await conn.run_sync(Base.metadata.drop_all)\n            await aconn.run_sync(cls.instance._aBase.metadata.create_all)\n\n    @classmethod\n    async def dispose(cls):\n        \"\"\"\u041c\u0435\u0442\u043e\u0434 dispose() \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\n        \u0432 \u043f\u0443\u043b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u043c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c engine.\n        \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0441\u0432\u043e\u0431\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\n        \"\"\"\n        await cls.instance.aengine.dispose()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseAsyncSessionMixin.aget_orm","title":"<code>aget_orm()</code>  <code>async</code> <code>classmethod</code>","text":"<p>\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0435\u0439</p> <p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e:</p> <p>async for orm in aget_orm():     yield orm</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>@classmethod\nasync def aget_orm(cls) -&gt; AsyncGenerator[OrmAsync, None]:\n    \"\"\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0435\u0439\n\n    \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e:\n\n    async for orm in aget_orm():\n        yield orm\n    \"\"\"\n    async for asession in cls.aget_session():\n        yield OrmAsync(asession)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseAsyncSessionMixin.aget_session","title":"<code>aget_session()</code>  <code>async</code> <code>classmethod</code>","text":"<p>\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445</p> <p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e:</p> <p>async for asession in aget_orm():     yield asession</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>@classmethod\nasync def aget_session(cls) -&gt; AsyncGenerator[AsyncSession, None]:\n    \"\"\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\n\n    \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e:\n\n    async for asession in aget_orm():\n        yield asession\n    \"\"\"\n    async with cls.instance.asession() as asession:\n        yield asession\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseAsyncSessionMixin.aget_session_transaction","title":"<code>aget_session_transaction()</code>  <code>async</code> <code>classmethod</code>","text":"<p>\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044e \u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438</p> <p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e:</p> <p>async for asession in aget_session_transaction():     yield asession</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>@classmethod\nasync def aget_session_transaction(cls) -&gt; AsyncGenerator[AsyncSession, None]:\n    \"\"\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044e \u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n\n    \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e:\n\n    async for asession in aget_session_transaction():\n        yield asession\n    \"\"\"\n    async with cls.instance.asession() as asession:\n        async with asession.begin():\n            yield asession\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseAsyncSessionMixin.dispose","title":"<code>dispose()</code>  <code>async</code> <code>classmethod</code>","text":"<p>\u041c\u0435\u0442\u043e\u0434 dispose() \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0443\u043b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u043c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c engine. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0441\u0432\u043e\u0431\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u044b</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>@classmethod\nasync def dispose(cls):\n    \"\"\"\u041c\u0435\u0442\u043e\u0434 dispose() \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\n    \u0432 \u043f\u0443\u043b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u043c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c engine.\n    \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0441\u0432\u043e\u0431\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\n    \"\"\"\n    await cls.instance.aengine.dispose()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseSyncSessionMixin","title":"<code>DatabaseSyncSessionMixin</code>","text":"<p>               Bases: <code>BaseDatabaseManager</code></p> <p>\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0420\u0421\u0423\u0411\u0414</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>class DatabaseSyncSessionMixin(BaseDatabaseManager):\n    \"\"\"\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0420\u0421\u0423\u0411\u0414\"\"\"\n\n    @classmethod\n    def get_session(cls) -&gt; Generator[Session, None, None]:\n        \"\"\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        session = cls.instance.session()\n        try:\n            yield session\n        finally:\n            session.close()\n\n    @classmethod\n    def get_session_transaction(cls) -&gt; Generator[Session, None, None]:\n        \"\"\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0435\u0439\"\"\"\n        session = cls.instance.session()\n        try:\n            with session.begin():\n                yield session\n        except Exception:\n            session.rollback()\n            raise\n        finally:\n            session.close()\n\n    @classmethod\n    def get_metadata(cls) -&gt; MetaData:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435\"\"\"\n        metadata = MetaData()\n        metadata.reflect(bind=cls.instance.engine)\n        return metadata\n\n    @classmethod\n    def create_all(cls):\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u0411\u0414\"\"\"\n        cls.instance.check_dev()\n        cls.instance.Base.metadata.create_all(bind=cls.instance.engine)\n\n    @classmethod\n    def drop_all(cls):\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437 \u0411\u0414\"\"\"\n        cls.instance.check_dev()\n        cls.instance.get_metadata().drop_all(bind=cls.instance.engine)\n\n    @classmethod\n    def clear_all(cls, exclude_tables_name: list[str] = None):\n        \"\"\"\u041e\u0442\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445\n\n        exclude_tables_name: \u0421\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u0451\u043d \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0447\u0438\u0449\u0430\u0442\u044c\n        \"\"\"\n        cls.instance.check_dev()\n        with cls.instance.session() as session:\n            with session.begin():\n                for table in reversed(cls.instance.get_metadata().sorted_tables):\n                    if table.name in exclude_tables_name:\n                        continue\n                    session.execute(table.delete())\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseSyncSessionMixin.clear_all","title":"<code>clear_all(exclude_tables_name=None)</code>  <code>classmethod</code>","text":"<p>\u041e\u0442\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445</p> <p>exclude_tables_name: \u0421\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u0451\u043d \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0447\u0438\u0449\u0430\u0442\u044c</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>@classmethod\ndef clear_all(cls, exclude_tables_name: list[str] = None):\n    \"\"\"\u041e\u0442\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445\n\n    exclude_tables_name: \u0421\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u0451\u043d \u0442\u0430\u0431\u043b\u0438\u0446 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0447\u0438\u0449\u0430\u0442\u044c\n    \"\"\"\n    cls.instance.check_dev()\n    with cls.instance.session() as session:\n        with session.begin():\n            for table in reversed(cls.instance.get_metadata().sorted_tables):\n                if table.name in exclude_tables_name:\n                    continue\n                session.execute(table.delete())\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseSyncSessionMixin.create_all","title":"<code>create_all()</code>  <code>classmethod</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u0411\u0414</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>@classmethod\ndef create_all(cls):\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u0411\u0414\"\"\"\n    cls.instance.check_dev()\n    cls.instance.Base.metadata.create_all(bind=cls.instance.engine)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseSyncSessionMixin.drop_all","title":"<code>drop_all()</code>  <code>classmethod</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437 \u0411\u0414</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>@classmethod\ndef drop_all(cls):\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437 \u0411\u0414\"\"\"\n    cls.instance.check_dev()\n    cls.instance.get_metadata().drop_all(bind=cls.instance.engine)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseSyncSessionMixin.get_metadata","title":"<code>get_metadata()</code>  <code>classmethod</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>@classmethod\ndef get_metadata(cls) -&gt; MetaData:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435\"\"\"\n    metadata = MetaData()\n    metadata.reflect(bind=cls.instance.engine)\n    return metadata\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseSyncSessionMixin.get_session","title":"<code>get_session()</code>  <code>classmethod</code>","text":"<p>\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>@classmethod\ndef get_session(cls) -&gt; Generator[Session, None, None]:\n    \"\"\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n    session = cls.instance.session()\n    try:\n        yield session\n    finally:\n        session.close()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.DatabaseSyncSessionMixin.get_session_transaction","title":"<code>get_session_transaction()</code>  <code>classmethod</code>","text":"<p>\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0435\u0439</p> Source code in <code>fastapi_accelerator/db/dbsession.py</code> <pre><code>@classmethod\ndef get_session_transaction(cls) -&gt; Generator[Session, None, None]:\n    \"\"\"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0435\u0439\"\"\"\n    session = cls.instance.session()\n    try:\n        with session.begin():\n            yield session\n    except Exception:\n        session.rollback()\n        raise\n    finally:\n        session.close()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.OrmAsync","title":"<code>OrmAsync</code>","text":"<p>               Bases: <code>OrmAsyncItem</code></p> <p>\u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0411\u0414</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>class OrmAsync(OrmAsyncItem):\n    \"\"\"\u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0411\u0414\"\"\"\n\n    ...\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.OrmAsyncItem","title":"<code>OrmAsyncItem</code>","text":"<p>               Bases: <code>BaseOrm</code></p> <p>\u041b\u043e\u0433\u0438\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043e\u0434\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>class OrmAsyncItem(BaseOrm):\n    \"\"\"\u041b\u043e\u0433\u0438\u043a\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043e\u0434\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c\"\"\"\n\n    async def get_item(\n        self, db_model: Type[T], item_id: Union[str, int, uuid.UUID], deep: bool = False\n    ) -&gt; Optional[T]:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e PK\"\"\"\n        if not deep:\n            # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043c\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\n            name_pk: str = get_pk(db_model)\n            return await self.get(select(db_model).filter(name_pk == item_id))\n        else:\n            \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\"\"\"\n            return await self.asession.get(\n                db_model, item_id, options=[selectinload(\"*\")]\n            )\n\n    async def create_item(self, obj: T, deep: bool = False) -&gt; T:\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\"\"\"\n        if not deep:\n            self.asession.add(obj)\n            await self.asession.commit()\n            await self.asession.refresh(obj)\n            return obj\n        else:\n            \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\"\"\"\n            self.asession.add(obj)\n            await self.asession.commit()\n            return await self.eager_refresh(obj)\n\n    async def update_item(\n        self,\n        db_model: Type[T],\n        item_id: Union[str, int, uuid.UUID],\n        update_item: dict,\n        deep: bool = False,\n    ) -&gt; T:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e PK\"\"\"\n\n        if not deep:\n            # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043c\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\n            name_pk: str = get_pk(db_model)\n            return await self.update(\n                update(db_model).filter(name_pk == item_id), update_item\n            )\n        else:\n            \"\"\"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\"\"\"\n\n            async def update_nested(obj: T, update_item: dict) -&gt; T:\n                \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\"\"\"\n                db_model = obj.__class__\n                mapper = class_mapper(db_model)\n                # \u0421\u0432\u044f\u0437\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438\n                relationships_keys = {\n                    r.local_remote_pairs[0][0].key: r.key for r in mapper.relationships\n                }\n                # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043c\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\n                name_pk: str = get_pk(db_model)\n                # \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438\n                columns = [c.key for c in mapper.column_attrs if c.key != name_pk.name]\n                for column_name in columns:\n                    # \u0412\u0437\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e\n                    update_value = update_item.get(column_name)\n                    # \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u044c \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439\n                    if overwrite_column_name := relationships_keys.get(column_name):\n                        related_obj = getattr(obj, overwrite_column_name)\n                        nested_obj = await update_nested(\n                            related_obj, update_item.get(overwrite_column_name)\n                        )\n                        update_value = nested_obj\n                        column_name = overwrite_column_name\n\n                    setattr(obj, column_name, update_value)\n                return obj\n\n            # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\n            obj = await self.asession.get(\n                db_model, item_id, options=[selectinload(\"*\")]\n            )\n            if not obj:\n                return NoResultFound()  # \u0415\u0441\u043b\u0438 \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443\n\n            # \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\n            update_obj = await update_nested(obj, update_item)\n            # \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 \u0411\u0414\n            self.asession.add(update_obj)\n            await self.asession.commit()\n            return update_obj\n\n    async def delete_item(\n        self, db_model: Type[T], item_id: Union[str, int, uuid.UUID], deep: bool = False\n    ) -&gt; bool:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e PK\"\"\"\n        if not deep:\n            # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043c\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\n            name_pk: str = get_pk(db_model)\n            return await self.delete(delete(db_model).filter(name_pk == item_id))\n        else:\n            \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0435\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.\"\"\"\n\n            # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u0435\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 selectinload\n            obj = await self.asession.get(\n                db_model, item_id, options=[selectinload(\"*\")]\n            )\n            if not obj:\n                return False  # \u0415\u0441\u043b\u0438 \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c False\n\n            async def delete_nested(\n                tmp_obj: T,\n                pre_model: Optional[Type[T]] = None,\n            ):\n                \"\"\"\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u0430.\"\"\"\n                mapper = class_mapper(tmp_obj.__class__)\n\n                # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0441\u0432\u044f\u0437\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438\n                for relationship in mapper.relationships:\n                    # \u041d\u0435 \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044c \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0435\u043a\u0430\n                    if (\n                        pre_model\n                        and relationship.target.name == pre_model.__table__.name\n                    ):\n                        continue\n                    related_objs = getattr(tmp_obj, relationship.key)\n                    if related_objs:\n                        if relationship.uselist:\n                            # \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0445 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\n                            for related_obj in related_objs:\n                                await delete_nested(\n                                    related_obj, pre_model=tmp_obj.__class__\n                                )\n                        else:\n                            # \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u043e\u0434\u0438\u043d \u043e\u0431\u044a\u0435\u043a\u0442, \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\n                            await delete_nested(\n                                related_objs, pre_model=tmp_obj.__class__\n                            )\n\n                # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0430\u043c \u043e\u0431\u044a\u0435\u043a\u0442\n                await self.asession.delete(tmp_obj)\n\n            # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441 \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\n            await delete_nested(obj)\n            # \u041a\u043e\u043c\u043c\u0438\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n            await self.asession.commit()\n            return True\n\n    async def eager_refresh(self, obj: Type[T]) -&gt; Type[T]:\n        \"\"\"\u0416\u0430\u0434\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430.\"\"\"\n        return await self.asession.get(\n            type(obj), get_pk(obj), options=[selectinload(\"*\")]\n        )\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.OrmAsyncItem.create_item","title":"<code>create_item(obj, deep=False)</code>  <code>async</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>async def create_item(self, obj: T, deep: bool = False) -&gt; T:\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\"\"\"\n    if not deep:\n        self.asession.add(obj)\n        await self.asession.commit()\n        await self.asession.refresh(obj)\n        return obj\n    else:\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\"\"\"\n        self.asession.add(obj)\n        await self.asession.commit()\n        return await self.eager_refresh(obj)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.OrmAsyncItem.delete_item","title":"<code>delete_item(db_model, item_id, deep=False)</code>  <code>async</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e PK</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>async def delete_item(\n    self, db_model: Type[T], item_id: Union[str, int, uuid.UUID], deep: bool = False\n) -&gt; bool:\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e PK\"\"\"\n    if not deep:\n        # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043c\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\n        name_pk: str = get_pk(db_model)\n        return await self.delete(delete(db_model).filter(name_pk == item_id))\n    else:\n        \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0435\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.\"\"\"\n\n        # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u0435\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 selectinload\n        obj = await self.asession.get(\n            db_model, item_id, options=[selectinload(\"*\")]\n        )\n        if not obj:\n            return False  # \u0415\u0441\u043b\u0438 \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c False\n\n        async def delete_nested(\n            tmp_obj: T,\n            pre_model: Optional[Type[T]] = None,\n        ):\n            \"\"\"\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u0430.\"\"\"\n            mapper = class_mapper(tmp_obj.__class__)\n\n            # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0441\u0432\u044f\u0437\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438\n            for relationship in mapper.relationships:\n                # \u041d\u0435 \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044c \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0435\u043a\u0430\n                if (\n                    pre_model\n                    and relationship.target.name == pre_model.__table__.name\n                ):\n                    continue\n                related_objs = getattr(tmp_obj, relationship.key)\n                if related_objs:\n                    if relationship.uselist:\n                        # \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0445 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\n                        for related_obj in related_objs:\n                            await delete_nested(\n                                related_obj, pre_model=tmp_obj.__class__\n                            )\n                    else:\n                        # \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u043e\u0434\u0438\u043d \u043e\u0431\u044a\u0435\u043a\u0442, \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\n                        await delete_nested(\n                            related_objs, pre_model=tmp_obj.__class__\n                        )\n\n            # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0430\u043c \u043e\u0431\u044a\u0435\u043a\u0442\n            await self.asession.delete(tmp_obj)\n\n        # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441 \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\n        await delete_nested(obj)\n        # \u041a\u043e\u043c\u043c\u0438\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n        await self.asession.commit()\n        return True\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.OrmAsyncItem.eager_refresh","title":"<code>eager_refresh(obj)</code>  <code>async</code>","text":"<p>\u0416\u0430\u0434\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430.</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>async def eager_refresh(self, obj: Type[T]) -&gt; Type[T]:\n    \"\"\"\u0416\u0430\u0434\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430.\"\"\"\n    return await self.asession.get(\n        type(obj), get_pk(obj), options=[selectinload(\"*\")]\n    )\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.OrmAsyncItem.get_item","title":"<code>get_item(db_model, item_id, deep=False)</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e PK</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>async def get_item(\n    self, db_model: Type[T], item_id: Union[str, int, uuid.UUID], deep: bool = False\n) -&gt; Optional[T]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e PK\"\"\"\n    if not deep:\n        # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043c\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\n        name_pk: str = get_pk(db_model)\n        return await self.get(select(db_model).filter(name_pk == item_id))\n    else:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\"\"\"\n        return await self.asession.get(\n            db_model, item_id, options=[selectinload(\"*\")]\n        )\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.OrmAsyncItem.update_item","title":"<code>update_item(db_model, item_id, update_item, deep=False)</code>  <code>async</code>","text":"<p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e PK</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>async def update_item(\n    self,\n    db_model: Type[T],\n    item_id: Union[str, int, uuid.UUID],\n    update_item: dict,\n    deep: bool = False,\n) -&gt; T:\n    \"\"\"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e PK\"\"\"\n\n    if not deep:\n        # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043c\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\n        name_pk: str = get_pk(db_model)\n        return await self.update(\n            update(db_model).filter(name_pk == item_id), update_item\n        )\n    else:\n        \"\"\"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\"\"\"\n\n        async def update_nested(obj: T, update_item: dict) -&gt; T:\n            \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\"\"\"\n            db_model = obj.__class__\n            mapper = class_mapper(db_model)\n            # \u0421\u0432\u044f\u0437\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438\n            relationships_keys = {\n                r.local_remote_pairs[0][0].key: r.key for r in mapper.relationships\n            }\n            # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043c\u044f \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430\n            name_pk: str = get_pk(db_model)\n            # \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438\n            columns = [c.key for c in mapper.column_attrs if c.key != name_pk.name]\n            for column_name in columns:\n                # \u0412\u0437\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e\n                update_value = update_item.get(column_name)\n                # \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u044c \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439\n                if overwrite_column_name := relationships_keys.get(column_name):\n                    related_obj = getattr(obj, overwrite_column_name)\n                    nested_obj = await update_nested(\n                        related_obj, update_item.get(overwrite_column_name)\n                    )\n                    update_value = nested_obj\n                    column_name = overwrite_column_name\n\n                setattr(obj, column_name, update_value)\n            return obj\n\n        # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\n        obj = await self.asession.get(\n            db_model, item_id, options=[selectinload(\"*\")]\n        )\n        if not obj:\n            return NoResultFound()  # \u0415\u0441\u043b\u0438 \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443\n\n        # \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\n        update_obj = await update_nested(obj, update_item)\n        # \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 \u0411\u0414\n        self.asession.add(update_obj)\n        await self.asession.commit()\n        return update_obj\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.SingletonMeta","title":"<code>SingletonMeta</code>","text":"<p>               Bases: <code>type</code></p> <p>\u041c\u0435\u0442\u0430 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u041e\u0434\u0438\u043d\u043e\u0447\u043a\u0430</p> Source code in <code>fastapi_accelerator/utils.py</code> <pre><code>class SingletonMeta(type):\n    \"\"\"\u041c\u0435\u0442\u0430 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u041e\u0434\u0438\u043d\u043e\u0447\u043a\u0430\"\"\"\n\n    instance = None\n\n    def __call__(cls, *args, **kwargs):\n        if cls.instance is None:\n            cls.instance = super(SingletonMeta, cls).__call__(*args, **kwargs)\n        return cls.instance\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.deep_instance","title":"<code>deep_instance(db_model, pydantic_data)</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 SQLAlchemy \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f. \u0415\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043e\u043d\u0438 \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u044b.</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>def deep_instance(db_model: Type[T], pydantic_data: BaseModel) -&gt; T:\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 SQLAlchemy \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f.\n    \u0415\u0441\u043b\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043e\u043d\u0438 \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u044b.\n    \"\"\"\n    kwargs = {}\n    for field, value in pydantic_data:\n        # \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0430\u043a\u0436\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u043c, \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\n        if isinstance(value, BaseModel):\n            # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u0438\u043f \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\n            related_model = getattr(db_model, field).property.mapper.class_\n            value = deep_instance(related_model, value)\n        kwargs[field] = value\n    return db_model(**kwargs)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.db.get_pk","title":"<code>get_pk(db_model)</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0443 \u043c\u043e\u0434\u0435\u043b\u0438</p> Source code in <code>fastapi_accelerator/db/dborm.py</code> <pre><code>def get_pk(db_model: Type[T]) -&gt; Any:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0443 \u043c\u043e\u0434\u0435\u043b\u0438\"\"\"\n    return getattr(db_model, db_model.__table__.primary_key.columns.values()[0].name)\n</code></pre>"},{"location":"code_docs/#fastapi_acceleratorintegration","title":"fastapi_accelerator.integration","text":""},{"location":"code_docs/#fastapi_accelerator.integration.ApiHTTP","title":"<code>ApiHTTP</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Stores API connection details and client.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class ApiHTTP(NamedTuple):\n    \"\"\"Stores API connection details and client.\"\"\"\n\n    credentials: dict | None  # Authentication credentials\n    url: ParseResult  # Parsed URL of the API endpoint\n    version: str  # API version\n    httpmethod: str  # Use HTTP method\n    client: httpx.AsyncClient | None  # HTTP client for making requests (None in tests)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.BaseIntegration","title":"<code>BaseIntegration</code>","text":"<p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439</p> Source code in <code>fastapi_accelerator/integration/base_integration.py</code> <pre><code>class BaseIntegration:\n    \"\"\"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439\"\"\"\n\n    ...\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.BaseStabilityPattern","title":"<code>BaseStabilityPattern</code>","text":"<p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class BaseStabilityPattern:\n    \"\"\"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438\"\"\"\n\n    async def run(self, func: Callable[..., Coroutine]) -&gt; Any: ...\n\n    def __call__(\n        self, func: Callable[..., Awaitable[R]]\n    ) -&gt; Callable[..., Awaitable[R]]:\n        @wraps(func)\n        async def wrapper(*args, **kwargs) -&gt; R:\n            return await self.run(lambda: func(*args, **kwargs))\n\n        return wrapper\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.CircuitBreakerError","title":"<code>CircuitBreakerError</code>","text":"<p>               Bases: <code>StabilityError</code></p> <p>\u041e\u0448\u0438\u0431\u043a\u0430, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0438 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435\u043b\u044f.</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class CircuitBreakerError(StabilityError):\n    \"\"\"\u041e\u0448\u0438\u0431\u043a\u0430, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0438 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435\u043b\u044f.\"\"\"\n\n    # \u042d\u0442\u043e\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0433\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\n    # \u0438\u0437-\u0437\u0430 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0430\u0431\u043e\u0442.\n    http_status = 503\n\n    def __init__(self, message=\"Circuit Breaker \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 OPEN.\"):\n        super().__init__(message)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.EndpointsDeclaration","title":"<code>EndpointsDeclaration</code>","text":"<p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 API.</p> <p>\u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 API, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e URL.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class EndpointsDeclaration:\n    \"\"\"\n    \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 API.\n\n    \u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 API,\n    \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e URL.\n    \"\"\"\n\n    integration: IntegrationHTTP | None = None\n\n    def __init__(self, base_url: URL = \"\", credentials: dict | None = None):\n        \"\"\"\n        \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n            base_url (URL): \u0411\u0430\u0437\u043e\u0432\u044b\u0439 URL \u0434\u043b\u044f API. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u043c\u044f \u0438\u043b\u0438 \u0430\u0434\u0440\u0435\u0441 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 host:port.\n            credentials (dict | None): \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435.\n\n        \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n            \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c base_url \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439\n            \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 production-\u0441\u0440\u0435\u0434\u0435) \u0438\u0437-\u0437\u0430 \u043c\u0435\u0436\u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u044d\u043a\u0440\u0430\u043d\u043e\u0432 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432.\n        \"\"\"\n        self.base_url = base_url\n        self.credentials = credentials\n\n    class Schema:\n        \"\"\"\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\n        \u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0436\u0438\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u0430\u0445 \u043e\u0442 REST API.\n        \"\"\"\n\n    class SchemaError:\n        \"\"\"\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\n        \u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u044b\n        \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 REST API.\n        \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.EndpointsDeclaration.Schema","title":"<code>Schema</code>","text":"<p>\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.</p> <p>\u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0436\u0438\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u0430\u0445 \u043e\u0442 REST API.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class Schema:\n    \"\"\"\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\n    \u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0436\u0438\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u0430\u0445 \u043e\u0442 REST API.\n    \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.EndpointsDeclaration.SchemaError","title":"<code>SchemaError</code>","text":"<p>\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.</p> <p>\u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u044b \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 REST API.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class SchemaError:\n    \"\"\"\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\n    \u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u044b\n    \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 REST API.\n    \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.EndpointsDeclaration.__init__","title":"<code>__init__(base_url='', credentials=None)</code>","text":"\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b <p>base_url (URL): \u0411\u0430\u0437\u043e\u0432\u044b\u0439 URL \u0434\u043b\u044f API. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u043c\u044f \u0438\u043b\u0438 \u0430\u0434\u0440\u0435\u0441 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 host:port. credentials (dict | None): \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435.</p> \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c base_url \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 production-\u0441\u0440\u0435\u0434\u0435) \u0438\u0437-\u0437\u0430 \u043c\u0435\u0436\u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u044d\u043a\u0440\u0430\u043d\u043e\u0432 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>def __init__(self, base_url: URL = \"\", credentials: dict | None = None):\n    \"\"\"\n    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n        base_url (URL): \u0411\u0430\u0437\u043e\u0432\u044b\u0439 URL \u0434\u043b\u044f API. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u043c\u044f \u0438\u043b\u0438 \u0430\u0434\u0440\u0435\u0441 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 host:port.\n        credentials (dict | None): \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435.\n\n    \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n        \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c base_url \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439\n        \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 production-\u0441\u0440\u0435\u0434\u0435) \u0438\u0437-\u0437\u0430 \u043c\u0435\u0436\u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u044d\u043a\u0440\u0430\u043d\u043e\u0432 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432.\n    \"\"\"\n    self.base_url = base_url\n    self.credentials = credentials\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.HTTPMethod","title":"<code>HTTPMethod</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 HTTP \u043c\u0435\u0442\u043e\u0434\u044b</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class HTTPMethod(str, Enum):\n    \"\"\"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 HTTP \u043c\u0435\u0442\u043e\u0434\u044b\"\"\"\n\n    get = \"GET\"\n    post = \"POST\"\n    put = \"PUT\"\n    patch = \"PATCH\"\n    delete = \"DELETE\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.IntegrationHTTP","title":"<code>IntegrationHTTP</code>","text":"<p>               Bases: <code>BaseIntegration</code></p> <p>\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 REST API.</p> <p>\u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 <code>EndpointsDeclaration</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@endpoint</code>. \u042d\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 API.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class IntegrationHTTP(BaseIntegration):\n    \"\"\"\n    \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 REST API.\n\n    \u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 `EndpointsDeclaration`\n    \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 `@endpoint`. \u042d\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\n    \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 API.\n    \"\"\"\n\n    def __init__(self, name: str, doc: str):\n        # \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n        self._doc = doc\n        # \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043b\u0430\u0441\u0441\u0435\n        self._class_info = {\n            \"name\": self.__class__.__name__,\n            \"docstring\": self._doc,\n            \"methods\": [],\n        }\n        # \u0427\u0435\u043b\u043e\u0432\u0435\u043e\u043a\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0435 \u0438\u043c\u044f\n        self.name = name\n\n    def _add_integrations_method(\n        self,\n        func: Callable,\n        path: str,\n        version: str,\n        docurl: str,\n        httpmethod: HTTPMethod,\n    ):\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u043c\u0435\u0442\u043e\u0434\u0443 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.\"\"\"\n        # \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n        self._class_info[\"methods\"].append(\n            {\n                \"name\": func.__name__,\n                \"docstring\": getattr(func, \"__doc__\", \"\"),\n                \"annotations\": {\n                    k: v.__name__ if hasattr(v, \"__name__\") else str(v)\n                    for k, v in func.__annotations__.items()\n                    # \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 api\n                    if k not in (\"api\")\n                },\n                \"path\": path,\n                \"httpmethod\": httpmethod,\n                \"version\": version,\n                \"docurl\": docurl,\n            }\n        )\n\n    @property\n    def docs(self) -&gt; dict:\n        \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u044d\u0442\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.\"\"\"\n        return self._class_info\n\n    def endpoint(\n        self, httpmethod: HTTPMethod, path: str, version: str, docurl: str\n    ) -&gt; Callable[[Callable[..., Awaitable[R]]], Callable[..., Awaitable[R]]]:\n        \"\"\"\n        \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 REST-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0441 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438.\n\n        \u042d\u0442\u043e\u0442 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u043a\u043b\u0430\u0441\u0441\u0430, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043e\u0442 `IntegrationHTTP`,\n        \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 REST-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b.\n\n        Args:\n            path (str): \u041f\u0443\u0442\u044c, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441.\n            version (str): \u0412\u0435\u0440\u0441\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430.\n            docurl (str): \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430.\n            httpmethod (HTTPMethod): \u041a\u0430\u043a\u043e\u0439 HTTP \u043c\u0435\u0442\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0443\u0437\u0435\u0438\u0442\u0441\u044f.\n\n        Returns:\n            Callable[..., Awaitable[R]]: \u0414\u0435\u043a\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 REST-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u043c.\n\n        \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f:\n            - \u041c\u0435\u0442\u043e\u0434, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440, \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u043a\u043b\u0430\u0441\u0441\u0435, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043e\u0442 `IntegrationHTTP`\n            - \u0414\u043b\u044f \u0434\u0435\u043a\u043e\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438.\n            - \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0435.\n\n        Raises:\n            ValueError: \u0415\u0441\u043b\u0438 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0442\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n            TypeError: \u0412\u044b\u0437\u044b\u0432\u0430\u043d \u043c\u0435\u0442\u043e\u0434 \u043d\u0435 \u0443 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043b\u0430\u0441\u0441\u0430\n\n        \"\"\"\n\n        def decorator(func: Callable[..., Awaitable[R]]) -&gt; Callable[..., Awaitable[R]]:\n\n            # \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u0442\u0438\u043f \u043e\u0442\u0432\u0435\u0442\u0430\n            return_type = func.__annotations__.get(\"return\")\n            if not return_type:\n                raise ValueError(\n                    \"Return type must be specified for integration function\"\n                )\n\n            # \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\n            self._add_integrations_method(func, path, version, docurl, httpmethod)\n\n            @wraps(func)\n            async def wrapper(\n                self_endpoint: EndpointsDeclaration, *args, **kwargs\n            ) -&gt; R:\n                if not isinstance(self_endpoint, EndpointsDeclaration):\n                    raise TypeError(\n                        \"Method must be called on an instance, not the class itself\"\n                    )\n\n                # \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0434\u043e endpoint\n                url: ParseResult = urlparse(self_endpoint.base_url + path)\n                try:\n\n                    response = await wraper_endpoint(\n                        self_endpoint,\n                        func,\n                        url,\n                        version,\n                        httpmethod,\n                        *args,\n                        **kwargs,\n                    )\n                    # \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0432 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f\n                    return convert_response(return_type, response)\n                except StabilityError as e:\n                    # \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043b\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445 \u0441\u0442\u0430\u0431\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n                    raise HTTPException(\n                        status_code=getattr(e, \"http_status\", 500),\n                        detail=f\"{e.__class__.__name__}: {self.__class__.__name__}.{func.__name__}: {e.message}\",\n                    )\n\n            return wrapper\n\n        return decorator\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.IntegrationHTTP.docs","title":"<code>docs: dict</code>  <code>property</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u044d\u0442\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.</p>"},{"location":"code_docs/#fastapi_accelerator.integration.IntegrationHTTP.endpoint","title":"<code>endpoint(httpmethod, path, version, docurl)</code>","text":"<p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 REST-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0441 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438.</p> <p>\u042d\u0442\u043e\u0442 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u043a\u043b\u0430\u0441\u0441\u0430, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043e\u0442 <code>IntegrationHTTP</code>, \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 REST-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>\u041f\u0443\u0442\u044c, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441.</p> required <code>version</code> <code>str</code> <p>\u0412\u0435\u0440\u0441\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430.</p> required <code>docurl</code> <code>str</code> <p>\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430.</p> required <code>httpmethod</code> <code>HTTPMethod</code> <p>\u041a\u0430\u043a\u043e\u0439 HTTP \u043c\u0435\u0442\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0443\u0437\u0435\u0438\u0442\u0441\u044f.</p> required <p>Returns:</p> Type Description <code>Callable[[Callable[..., Awaitable[R]]], Callable[..., Awaitable[R]]]</code> <p>Callable[..., Awaitable[R]]: \u0414\u0435\u043a\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 REST-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u043c.</p> \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f <ul> <li>\u041c\u0435\u0442\u043e\u0434, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440, \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u043a\u043b\u0430\u0441\u0441\u0435, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043e\u0442 <code>IntegrationHTTP</code></li> <li>\u0414\u043b\u044f \u0434\u0435\u043a\u043e\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438.</li> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0435.</li> </ul> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u0415\u0441\u043b\u0438 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0442\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.</p> <code>TypeError</code> <p>\u0412\u044b\u0437\u044b\u0432\u0430\u043d \u043c\u0435\u0442\u043e\u0434 \u043d\u0435 \u0443 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043b\u0430\u0441\u0441\u0430</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>def endpoint(\n    self, httpmethod: HTTPMethod, path: str, version: str, docurl: str\n) -&gt; Callable[[Callable[..., Awaitable[R]]], Callable[..., Awaitable[R]]]:\n    \"\"\"\n    \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 REST-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 \u0441 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438.\n\n    \u042d\u0442\u043e\u0442 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u043a\u043b\u0430\u0441\u0441\u0430, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043e\u0442 `IntegrationHTTP`,\n    \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 REST-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b.\n\n    Args:\n        path (str): \u041f\u0443\u0442\u044c, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441.\n        version (str): \u0412\u0435\u0440\u0441\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430.\n        docurl (str): \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430.\n        httpmethod (HTTPMethod): \u041a\u0430\u043a\u043e\u0439 HTTP \u043c\u0435\u0442\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0443\u0437\u0435\u0438\u0442\u0441\u044f.\n\n    Returns:\n        Callable[..., Awaitable[R]]: \u0414\u0435\u043a\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 REST-\u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u043c.\n\n    \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f:\n        - \u041c\u0435\u0442\u043e\u0434, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440, \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u043a\u043b\u0430\u0441\u0441\u0435, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043e\u0442 `IntegrationHTTP`\n        - \u0414\u043b\u044f \u0434\u0435\u043a\u043e\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438.\n        - \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0435.\n\n    Raises:\n        ValueError: \u0415\u0441\u043b\u0438 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0442\u0438\u043f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n        TypeError: \u0412\u044b\u0437\u044b\u0432\u0430\u043d \u043c\u0435\u0442\u043e\u0434 \u043d\u0435 \u0443 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043b\u0430\u0441\u0441\u0430\n\n    \"\"\"\n\n    def decorator(func: Callable[..., Awaitable[R]]) -&gt; Callable[..., Awaitable[R]]:\n\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u0442\u0438\u043f \u043e\u0442\u0432\u0435\u0442\u0430\n        return_type = func.__annotations__.get(\"return\")\n        if not return_type:\n            raise ValueError(\n                \"Return type must be specified for integration function\"\n            )\n\n        # \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\n        self._add_integrations_method(func, path, version, docurl, httpmethod)\n\n        @wraps(func)\n        async def wrapper(\n            self_endpoint: EndpointsDeclaration, *args, **kwargs\n        ) -&gt; R:\n            if not isinstance(self_endpoint, EndpointsDeclaration):\n                raise TypeError(\n                    \"Method must be called on an instance, not the class itself\"\n                )\n\n            # \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0434\u043e endpoint\n            url: ParseResult = urlparse(self_endpoint.base_url + path)\n            try:\n\n                response = await wraper_endpoint(\n                    self_endpoint,\n                    func,\n                    url,\n                    version,\n                    httpmethod,\n                    *args,\n                    **kwargs,\n                )\n                # \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0432 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f\n                return convert_response(return_type, response)\n            except StabilityError as e:\n                # \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043b\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445 \u0441\u0442\u0430\u0431\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n                raise HTTPException(\n                    status_code=getattr(e, \"http_status\", 500),\n                    detail=f\"{e.__class__.__name__}: {self.__class__.__name__}.{func.__name__}: {e.message}\",\n                )\n\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.MaxRetriesExceededError","title":"<code>MaxRetriesExceededError</code>","text":"<p>               Bases: <code>StabilityError</code></p> <p>\u041e\u0448\u0438\u0431\u043a\u0430, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u043f\u044b\u0442\u043e\u043a.</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class MaxRetriesExceededError(StabilityError):\n    \"\"\"\u041e\u0448\u0438\u0431\u043a\u0430, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u043f\u044b\u0442\u043e\u043a.\"\"\"\n\n    # \u042d\u0442\u043e\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0437\u0430 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\n    http_status = 429\n\n    def __init__(self, max_attempts: int):\n        message = f\"\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a: {max_attempts}.\"\n        super().__init__(message)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.StabilityError","title":"<code>StabilityError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0448\u0438\u0431\u043e\u043a \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class StabilityError(Exception):\n    \"\"\"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0448\u0438\u0431\u043e\u043a \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\"\"\"\n\n    http_status = None\n\n    def __init__(self, message) -&gt; None:\n        self.message = message\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.StabilityTimeoutError","title":"<code>StabilityTimeoutError</code>","text":"<p>               Bases: <code>StabilityError</code></p> <p>\u041e\u0448\u0438\u0431\u043a\u0430, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f.</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class StabilityTimeoutError(StabilityError):\n    \"\"\"\u041e\u0448\u0438\u0431\u043a\u0430, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f.\"\"\"\n\n    # \u042d\u0442\u043e\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0441\u0435\u0440\u0432\u0435\u0440, \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u0439 \u0432 \u0440\u043e\u043b\u0438 \u0448\u043b\u044e\u0437\u0430 \u0438\u043b\u0438 \u043f\u0440\u043e\u043a\u0441\u0438,\n    # \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0441\u0432\u043e\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0432\u044b\u0448\u0435\u0441\u0442\u043e\u044f\u0449\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430.\n    http_status = 504\n\n    def __init__(self, message=\"\u0412\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0438\u0441\u0442\u0435\u043a\u043b\u043e.\"):\n        super().__init__(message)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.ThrottlingError","title":"<code>ThrottlingError</code>","text":"<p>               Bases: <code>StabilityError</code></p> <p>\u041e\u0448\u0438\u0431\u043a\u0430, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u043b\u0438\u043c\u0438\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class ThrottlingError(StabilityError):\n    \"\"\"\u041e\u0448\u0438\u0431\u043a\u0430, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0449\u0430\u044f \u043f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u043b\u0438\u043c\u0438\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\"\"\"\n\n    # \u042d\u0442\u043e\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0437\u0430 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\n    http_status = 429\n\n    def __init__(self, message=\"\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443.\"):\n        super().__init__(message)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp","title":"<code>sp</code>","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</p> <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438:</p> <p>Fallback \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u0430\u043c\u044b\u043c \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0431\u043e\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</p> <p>Fallback(alternative_func)</p> <p>Timeout \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 Fallback, \u0447\u0442\u043e\u0431\u044b \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0442\u0430\u043a \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u043d\u043e\u0439.</p> <p>Timeout(seconds=timeout_seconds)</p> <p>CircuitBreaker \u0438\u0434\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b, \u0435\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e \u0438\u043b\u0438 \u043f\u043e \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0443.</p> <p>CircuitBreaker(fail_threshold, reset_timeout)</p> <p>Retry \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430 CircuitBreaker, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437, \u0435\u0441\u043b\u0438 CircuitBreaker \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u044d\u0442\u043e.</p> <p>RetryPattern(max_attempts=max_attempts, delay=timedelta(seconds=delay_seconds))</p> <p>Throttling \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0447\u0442\u043e\u0431\u044b \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0432\u0441\u0435\u0439 \u043e\u0431\u0451\u0440\u043d\u0443\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</p> <p>Throttling(calls_per_second=calls_per_second)</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class sp:\n    \"\"\"\n    \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n    \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438:\n\n    Fallback \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u0430\u043c\u044b\u043c \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\n    \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0431\u043e\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n    &gt; Fallback(alternative_func)\n\n    Timeout \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 Fallback, \u0447\u0442\u043e\u0431\u044b \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u043a\n    \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0442\u0430\u043a \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u043d\u043e\u0439.\n    &gt; Timeout(seconds=timeout_seconds)\n\n    CircuitBreaker \u0438\u0434\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0435 \u0432\u044b\u0437\u043e\u0432\u044b, \u0435\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\n    \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e \u0438\u043b\u0438 \u043f\u043e \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0443.\n    &gt; CircuitBreaker(fail_threshold, reset_timeout)\n\n    Retry \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430 CircuitBreaker, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c\n    \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437, \u0435\u0441\u043b\u0438 CircuitBreaker \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u044d\u0442\u043e.\n    &gt; RetryPattern(max_attempts=max_attempts, delay=timedelta(seconds=delay_seconds))\n\n    Throttling \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0447\u0442\u043e\u0431\u044b \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0447\u0430\u0441\u0442\u043e\u0442\u0443\n    \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0432\u0441\u0435\u0439 \u043e\u0431\u0451\u0440\u043d\u0443\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n    &gt; Throttling(calls_per_second=calls_per_second)\n    \"\"\"\n\n    class Fallback(BaseStabilityPattern):\n        \"\"\"(\u0420\u0435\u0437\u0435\u0440\u0432\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442) - \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0431\u043e\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e.\n        \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0434\u0435\u0433\u0440\u0430\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u043e, \u0430 \u043d\u0435 \u043f\u0430\u0434\u0430\u0442\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.\"\"\"\n\n        def __init__(self, alternative_func: Coroutine) -&gt; None:\n            \"\"\"\n            alternative_func: \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0437\u043e\u043b\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\n            \"\"\"\n            self.alternative_func = alternative_func\n\n        async def run(self, func: Callable[..., Coroutine]) -&gt; Any:\n            try:\n                return await func()\n            except Exception:\n                return await self.alternative_func()\n\n    class Timeout(BaseStabilityPattern):\n        \"\"\"(\u0422\u0430\u0439\u043c-\u0430\u0443\u0442) - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430. \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0443 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u0440\u0438\n        \u0437\u0430\u0432\u0438\u0441\u0430\u043d\u0438\u0438 \u0432\u044b\u0437\u043e\u0432\u0430.\"\"\"\n\n        def __init__(self, seconds: int = 10) -&gt; None:\n            \"\"\"\n            seconds: \u0427\u0435\u0440\u0435\u0437 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u043f\u0440\u0435\u0440\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n            \"\"\"\n            self.seconds = seconds\n\n        async def run(self, func: Callable[..., Coroutine]) -&gt; Any:\n            try:\n                return await asyncio.wait_for(func(), timeout=self.seconds)\n            except asyncio.TimeoutError:\n                raise StabilityTimeoutError(\"Function call timed out\")\n\n    class CircuitBreaker(BaseStabilityPattern):\n        \"\"\"(\u041f\u0440\u0435\u0434\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435\u043b\u044c) - \u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430. \u041f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u043b\u0438\u043c\u0438\u0442\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\n        \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u0437\u043e\u0432, \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u044f \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0435 \u0441\u0431\u043e\u0438.\n\n\n        \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Circuit Breaker:\n\n        -   **Close** - \u0418\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0431\u043e\u0435\u0432.\n            \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0441\u0431\u043e\u0435\u0432 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435,\n            \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Open.\n\n        -   **Open** - \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.\n            \u041f\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0430\u0439\u043c-\u0430\u0443\u0442\u0430 \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Half-Open.\n\n        -   **Half-open** - \u0412\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0438\n            \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u043e, \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\n            \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Closed, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u0442\u0430\u0442\u0443\u0441 Open.\n        \"\"\"\n\n        def __init__(self, fail_threshold: int = 3, reset_timeout: float = 10):\n            \"\"\"\n            fail_threshold: \u041f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0441\u0431\u043e\u0435\u0432\n            reset_timeout: \u041f\u0435\u0440\u0438\u043e\u0434 \u0441\u0431\u0440\u043e\u0441\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0431\u043e\u0435\u0432\n            \"\"\"\n            self.fail_threshold = fail_threshold\n            self.reset_timeout = reset_timeout\n            self._failures = 0\n            self._last_failure_time = None\n            self._state = \"CLOSED\"\n\n        async def run(self, func: Callable[..., Coroutine]) -&gt; Any:\n            if self._state == \"OPEN\":\n                if (\n                    asyncio.get_event_loop().time() - self._last_failure_time\n                    &gt; self.reset_timeout\n                ):\n                    self._state = \"HALF-OPEN\"\n                else:\n                    raise CircuitBreakerError(\"Circuit is OPEN\")\n\n            try:\n                result = await func()\n                if self._state == \"HALF-OPEN\":\n                    self._state = \"CLOSED\"\n                    self._failures = 0\n                return result\n            except Exception as e:\n                self._failures += 1\n                if self._failures &gt;= self.fail_threshold:\n                    self._state = \"OPEN\"\n                    self._last_failure_time = asyncio.get_event_loop().time()\n                raise e\n\n    class RetryPattern(BaseStabilityPattern):\n        \"\"\"(\u041f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f) - \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438.\"\"\"\n\n        def __init__(\n            self, max_attempts: int = 3, delay: timedelta = timedelta(seconds=1)\n        ) -&gt; None:\n            \"\"\"\n            max_attempts: \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\n            delay: \u0417\u0430\u0434\u0435\u0440\u0436\u043a\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043f\u044b\u0442\u043a\u0430\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n            \"\"\"\n            self.max_attempts = max_attempts\n            self.delay = delay\n\n        async def run(self, func: Callable[..., Coroutine]) -&gt; Any:\n            attempts = 0\n            while attempts &lt; self.max_attempts:\n                try:\n                    return await func()\n                except Exception as e:\n                    attempts += 1\n                    if attempts == self.max_attempts:\n                        raise MaxRetriesExceededError(self.max_attempts) from e\n                    await asyncio.sleep(self.delay.total_seconds())\n\n    class Throttling(BaseStabilityPattern):\n        \"\"\"(\u0420\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435) - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0443 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0438.\n        \u0417\u0430\u0449\u0438\u0449\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e\u0442 \u0448\u0442\u043e\u0440\u043c\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\"\"\"\n\n        def __init__(self, calls_per_second: int = 1_000):\n            \"\"\"\n            calls_per_second: \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443\n            \"\"\"\n            self.calls_per_second = calls_per_second\n            self._last_called = 0\n            self._interval = 1 / calls_per_second\n\n        async def run(self, func: Callable[..., Coroutine]) -&gt; Any:\n            current_time = asyncio.get_event_loop().time()\n            time_passed = current_time - self._last_called\n            # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0434\u043e\u0436\u0434\u0430\u0442\u044c\n            if time_passed &lt; self._interval:\n                raise ThrottlingError(\"\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443.\")\n            # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430\n            self._last_called = asyncio.get_event_loop().time()\n            # \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n            return await func()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp.CircuitBreaker","title":"<code>CircuitBreaker</code>","text":"<p>               Bases: <code>BaseStabilityPattern</code></p> <p>(\u041f\u0440\u0435\u0434\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435\u043b\u044c) - \u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430. \u041f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u043b\u0438\u043c\u0438\u0442\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u0437\u043e\u0432, \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u044f \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0435 \u0441\u0431\u043e\u0438.</p> <p>\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Circuit Breaker:</p> <ul> <li> <p>Close - \u0418\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0431\u043e\u0435\u0432.     \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0441\u0431\u043e\u0435\u0432 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435,     \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Open.</p> </li> <li> <p>Open - \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.     \u041f\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0430\u0439\u043c-\u0430\u0443\u0442\u0430 \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Half-Open.</p> </li> <li> <p>Half-open - \u0412\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0438     \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u043e, \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442     \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Closed, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u0442\u0430\u0442\u0443\u0441 Open.</p> </li> </ul> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class CircuitBreaker(BaseStabilityPattern):\n    \"\"\"(\u041f\u0440\u0435\u0434\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435\u043b\u044c) - \u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430. \u041f\u0440\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u043b\u0438\u043c\u0438\u0442\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\n    \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0432\u044b\u0437\u043e\u0432, \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u044f \u043a\u0430\u0441\u043a\u0430\u0434\u043d\u044b\u0435 \u0441\u0431\u043e\u0438.\n\n\n    \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f Circuit Breaker:\n\n    -   **Close** - \u0418\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0431\u043e\u0435\u0432.\n        \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0441\u0431\u043e\u0435\u0432 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435,\n        \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Open.\n\n    -   **Open** - \u0417\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.\n        \u041f\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0430\u0439\u043c-\u0430\u0443\u0442\u0430 \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Half-Open.\n\n    -   **Half-open** - \u0412\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0438\n        \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u043e, \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\n        \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Closed, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u0442\u0430\u0442\u0443\u0441 Open.\n    \"\"\"\n\n    def __init__(self, fail_threshold: int = 3, reset_timeout: float = 10):\n        \"\"\"\n        fail_threshold: \u041f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0441\u0431\u043e\u0435\u0432\n        reset_timeout: \u041f\u0435\u0440\u0438\u043e\u0434 \u0441\u0431\u0440\u043e\u0441\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0431\u043e\u0435\u0432\n        \"\"\"\n        self.fail_threshold = fail_threshold\n        self.reset_timeout = reset_timeout\n        self._failures = 0\n        self._last_failure_time = None\n        self._state = \"CLOSED\"\n\n    async def run(self, func: Callable[..., Coroutine]) -&gt; Any:\n        if self._state == \"OPEN\":\n            if (\n                asyncio.get_event_loop().time() - self._last_failure_time\n                &gt; self.reset_timeout\n            ):\n                self._state = \"HALF-OPEN\"\n            else:\n                raise CircuitBreakerError(\"Circuit is OPEN\")\n\n        try:\n            result = await func()\n            if self._state == \"HALF-OPEN\":\n                self._state = \"CLOSED\"\n                self._failures = 0\n            return result\n        except Exception as e:\n            self._failures += 1\n            if self._failures &gt;= self.fail_threshold:\n                self._state = \"OPEN\"\n                self._last_failure_time = asyncio.get_event_loop().time()\n            raise e\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp.CircuitBreaker.__init__","title":"<code>__init__(fail_threshold=3, reset_timeout=10)</code>","text":"<p>fail_threshold: \u041f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0441\u0431\u043e\u0435\u0432 reset_timeout: \u041f\u0435\u0440\u0438\u043e\u0434 \u0441\u0431\u0440\u043e\u0441\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0431\u043e\u0435\u0432</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>def __init__(self, fail_threshold: int = 3, reset_timeout: float = 10):\n    \"\"\"\n    fail_threshold: \u041f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0441\u0431\u043e\u0435\u0432\n    reset_timeout: \u041f\u0435\u0440\u0438\u043e\u0434 \u0441\u0431\u0440\u043e\u0441\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0431\u043e\u0435\u0432\n    \"\"\"\n    self.fail_threshold = fail_threshold\n    self.reset_timeout = reset_timeout\n    self._failures = 0\n    self._last_failure_time = None\n    self._state = \"CLOSED\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp.Fallback","title":"<code>Fallback</code>","text":"<p>               Bases: <code>BaseStabilityPattern</code></p> <p>(\u0420\u0435\u0437\u0435\u0440\u0432\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442) - \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0431\u043e\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0434\u0435\u0433\u0440\u0430\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u043e, \u0430 \u043d\u0435 \u043f\u0430\u0434\u0430\u0442\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class Fallback(BaseStabilityPattern):\n    \"\"\"(\u0420\u0435\u0437\u0435\u0440\u0432\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442) - \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0431\u043e\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e.\n    \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0434\u0435\u0433\u0440\u0430\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u043e, \u0430 \u043d\u0435 \u043f\u0430\u0434\u0430\u0442\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.\"\"\"\n\n    def __init__(self, alternative_func: Coroutine) -&gt; None:\n        \"\"\"\n        alternative_func: \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0437\u043e\u043b\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\n        \"\"\"\n        self.alternative_func = alternative_func\n\n    async def run(self, func: Callable[..., Coroutine]) -&gt; Any:\n        try:\n            return await func()\n        except Exception:\n            return await self.alternative_func()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp.Fallback.__init__","title":"<code>__init__(alternative_func)</code>","text":"<p>alternative_func: \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0437\u043e\u043b\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>def __init__(self, alternative_func: Coroutine) -&gt; None:\n    \"\"\"\n    alternative_func: \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0437\u043e\u043b\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\n    \"\"\"\n    self.alternative_func = alternative_func\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp.RetryPattern","title":"<code>RetryPattern</code>","text":"<p>               Bases: <code>BaseStabilityPattern</code></p> <p>(\u041f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f) - \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438.</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class RetryPattern(BaseStabilityPattern):\n    \"\"\"(\u041f\u0430\u0442\u0442\u0435\u0440\u043d \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u044f) - \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438.\"\"\"\n\n    def __init__(\n        self, max_attempts: int = 3, delay: timedelta = timedelta(seconds=1)\n    ) -&gt; None:\n        \"\"\"\n        max_attempts: \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\n        delay: \u0417\u0430\u0434\u0435\u0440\u0436\u043a\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043f\u044b\u0442\u043a\u0430\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n        \"\"\"\n        self.max_attempts = max_attempts\n        self.delay = delay\n\n    async def run(self, func: Callable[..., Coroutine]) -&gt; Any:\n        attempts = 0\n        while attempts &lt; self.max_attempts:\n            try:\n                return await func()\n            except Exception as e:\n                attempts += 1\n                if attempts == self.max_attempts:\n                    raise MaxRetriesExceededError(self.max_attempts) from e\n                await asyncio.sleep(self.delay.total_seconds())\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp.RetryPattern.__init__","title":"<code>__init__(max_attempts=3, delay=timedelta(seconds=1))</code>","text":"<p>max_attempts: \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 delay: \u0417\u0430\u0434\u0435\u0440\u0436\u043a\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043f\u044b\u0442\u043a\u0430\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>def __init__(\n    self, max_attempts: int = 3, delay: timedelta = timedelta(seconds=1)\n) -&gt; None:\n    \"\"\"\n    max_attempts: \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\n    delay: \u0417\u0430\u0434\u0435\u0440\u0436\u043a\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043f\u044b\u0442\u043a\u0430\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n    \"\"\"\n    self.max_attempts = max_attempts\n    self.delay = delay\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp.Throttling","title":"<code>Throttling</code>","text":"<p>               Bases: <code>BaseStabilityPattern</code></p> <p>(\u0420\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435) - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0443 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0438. \u0417\u0430\u0449\u0438\u0449\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e\u0442 \u0448\u0442\u043e\u0440\u043c\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class Throttling(BaseStabilityPattern):\n    \"\"\"(\u0420\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435) - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0443 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043a\u0438.\n    \u0417\u0430\u0449\u0438\u0449\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e\u0442 \u0448\u0442\u043e\u0440\u043c\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\"\"\"\n\n    def __init__(self, calls_per_second: int = 1_000):\n        \"\"\"\n        calls_per_second: \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443\n        \"\"\"\n        self.calls_per_second = calls_per_second\n        self._last_called = 0\n        self._interval = 1 / calls_per_second\n\n    async def run(self, func: Callable[..., Coroutine]) -&gt; Any:\n        current_time = asyncio.get_event_loop().time()\n        time_passed = current_time - self._last_called\n        # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0434\u043e\u0436\u0434\u0430\u0442\u044c\n        if time_passed &lt; self._interval:\n            raise ThrottlingError(\"\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443.\")\n        # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430\n        self._last_called = asyncio.get_event_loop().time()\n        # \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n        return await func()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp.Throttling.__init__","title":"<code>__init__(calls_per_second=1000)</code>","text":"<p>calls_per_second: \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>def __init__(self, calls_per_second: int = 1_000):\n    \"\"\"\n    calls_per_second: \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443\n    \"\"\"\n    self.calls_per_second = calls_per_second\n    self._last_called = 0\n    self._interval = 1 / calls_per_second\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp.Timeout","title":"<code>Timeout</code>","text":"<p>               Bases: <code>BaseStabilityPattern</code></p> <p>(\u0422\u0430\u0439\u043c-\u0430\u0443\u0442) - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430. \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0443 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u0440\u0438 \u0437\u0430\u0432\u0438\u0441\u0430\u043d\u0438\u0438 \u0432\u044b\u0437\u043e\u0432\u0430.</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>class Timeout(BaseStabilityPattern):\n    \"\"\"(\u0422\u0430\u0439\u043c-\u0430\u0443\u0442) - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430. \u041f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0443 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u043f\u0440\u0438\n    \u0437\u0430\u0432\u0438\u0441\u0430\u043d\u0438\u0438 \u0432\u044b\u0437\u043e\u0432\u0430.\"\"\"\n\n    def __init__(self, seconds: int = 10) -&gt; None:\n        \"\"\"\n        seconds: \u0427\u0435\u0440\u0435\u0437 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u043f\u0440\u0435\u0440\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        \"\"\"\n        self.seconds = seconds\n\n    async def run(self, func: Callable[..., Coroutine]) -&gt; Any:\n        try:\n            return await asyncio.wait_for(func(), timeout=self.seconds)\n        except asyncio.TimeoutError:\n            raise StabilityTimeoutError(\"Function call timed out\")\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.sp.Timeout.__init__","title":"<code>__init__(seconds=10)</code>","text":"<p>seconds: \u0427\u0435\u0440\u0435\u0437 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u043f\u0440\u0435\u0440\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430</p> Source code in <code>fastapi_accelerator/integration/stability_patterns.py</code> <pre><code>def __init__(self, seconds: int = 10) -&gt; None:\n    \"\"\"\n    seconds: \u0427\u0435\u0440\u0435\u0437 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434 \u043f\u0440\u0435\u0440\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n    \"\"\"\n    self.seconds = seconds\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.convert_response","title":"<code>convert_response(rtypes, data)</code>","text":"<p>\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c Pydantic \u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</p> <p>\u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f \u0438\u043b\u0438 \u0442\u0438\u043f\u044b. \u041e\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0435 \u0442\u0438\u043f\u044b, Union \u0442\u0438\u043f\u044b, \u0438 \u0441\u043f\u0438\u0441\u043a\u0438 \u0442\u0438\u043f\u043e\u0432.</p> <p>Parameters:</p> Name Type Description Default <code>rtypes</code> <code>GenericAlias</code> <p>\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0438\u043b\u0438 \u0442\u0438\u043f\u044b \u043e\u0442\u0432\u0435\u0442\u0430. \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0438\u043b\u0438 Union \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0442\u0438\u043f\u043e\u0432.</p> required <code>data</code> <code>Union[dict, list]</code> <p>\u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438. \u041c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u043c \u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u043c.</p> required <p>Returns:</p> Type Description <code>Union[Any, BaseModel, List[BaseModel]]</code> <p>Union[dict, list, BaseModel, List[BaseModel]]: \u0421\u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> <code>Union[Any, BaseModel, List[BaseModel]]</code> <p>\u0415\u0441\u043b\u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c \u0438\u043b\u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u0430\u0441\u044c, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0438\u0441\u044c \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e.</p> Source code in <code>fastapi_accelerator/integration/base_integration.py</code> <pre><code>def convert_response(\n    rtypes: GenericAlias, data: Union[Any, dict, list]\n) -&gt; Union[Any, BaseModel, List[BaseModel]]:\n    \"\"\"\n    \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c Pydantic \u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u043e\u0434\u0435\u043b\u0435\u0439.\n\n    \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f \u0438\u043b\u0438 \u0442\u0438\u043f\u044b.\n    \u041e\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0435 \u0442\u0438\u043f\u044b, Union \u0442\u0438\u043f\u044b, \u0438 \u0441\u043f\u0438\u0441\u043a\u0438 \u0442\u0438\u043f\u043e\u0432.\n\n    Args:\n        rtypes (GenericAlias):\n            \u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0438\u043b\u0438 \u0442\u0438\u043f\u044b \u043e\u0442\u0432\u0435\u0442\u0430. \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0438\u043b\u0438 Union \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0442\u0438\u043f\u043e\u0432.\n        data (Union[dict, list]):\n            \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438. \u041c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u043c \u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u043c.\n\n    Returns:\n        Union[dict, list, BaseModel, List[BaseModel]]: \u0421\u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n        \u0415\u0441\u043b\u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c \u0438\u043b\u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u0430\u0441\u044c, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n\n    Raises:\n        ValidationError: \u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0438\u0441\u044c \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e.\n    \"\"\"\n    # \u0415\u0441\u043b\u0438 rtypes - \u044d\u0442\u043e Union, \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0438\u043f\u043e\u0432.\n    # \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430.\n    rtypes = rtypes.__args__ if isinstance(rtypes, UnionType) else [rtypes]\n\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0448\u0438\u0431\u043e\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c.\n    # \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u0438\u043f\u044b \u0438\u0437 Union \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.\n    skip_error = len(rtypes) - 1\n\n    for rtype in rtypes:\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        origin = get_origin(rtype)\n        many = origin is list\n        if many:\n            # \u0415\u0441\u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0442\u0438\u043f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430\n            rtype = get_args(rtype)[0]\n\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f Pydantic \u043c\u043e\u0434\u0435\u043b\u044c\u044e\n        if isinstance(rtype, type) and issubclass(rtype, BaseModel):\n            try:\n                if many:\n                    # \u0415\u0441\u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c parse_obj \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443\n                    return [rtype.model_validate(d) for d in data]\n                else:\n                    # \u0415\u0441\u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c parse_obj \u043a\u043e \u0432\u0441\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u043c\n                    return rtype.model_validate(data)\n            except ValidationError as e:\n                # \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u0435\u0451 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c\n                if skip_error:\n                    # \u0415\u0441\u043b\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u043c \u0446\u0438\u043a\u043b\n                    skip_error -= 1\n                else:\n                    # \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f, \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\n                    raise e\n        # \u0415\u0441\u043e\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0441\u0445\u0435\u043c\u0430, \u0442\u043e \u043d\u0435 \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432\n        else:\n            break\n\n    # \u0415\u0441\u043b\u0438 \u043d\u0438 \u043e\u0434\u043d\u0430 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c \u0438\u043b\u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u0430\u0441\u044c, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    return data\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.integration.wraper_endpoint","title":"<code>wraper_endpoint(self_endpoint, func, url, version, httpmethod, *args, **kwargs)</code>  <code>async</code>","text":"<p>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439</p> \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 <p>\u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u0430 \u0432\u043e \u0432\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0443 patch_integration</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>async def wraper_endpoint(\n    self_endpoint: EndpointsDeclaration,\n    func: Callable,\n    url: ParseResult,\n    version: str,\n    httpmethod: HTTPMethod,\n    *args,\n    **kwargs,\n) -&gt; R:\n    \"\"\"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439\n\n    \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n        \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u0430 \u0432\u043e \u0432\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f,\n        \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b.\n        \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0443 patch_integration\n    \"\"\"\n\n    async with httpx.AsyncClient() as client:\n        response = await func(\n            ApiHTTP(self_endpoint.credentials, url, version, httpmethod.name, client),\n            *args,\n            **kwargs,\n        )\n    return response\n</code></pre>"},{"location":"code_docs/#fastapi_acceleratortestutils","title":"fastapi_accelerator.testutils","text":"<p>\u041f\u0430\u043a\u0435\u0442 \u0441 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0444\u0438\u043a\u0441\u0442\u0443\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043f\u0440\u043e\u0449\u0430\u044e\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 FastAPi \u043f\u0440\u043e\u0435\u043a\u0442\u0435</p>"},{"location":"code_docs/#fastapi_accelerator.testutils.ApiHTTP","title":"<code>ApiHTTP</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Stores API connection details and client.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class ApiHTTP(NamedTuple):\n    \"\"\"Stores API connection details and client.\"\"\"\n\n    credentials: dict | None  # Authentication credentials\n    url: ParseResult  # Parsed URL of the API endpoint\n    version: str  # API version\n    httpmethod: str  # Use HTTP method\n    client: httpx.AsyncClient | None  # HTTP client for making requests (None in tests)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BaseAuthJWT","title":"<code>BaseAuthJWT</code>","text":"<p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>class AuthJWT(BaseAuthJWT):\n    async def check_auth(username: str, password: str) -&gt; bool:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.\"\"\"\n        return username == \"admin\" and password == \"admin\"\n\n    async def add_jwt_body(username: str) -&gt; dict:\n        \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"\"\"\n        return {\"version\": username.title()}\n\n\n# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\nAuthJWT.mount_auth(app)\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0449\u0438\u0442\u044b API \u043c\u0435\u0442\u043e\u0434\u0430:</p> <pre><code>@app.get(\"/cheack_protected\", summary=\"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\")\nasync def protected_route(jwt: dict = Depends(jwt_auth)):\n    return {\"message\": \"This is a protected route\", \"user\": jwt}\n</code></pre> Source code in <code>fastapi_accelerator/auth_jwt.py</code> <pre><code>class BaseAuthJWT:\n    '''\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n\n    ```python\n    class AuthJWT(BaseAuthJWT):\n        async def check_auth(username: str, password: str) -&gt; bool:\n            \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.\"\"\"\n            return username == \"admin\" and password == \"admin\"\n\n        async def add_jwt_body(username: str) -&gt; dict:\n            \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"\"\"\n            return {\"version\": username.title()}\n\n\n    # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\n    AuthJWT.mount_auth(app)\n    ```\n\n    \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u0449\u0438\u0442\u044b API \u043c\u0435\u0442\u043e\u0434\u0430:\n\n    ```python\n    @app.get(\"/cheack_protected\", summary=\"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\")\n    async def protected_route(jwt: dict = Depends(jwt_auth)):\n        return {\"message\": \"This is a protected route\", \"user\": jwt}\n    ```\n    '''\n\n    ALGORITHM = \"HS256\"\n    ACCESS_TOKEN_EXPIRE_MINUTES = 30\n    # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432 mount_auth\n    secret_key = None\n\n    @abc.abstractmethod\n    async def check_auth(username: str, password: str) -&gt; bool:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.\"\"\"\n        raise NotImplementedError()\n\n    @abc.abstractmethod\n    async def add_jwt_body(username: str) -&gt; dict:\n        \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"\"\"\n\n    @classmethod\n    def mount_auth(cls, app: FastAPI):\n        \"\"\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e JWT\"\"\"\n        # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\n        app.state.auth_jwt = cls\n        cls.secret_key = app.state.SECRET_KEY\n\n        @app.post(\"/token\", summary=\"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e JWT\", tags=[\"common\"])\n        async def login(\n            user: Annotated[OAuth2PasswordRequestForm, Depends()],\n        ) -&gt; Token:\n            if await cls.check_auth(user.username, user.password):\n                return Token(\n                    access_token=cls._create_access_token(\n                        data={\n                            \"sub\": user.username,\n                            **await cls.add_jwt_body(user.username),\n                        },\n                    ),\n                    token_type=\"bearer\",\n                )\n            else:\n                raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n\n        @app.get(\n            \"/check_protected\",\n            summary=\"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\",\n            tags=[\"common\"],\n        )\n        async def protected_route(request: Request, jwt: dict = Depends(jwt_auth)):\n            return {\"message\": \"This is a protected route\", \"user\": jwt}\n\n        return login, protected_route\n\n    @classmethod\n    def _create_access_token(\n        cls,\n        data: dict,\n        expires_delta: Union[timedelta, None] = None,\n    ) -&gt; str:\n        \"\"\"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 JWT \u0442\u043e\u043a\u0435\u043d\u0430\"\"\"\n        to_encode = data.copy()\n        if expires_delta:\n            expire = datetime.utcnow() + expires_delta\n        else:\n            expire = datetime.utcnow() + timedelta(\n                minutes=cls.ACCESS_TOKEN_EXPIRE_MINUTES\n            )\n        to_encode.update({\"exp\": expire})\n        encoded_jwt = jwt.encode(to_encode, cls.secret_key, algorithm=cls.ALGORITHM)\n        return encoded_jwt\n\n    @classmethod\n    def _verify_token(cls, token: str) -&gt; Optional[dict]:\n        \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u0438 JWT \u0442\u043e\u043a\u0435\u043d\u0430\"\"\"\n        try:\n            payload = jwt.decode(token, cls.secret_key, algorithms=[cls.ALGORITHM])\n            return payload\n        except jwt.ExpiredSignatureError:\n            return None\n        except jwt.InvalidTokenError:\n            return None\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BaseAuthJWT.add_jwt_body","title":"<code>add_jwt_body(username)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p> Source code in <code>fastapi_accelerator/auth_jwt.py</code> <pre><code>@abc.abstractmethod\nasync def add_jwt_body(username: str) -&gt; dict:\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JWT \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BaseAuthJWT.check_auth","title":"<code>check_auth(username, password)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.</p> Source code in <code>fastapi_accelerator/auth_jwt.py</code> <pre><code>@abc.abstractmethod\nasync def check_auth(username: str, password: str) -&gt; bool:\n    \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u043f\u0430\u0440\u043e\u043b\u044f.\"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BaseAuthJWT.mount_auth","title":"<code>mount_auth(app)</code>  <code>classmethod</code>","text":"<p>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e JWT</p> Source code in <code>fastapi_accelerator/auth_jwt.py</code> <pre><code>@classmethod\ndef mount_auth(cls, app: FastAPI):\n    \"\"\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e JWT\"\"\"\n    # \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\n    app.state.auth_jwt = cls\n    cls.secret_key = app.state.SECRET_KEY\n\n    @app.post(\"/token\", summary=\"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e JWT\", tags=[\"common\"])\n    async def login(\n        user: Annotated[OAuth2PasswordRequestForm, Depends()],\n    ) -&gt; Token:\n        if await cls.check_auth(user.username, user.password):\n            return Token(\n                access_token=cls._create_access_token(\n                    data={\n                        \"sub\": user.username,\n                        **await cls.add_jwt_body(user.username),\n                    },\n                ),\n                token_type=\"bearer\",\n            )\n        else:\n            raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n\n    @app.get(\n        \"/check_protected\",\n        summary=\"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\",\n        tags=[\"common\"],\n    )\n    async def protected_route(request: Request, jwt: dict = Depends(jwt_auth)):\n        return {\"message\": \"This is a protected route\", \"user\": jwt}\n\n    return login, protected_route\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BaseAuthJwtPytest","title":"<code>BaseAuthJwtPytest</code>","text":"<p>               Bases: <code>BasePytest</code></p> <p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c pytest, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e JWT</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>class BaseAuthJwtPytest(BasePytest):\n    \"\"\"\n    \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c pytest,\n    \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e JWT\n    \"\"\"\n\n    @pytest.fixture(autouse=True)\n    def setup_method(self, client):\n        @client_auth_jwt()\n        def inner(self, client):\n            return super().setup_method()\n\n        return inner(self, client=client)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BasePytest","title":"<code>BasePytest</code>","text":"<p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c pytest.</p> <p>\u0414\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432. \u041d\u0430\u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u0439\u0442\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435:</p> <pre><code>class Test\u0418\u043c\u044f\u041a\u043b\u0430\u0441\u0441\u0430(BasePytest):\n\n    def setUp(self):\n        ...\n\n    def test_\u043c\u0435\u0442\u043e\u0434_1(self):\n        ...\n</code></pre> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>class BasePytest:\n    \"\"\"\n    \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c pytest.\n\n    \u0414\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432.\n    \u041d\u0430\u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u0439\u0442\u0435 \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435:\n\n    ```python\n    class Test\u0418\u043c\u044f\u041a\u043b\u0430\u0441\u0441\u0430(BasePytest):\n\n        def setUp(self):\n            ...\n\n        def test_\u043c\u0435\u0442\u043e\u0434_1(self):\n            ...\n    ```\n    \"\"\"\n\n    # \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    TEST_USER = {\"username\": \"test\", \"password\": \"qwerty\"}\n\n    def setup_method(self, method=None):\n        \"\"\"\n        \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430.\n\n        \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 setUp(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n        \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u0441\u0442\u0430\u043c\u0438.\n\n        :param method: \u041c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f (\u0442\u0435\u0441\u0442).\n        \"\"\"\n        self.setUp()\n\n    def setUp(self):\n        \"\"\"\n        \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u0442\u0435\u0441\u0442\u043e\u043c.\n\n        \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439\n        \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432.\n        \"\"\"\n\n    def teardown_method(self, method=None):\n        \"\"\"\n        \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430.\n\n        \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 tearDown(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n        \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432.\n\n        :param method: \u041c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d (\u0442\u0435\u0441\u0442).\n        \"\"\"\n        self.tearDown()\n\n    def tearDown(self):\n        \"\"\"\n        \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430.\n\n        \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439\n        \u043e\u0447\u0438\u0441\u0442\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432.\n        \"\"\"\n\n    @classmethod\n    def setup_class(cls):\n        \"\"\"\n        \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n\n        \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 setUpClass(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n        \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0432\u0441\u0435\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n        \"\"\"\n        cls.setUpClass()\n\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"\n        \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0432\u0441\u0435\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n\n        \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439\n        \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n        \"\"\"\n\n    @classmethod\n    def teardown_class(cls):\n        \"\"\"\n        \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n\n        \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439\n        \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n        \"\"\"\n        cls.tearDownClass()\n\n    @classmethod\n    def tearDownClass(cls):\n        \"\"\"\n        \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n\n        \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439\n        \u043e\u0447\u0438\u0441\u0442\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n        \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BasePytest.setUp","title":"<code>setUp()</code>","text":"<p>\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u0442\u0435\u0441\u0442\u043e\u043c.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432.</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>def setUp(self):\n    \"\"\"\n    \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u0442\u0435\u0441\u0442\u043e\u043c.\n\n    \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439\n    \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432.\n    \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BasePytest.setUpClass","title":"<code>setUpClass()</code>  <code>classmethod</code>","text":"<p>\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0432\u0441\u0435\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>@classmethod\ndef setUpClass(cls):\n    \"\"\"\n    \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0432\u0441\u0435\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n\n    \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439\n    \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n    \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BasePytest.setup_class","title":"<code>setup_class()</code>  <code>classmethod</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 setUpClass(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0432\u0441\u0435\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>@classmethod\ndef setup_class(cls):\n    \"\"\"\n    \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n\n    \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 setUpClass(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n    \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0432\u0441\u0435\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n    \"\"\"\n    cls.setUpClass()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BasePytest.setup_method","title":"<code>setup_method(method=None)</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 setUp(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u0441\u0442\u0430\u043c\u0438.</p> <p>:param method: \u041c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f (\u0442\u0435\u0441\u0442).</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>def setup_method(self, method=None):\n    \"\"\"\n    \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430.\n\n    \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 setUp(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n    \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u0441\u0442\u0430\u043c\u0438.\n\n    :param method: \u041c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f (\u0442\u0435\u0441\u0442).\n    \"\"\"\n    self.setUp()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BasePytest.tearDown","title":"<code>tearDown()</code>","text":"<p>\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432.</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>def tearDown(self):\n    \"\"\"\n    \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430.\n\n    \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439\n    \u043e\u0447\u0438\u0441\u0442\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432.\n    \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BasePytest.tearDownClass","title":"<code>tearDownClass()</code>  <code>classmethod</code>","text":"<p>\u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>@classmethod\ndef tearDownClass(cls):\n    \"\"\"\n    \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n\n    \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439\n    \u043e\u0447\u0438\u0441\u0442\u043a\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n    \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BasePytest.teardown_class","title":"<code>teardown_class()</code>  <code>classmethod</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>@classmethod\ndef teardown_class(cls):\n    \"\"\"\n    \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n\n    \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439\n    \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435.\n    \"\"\"\n    cls.tearDownClass()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.BasePytest.teardown_method","title":"<code>teardown_method(method=None)</code>","text":"<p>\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430.</p> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 tearDown(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432.</p> <p>:param method: \u041c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d (\u0442\u0435\u0441\u0442).</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>def teardown_method(self, method=None):\n    \"\"\"\n    \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430.\n\n    \u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 tearDown(), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 \u0434\u043e\u0447\u0435\u0440\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435\n    \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432.\n\n    :param method: \u041c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d (\u0442\u0435\u0441\u0442).\n    \"\"\"\n    self.tearDown()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.EndpointsDeclaration","title":"<code>EndpointsDeclaration</code>","text":"<p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 API.</p> <p>\u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 API, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e URL.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class EndpointsDeclaration:\n    \"\"\"\n    \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 API.\n\n    \u042d\u0442\u043e\u0442 \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 API,\n    \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e URL.\n    \"\"\"\n\n    integration: IntegrationHTTP | None = None\n\n    def __init__(self, base_url: URL = \"\", credentials: dict | None = None):\n        \"\"\"\n        \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n            base_url (URL): \u0411\u0430\u0437\u043e\u0432\u044b\u0439 URL \u0434\u043b\u044f API. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u043c\u044f \u0438\u043b\u0438 \u0430\u0434\u0440\u0435\u0441 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 host:port.\n            credentials (dict | None): \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435.\n\n        \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n            \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c base_url \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439\n            \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 production-\u0441\u0440\u0435\u0434\u0435) \u0438\u0437-\u0437\u0430 \u043c\u0435\u0436\u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u044d\u043a\u0440\u0430\u043d\u043e\u0432 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432.\n        \"\"\"\n        self.base_url = base_url\n        self.credentials = credentials\n\n    class Schema:\n        \"\"\"\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\n        \u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0436\u0438\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u0430\u0445 \u043e\u0442 REST API.\n        \"\"\"\n\n    class SchemaError:\n        \"\"\"\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\n        \u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u044b\n        \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 REST API.\n        \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.EndpointsDeclaration.Schema","title":"<code>Schema</code>","text":"<p>\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.</p> <p>\u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0436\u0438\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u0430\u0445 \u043e\u0442 REST API.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class Schema:\n    \"\"\"\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\n    \u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0436\u0438\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u0430\u0445 \u043e\u0442 REST API.\n    \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.EndpointsDeclaration.SchemaError","title":"<code>SchemaError</code>","text":"<p>\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.</p> <p>\u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u044b \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 REST API.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class SchemaError:\n    \"\"\"\u0421\u0445\u0435\u043c\u0430 Pydantic \u0434\u043b\u044f \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\n    \u042d\u0442\u0430 \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u044b\n    \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 REST API.\n    \"\"\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.EndpointsDeclaration.__init__","title":"<code>__init__(base_url='', credentials=None)</code>","text":"\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b <p>base_url (URL): \u0411\u0430\u0437\u043e\u0432\u044b\u0439 URL \u0434\u043b\u044f API. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u043c\u044f \u0438\u043b\u0438 \u0430\u0434\u0440\u0435\u0441 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 host:port. credentials (dict | None): \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435.</p> \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c base_url \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 production-\u0441\u0440\u0435\u0434\u0435) \u0438\u0437-\u0437\u0430 \u043c\u0435\u0436\u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u044d\u043a\u0440\u0430\u043d\u043e\u0432 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432.</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>def __init__(self, base_url: URL = \"\", credentials: dict | None = None):\n    \"\"\"\n    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n        base_url (URL): \u0411\u0430\u0437\u043e\u0432\u044b\u0439 URL \u0434\u043b\u044f API. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u043c\u044f \u0438\u043b\u0438 \u0430\u0434\u0440\u0435\u0441 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 host:port.\n        credentials (dict | None): \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435.\n\n    \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n        \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c base_url \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439\n        \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0443\u0440\u043e\u0432\u043d\u044f\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430 production-\u0441\u0440\u0435\u0434\u0435) \u0438\u0437-\u0437\u0430 \u043c\u0435\u0436\u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u044d\u043a\u0440\u0430\u043d\u043e\u0432 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432.\n    \"\"\"\n    self.base_url = base_url\n    self.credentials = credentials\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.HTTPMethod","title":"<code>HTTPMethod</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 HTTP \u043c\u0435\u0442\u043e\u0434\u044b</p> Source code in <code>fastapi_accelerator/integration/http_integration.py</code> <pre><code>class HTTPMethod(str, Enum):\n    \"\"\"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 HTTP \u043c\u0435\u0442\u043e\u0434\u044b\"\"\"\n\n    get = \"GET\"\n    post = \"POST\"\n    put = \"PUT\"\n    patch = \"PATCH\"\n    delete = \"DELETE\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.MockRules","title":"<code>MockRules</code>","text":"Source code in <code>fastapi_accelerator/testutils/fixture_integration.py</code> <pre><code>class MockRules:\n    def __init__(self, mock_rules: dict[Callable, Callable]) -&gt; None:\n        \"\"\"\n\n        \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n            mock_rules (dict[Callable, Callable]): \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u043c\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 mock.\n            \u0415\u0441\u043b\u0438 \u0432 \u043a\u043e\u0434\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0432 mock_rules, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.\n            \u042d\u0442\u043e \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0431\u044b\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c mock.\n\n        \"\"\"\n        self._rules = mock_rules\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.MockRules.__init__","title":"<code>__init__(mock_rules)</code>","text":"\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b <p>mock_rules (dict[Callable, Callable]): \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u043c\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 mock. \u0415\u0441\u043b\u0438 \u0432 \u043a\u043e\u0434\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0432 mock_rules, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435. \u042d\u0442\u043e \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0431\u044b\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c mock.</p> Source code in <code>fastapi_accelerator/testutils/fixture_integration.py</code> <pre><code>def __init__(self, mock_rules: dict[Callable, Callable]) -&gt; None:\n    \"\"\"\n\n    \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b:\n        mock_rules (dict[Callable, Callable]): \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u043c\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 mock.\n        \u0415\u0441\u043b\u0438 \u0432 \u043a\u043e\u0434\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0432 mock_rules, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.\n        \u042d\u0442\u043e \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0431\u044b\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c mock.\n\n    \"\"\"\n    self._rules = mock_rules\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.SQLQueryTracker","title":"<code>SQLQueryTracker</code>","text":"<p>\u0425\u0440\u0430\u043d\u0438\u0442 \u0442\u0440\u0435\u043a\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0420\u0421\u0423\u0411\u0414</p> Source code in <code>fastapi_accelerator/testutils/fixture_db/trace_sql.py</code> <pre><code>class SQLQueryTracker:\n    \"\"\"\u0425\u0440\u0430\u043d\u0438\u0442 \u0442\u0440\u0435\u043a\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0420\u0421\u0423\u0411\u0414\"\"\"\n\n    def __init__(self):\n        self.queries: list[NamedTuple] = []\n\n    def add(self, statement: str, params: tuple, executemany: bool):\n        \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SQL \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0432 \u0442\u0440\u0435\u043a\u0435\u0440\"\"\"\n        self.queries.append(TrackerNameTuple(statement, params, executemany))\n\n    @property\n    def count(self) -&gt; int:\n        return len(self.queries)\n\n    def __str__(self) -&gt; str:\n        return f\"{self.queries}\"\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.SQLQueryTracker.add","title":"<code>add(statement, params, executemany)</code>","text":"<p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SQL \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0432 \u0442\u0440\u0435\u043a\u0435\u0440</p> Source code in <code>fastapi_accelerator/testutils/fixture_db/trace_sql.py</code> <pre><code>def add(self, statement: str, params: tuple, executemany: bool):\n    \"\"\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c SQL \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0432 \u0442\u0440\u0435\u043a\u0435\u0440\"\"\"\n    self.queries.append(TrackerNameTuple(statement, params, executemany))\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.SettingTest","title":"<code>SettingTest</code>","text":"<p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 <code>app/conftest.py</code>:</p> <pre><code>from app.core.config import TEST_DATABASE_URL\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\n\n# \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u043f\u043e\u0440\u0442\u0430, \u044d\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u043c\u044b \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435\nfrom fastapi_accelerator.testutils import *  # noqa E402\nfrom fastapi_accelerator.testutils import SettingTest\n\n# \u041d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0411\u0414 \u0434\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0430 APP\n# \u0447\u0442\u043e\u0431\u044b \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043e\u0434\u0438\u043d\u043e\u0447\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 instance\n# \u0430 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0443\u0436\u0435 \u0432\u0437\u044f\u043b\u0441\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 instance\nTestDatabaseManager = MainDatabaseManager(\n    TEST_DATABASE_URL, echo=False, DEV_STATUS=True\n)\n\nfrom main import app  # noqa E402\n\n# \u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u043e\u0432\napp.state.CACHE_STATUS = False\n\nSettingTest(TestDatabaseManager, app, alembic_migrate=True, keepdb=True)\n</code></pre> Source code in <code>fastapi_accelerator/testutils/fixture_base.py</code> <pre><code>class SettingTest(metaclass=SingletonMeta):\n    \"\"\"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\n\n    \u041f\u0440\u0438\u043c\u0435\u0440 `app/conftest.py`:\n\n    ```python\n    from app.core.config import TEST_DATABASE_URL\n    from fastapi_accelerator.db.dbsession import MainDatabaseManager\n\n    # \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u043f\u043e\u0440\u0442\u0430, \u044d\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u043c\u044b \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435\n    from fastapi_accelerator.testutils import *  # noqa E402\n    from fastapi_accelerator.testutils import SettingTest\n\n    # \u041d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0411\u0414 \u0434\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0430 APP\n    # \u0447\u0442\u043e\u0431\u044b \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043e\u0434\u0438\u043d\u043e\u0447\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 instance\n    # \u0430 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0443\u0436\u0435 \u0432\u0437\u044f\u043b\u0441\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 instance\n    TestDatabaseManager = MainDatabaseManager(\n        TEST_DATABASE_URL, echo=False, DEV_STATUS=True\n    )\n\n    from main import app  # noqa E402\n\n    # \u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u043e\u0432\n    app.state.CACHE_STATUS = False\n\n    SettingTest(TestDatabaseManager, app, alembic_migrate=True, keepdb=True)\n    ```\n\n    \"\"\"\n\n    def __init__(\n        self,\n        DatabaseManager: MainDatabaseManager,\n        app: FastAPI,\n        alembic_migrate: bool = False,\n        keepdb: bool = True,\n    ) -&gt; Self:\n        \"\"\"\n        alembic_migrate:\n            \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446, \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 alembic, \u0438\u043b\u0438 \u0441\u0440\u0430\u0437\u0443 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\n            \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c alembic \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u0441\u0440\u0430\u0437\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0438 \u0438\u0445  \u0432\u043e\u0432 \u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n            - \u0415\u0441\u043b\u0438 True -&gt; \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c alembic \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438\n            - \u0415\u0441\u043b\u0438 False -&gt; \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c create_all()\n\n        keepdb:\n            - \u0415\u0441\u043b\u0438 True -&gt; \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0411\u0414 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\n            - \u0415\u0441\u043b\u0438 False -&gt; \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0411\u0414 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\n        \"\"\"\n\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u0432 \u0438\u043c\u0435\u043d\u0438 \u0411\u0414 \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 test\n        if (\n            DatabaseManager.database_url.split(\"/\")[-1].find(\"test\") == -1\n            or DatabaseManager.adatabase_url.split(\"/\")[-1].find(\"test\") == -1\n        ):\n            raise ValueError(\"\u0418\u043c\u044f \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 test\")\n\n        self.DatabaseManager = DatabaseManager\n        self.app = app\n        self.alembic_migrate = alembic_migrate\n        self.keepdb = keepdb\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.SettingTest.__init__","title":"<code>__init__(DatabaseManager, app, alembic_migrate=False, keepdb=True)</code>","text":"alembic_migrate <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446, \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 alembic, \u0438\u043b\u0438 \u0441\u0440\u0430\u0437\u0443 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0442\u0430\u0431\u043b\u0438\u0446 \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c alembic \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u0441\u0440\u0430\u0437\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0438 \u0438\u0445  \u0432\u043e\u0432 \u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f - \u0415\u0441\u043b\u0438 True -&gt; \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c alembic \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 - \u0415\u0441\u043b\u0438 False -&gt; \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c create_all()</p> keepdb <ul> <li>\u0415\u0441\u043b\u0438 True -&gt; \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0411\u0414 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432</li> <li>\u0415\u0441\u043b\u0438 False -&gt; \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0411\u0414 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432</li> </ul> Source code in <code>fastapi_accelerator/testutils/fixture_base.py</code> <pre><code>def __init__(\n    self,\n    DatabaseManager: MainDatabaseManager,\n    app: FastAPI,\n    alembic_migrate: bool = False,\n    keepdb: bool = True,\n) -&gt; Self:\n    \"\"\"\n    alembic_migrate:\n        \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446, \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 alembic, \u0438\u043b\u0438 \u0441\u0440\u0430\u0437\u0443 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\n        \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c alembic \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u0441\u0440\u0430\u0437\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0438 \u0438\u0445  \u0432\u043e\u0432 \u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n        - \u0415\u0441\u043b\u0438 True -&gt; \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c alembic \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438\n        - \u0415\u0441\u043b\u0438 False -&gt; \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c create_all()\n\n    keepdb:\n        - \u0415\u0441\u043b\u0438 True -&gt; \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0411\u0414 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\n        - \u0415\u0441\u043b\u0438 False -&gt; \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0411\u0414 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\n    \"\"\"\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u0432 \u0438\u043c\u0435\u043d\u0438 \u0411\u0414 \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 test\n    if (\n        DatabaseManager.database_url.split(\"/\")[-1].find(\"test\") == -1\n        or DatabaseManager.adatabase_url.split(\"/\")[-1].find(\"test\") == -1\n    ):\n        raise ValueError(\"\u0418\u043c\u044f \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 test\")\n\n    self.DatabaseManager = DatabaseManager\n    self.app = app\n    self.alembic_migrate = alembic_migrate\n    self.keepdb = keepdb\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.SingletonMeta","title":"<code>SingletonMeta</code>","text":"<p>               Bases: <code>type</code></p> <p>\u041c\u0435\u0442\u0430 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u041e\u0434\u0438\u043d\u043e\u0447\u043a\u0430</p> Source code in <code>fastapi_accelerator/utils.py</code> <pre><code>class SingletonMeta(type):\n    \"\"\"\u041c\u0435\u0442\u0430 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 \u041e\u0434\u0438\u043d\u043e\u0447\u043a\u0430\"\"\"\n\n    instance = None\n\n    def __call__(cls, *args, **kwargs):\n        if cls.instance is None:\n            cls.instance = super(SingletonMeta, cls).__call__(*args, **kwargs)\n        return cls.instance\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.TrackerNameTuple","title":"<code>TrackerNameTuple</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>\u0425\u0440\u0430\u043d\u0438\u0442 SQL \u043a\u043e\u043c\u0430\u043d\u0434\u0443</p> Source code in <code>fastapi_accelerator/testutils/fixture_db/trace_sql.py</code> <pre><code>class TrackerNameTuple(NamedTuple):\n    \"\"\"\u0425\u0440\u0430\u043d\u0438\u0442 SQL \u043a\u043e\u043c\u0430\u043d\u0434\u0443\"\"\"\n\n    # \u0422\u0435\u043a\u0441\u0442 SQL\n    statement: str\n    # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432 SQL\n    params: list | dict\n    executemany: bool\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.apply_fixture_db","title":"<code>apply_fixture_db(export_func, flush=False)</code>","text":"<p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b \u0432 \u0411\u0414 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u0441\u0442\u043e\u043c \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0438\u0445 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u0430.</p> <p>:param export_func: \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0430\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0411\u0414. :param flush: \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u0430, \u0435\u0441\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0432 True.     \u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b <code>client</code>,     \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0443\u0436\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043e\u0442\u0447\u0438\u0441\u0442\u043a\u0443 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 <code>common_setup_table</code></p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <p>def export_fixture_task() -&gt; NamedTuple:     return dict_to_namedtuple(         file1=FileDb(             uid=uuid.UUID(\"469d4176-98f3-48a2-8794-0e2472bc2b7e\"),             filename=\"file1.txt\",             size=100,             format=\"text/plain\",             extension=\".txt\",         )     )</p> <p>@apply_fixture_db(export_fixture_task) def test_base(client: TestClient, fixtures: NamedTuple):     response = client.get('url')     assert response.status_code == 200     assert response.json() == {\"uid\": fixtures.file1.uid}</p> Source code in <code>fastapi_accelerator/testutils/fixture_db/apply_fixture.py</code> <pre><code>def apply_fixture_db(  # noqa C901\n    export_func: Callable[[], NamedTuple], flush: bool = False\n):\n    \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b \u0432 \u0411\u0414 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u0441\u0442\u043e\u043c \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0438\u0445 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u0430.\n\n    :param export_func: \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0430\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0411\u0414.\n    :param flush: \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u0430, \u0435\u0441\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0432 True.\n        \u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b `client`,\n        \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0443\u0436\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043e\u0442\u0447\u0438\u0441\u0442\u043a\u0443 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 `common_setup_table`\n\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n\n    def export_fixture_task() -&gt; NamedTuple:\n        return dict_to_namedtuple(\n            file1=FileDb(\n                uid=uuid.UUID(\"469d4176-98f3-48a2-8794-0e2472bc2b7e\"),\n                filename=\"file1.txt\",\n                size=100,\n                format=\"text/plain\",\n                extension=\".txt\",\n            )\n        )\n\n    @apply_fixture_db(export_fixture_task)\n    def test_base(client: TestClient, fixtures: NamedTuple):\n        response = client.get('url')\n        assert response.status_code == 200\n        assert response.json() == {\"uid\": fixtures.file1.uid}\n    \"\"\"\n\n    def up(fixtures: NamedTuple) -&gt; NamedTuple:\n        # \u041d\u0430\u043a\u0430\u0442\u0438\u0442\u044c \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b\n        with SettingTest.instance.DatabaseManager.session() as session:\n            session: Session\n            try:\n                session.add_all(fixtures)\n                session.commit()\n                for item in fixtures:\n                    session.refresh(item)\n            except IntegrityError as e:\n                session.rollback()\n                raise e\n\n        return fixtures\n\n    def down(fixtures: NamedTuple):\n        if flush:\n            # \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b\n            with SettingTest.instance.DatabaseManager.session() as session:\n                session: Session\n                try:\n                    for item in fixtures:\n                        session.delete(item)\n                    session.commit()\n                except IntegrityError as e:\n                    session.rollback()\n                    raise e\n\n    def decor(func):\n        @wraps(func)\n        def wrap(*args, **kwargs):\n            fixtures = export_func()\n            try:\n                up(fixtures)\n                # \u0415\u0441\u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 fixtures\n                if \"fixtures\" in inspect.getfullargspec(func).args:\n                    # \u0442\u043e \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0435\u043c \u0435\u0433\u043e\n                    kwargs[\"fixtures\"] = fixtures\n                return func(*args, **kwargs)\n            finally:\n                down(fixtures)\n\n        return wrap\n\n    return decor\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.check_response_json","title":"<code>check_response_json(response, exp_status_code, exp_json, exclude_list=None)</code>","text":"<p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 json API \u043e\u0442\u0432\u0435\u0442\u0430</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <p>def test_get_item(self, client: TestClient):     response = client.get(self.url)     check_response_json(response, 200, {...})</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>def check_response_json(\n    response: Response,\n    exp_status_code: int,\n    exp_json: Any,\n    exclude_list: Optional[list[str]] = None,\n) -&gt; bool:\n    \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 json API \u043e\u0442\u0432\u0435\u0442\u0430\n\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n\n    def test_get_item(self, client: TestClient):\n        response = client.get(self.url)\n        check_response_json(response, 200, {...})\n    \"\"\"\n    assert response.status_code == exp_status_code\n    response_json = response.json()\n    if exclude_list:\n        rm_key_from_deep_dict(response_json, exclude_list)\n    assert response_json == exp_json\n    return True\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.client","title":"<code>client(common_client, common_clean_table)</code>","text":"<p>\u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 FastAPI.</p> Source code in <code>fastapi_accelerator/testutils/fixture_db/db.py</code> <pre><code>@pytest.fixture(scope=\"function\")\ndef client(\n    common_client: TestClient, common_clean_table\n) -&gt; Generator[TestClient, Any, None]:\n    \"\"\"\u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 FastAPI.\"\"\"\n    yield common_client\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.client_auth_jwt","title":"<code>client_auth_jwt(username=None)</code>","text":"<p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e JWT.</p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:</p> <p>@client_auth_jwt(username=\"test\"}) def test_get_list(client: TestClient):     response = client.get(self.url)     assert response.status_code == 200     assert response.json() == []</p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435:</p> <p>class TestTaskExecution(BasePytest):</p> <pre><code>@client_auth_jwt() # \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u0432\u043e\u0437\u044c\u043c\u0443\u0442\u0441\u044f \u0438\u0437 self.TEST_USER\ndef test_get_list(self, client: TestClient):\n    response = client.get(self.url)\n    assert response.status_code == 200\n    assert response.json() == []\n</code></pre> Source code in <code>fastapi_accelerator/testutils/fixture_auth.py</code> <pre><code>def client_auth_jwt(username: str = None):\n    \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e JWT.\n\n    \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:\n\n    @client_auth_jwt(username=\"test\"})\n    def test_get_list(client: TestClient):\n        response = client.get(self.url)\n        assert response.status_code == 200\n        assert response.json() == []\n\n    \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435:\n\n    class TestTaskExecution(BasePytest):\n\n        @client_auth_jwt() # \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u0432\u043e\u0437\u044c\u043c\u0443\u0442\u0441\u044f \u0438\u0437 self.TEST_USER\n        def test_get_list(self, client: TestClient):\n            response = client.get(self.url)\n            assert response.status_code == 200\n            assert response.json() == []\n\n    \"\"\"\n    auth_jwt: BaseAuthJWT | None = SettingTest.instance.app.state.auth_jwt\n\n    if not auth_jwt:\n        raise ValueError(\"No found state - auth_jwt.\")\n\n    def decor(func):\n\n        @wraps(func)\n        def wrap(*args, **kwargs):\n            # username \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0435,\n            # \u0438\u043d\u0430\u0447\u0435 \u043e\u043d \u0432\u043e\u0437\u044c\u043c\u0435\u0442\u0441\u044f \u0438\u0437 self.TEST_USER \u043a\u043b\u0430\u0441\u0441\u0430\n            # \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0431\u0432\u044f\u043b\u0435\u043d \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043c\u0435\u0442\u043e\u0434\n            current_username = username or args[0].TEST_USER[\"username\"]\n            access_token: str = auth_jwt._create_access_token(\n                data={\n                    \"sub\": current_username,\n                    **run_async(auth_jwt.add_jwt_body(current_username)),\n                },\n            )\n            kwargs[\"client\"].headers[\"authorization\"] = f\"Bearer {access_token}\"\n            return func(*args, **kwargs)\n\n        return wrap\n\n    return decor\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.common_clean_table","title":"<code>common_clean_table(common_setup_database)</code>","text":"<p>\u041e\u0442\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430.</p> Source code in <code>fastapi_accelerator/testutils/fixture_db/db.py</code> <pre><code>@pytest.fixture(scope=\"function\")\ndef common_clean_table(common_setup_database) -&gt; Generator:\n    \"\"\"\u041e\u0442\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430.\"\"\"\n    try:\n        yield\n    finally:\n        # \u041e\u0442\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445\n        SettingTest.instance.DatabaseManager.clear_all([\"alembic_version\"])\n        # \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 dispose()\n        run_async(SettingTest.instance.DatabaseManager.dispose())\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.common_client","title":"<code>common_client()</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 FastAPI.</p> Source code in <code>fastapi_accelerator/testutils/fixture_db/db.py</code> <pre><code>@pytest.fixture(scope=\"session\")\ndef common_client() -&gt; Generator[TestClient, None, None]:\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 FastAPI.\"\"\"\n\n    with TestClient(SettingTest.instance.app) as test_client:\n        yield test_client\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.common_setup_database","title":"<code>common_setup_database(engine)</code>","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0438 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u043d\u0430 \u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432.</p> Source code in <code>fastapi_accelerator/testutils/fixture_db/db.py</code> <pre><code>@pytest.fixture(scope=\"session\")\ndef common_setup_database(engine) -&gt; Generator[None, None, None]:\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0438 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u043d\u0430 \u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432.\"\"\"\n    # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0411\u0414\n    if not database_exists(engine.url):\n        create_database(engine.url)\n\n    if SettingTest.instance.alembic_migrate:\n        # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c alembic \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446 \u0447\u0435\u0440\u0435\u0437 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438\n        from alembic import command\n        from alembic.config import Config\n\n        alembic_cfg = Config(\"alembic.ini\")\n        alembic_cfg.set_main_option(\n            \"sqlalchemy.url\", SettingTest.instance.DatabaseManager.database_url\n        )\n        command.upgrade(alembic_cfg, \"head\")\n    else:\n        # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\n        SettingTest.instance.DatabaseManager.create_all()\n    try:\n        yield\n    finally:\n        if not SettingTest.instance.keepdb:\n            # \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\n            SettingTest.instance.DatabaseManager.drop_all()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.db_session","title":"<code>db_session()</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e \u043a \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0411\u0414</p> Source code in <code>fastapi_accelerator/testutils/fixture_db/db.py</code> <pre><code>@pytest.fixture(scope=\"function\")\ndef db_session() -&gt; Generator[Session, Any, None]:\n    \"\"\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e \u043a \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0411\u0414\"\"\"\n    for session in SettingTest.instance.DatabaseManager.get_session():\n        yield session\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.fixtures","title":"<code>fixtures()</code>","text":"<p>\u041f\u0443\u0441\u0442\u0430\u044f \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0430 \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0431\u0443\u0434\u0435\u0442 \u0432\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 apply_fixture_db</p> Source code in <code>fastapi_accelerator/testutils/fixture_db/apply_fixture.py</code> <pre><code>@pytest.fixture(scope=\"session\")\ndef fixtures():\n    \"\"\"\u041f\u0443\u0441\u0442\u0430\u044f \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0430 \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0431\u0443\u0434\u0435\u0442 \u0432\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 apply_fixture_db\"\"\"\n    yield NotImplementedError()\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.patch_integration","title":"<code>patch_integration(mock_rules)</code>","text":"<p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0434\u043c\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 mock.</p> \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u044c mock_rules \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439/\u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.</p> Source code in <code>fastapi_accelerator/testutils/fixture_integration.py</code> <pre><code>def patch_integration(mock_rules: MockRules):\n    \"\"\"\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043f\u043e\u0434\u043c\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 mock.\n\n    \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n        \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u044c mock_rules \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438\n        \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439/\u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n    \"\"\"\n\n    def decor(func):\n        @wraps(func)\n        def wrap(*args, **kwargs):\n            with patch(\n                \"fastapi_accelerator.integration.http_integration.wraper_endpoint\"\n            ) as wraper_endpoint:\n                # \u041f\u043e\u0434\u043c\u0435\u043d\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u043d\u0430 mock\n                i = _IntegrationAsyncMock(wraper_endpoint)\n                for real_func, mock_func in mock_rules._rules.items():\n                    i.overwrite_method(real_func, mock_func)\n\n                return func(*args, **kwargs)\n\n        return wrap\n\n    return decor\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.rm_key_from_deep_dict","title":"<code>rm_key_from_deep_dict(data, keys)</code>","text":"<p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043b\u044e\u0447\u0438 \u0438\u0437 dict \u0438\u043b\u0438 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e.</p> <p>data: \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0442\u0447\u0438\u0441\u0442\u043a\u0438 keys: \u041a\u043b\u044e\u0447\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <p>rm_key_from_deep_dict({\"date\": \"...\", \"user\": \"...\"}, [\"data\"])</p> <p>{\"user\": \"...\"}</p> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>def rm_key_from_deep_dict(data: dict | list, keys: list[str]):\n    \"\"\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043b\u044e\u0447\u0438 \u0438\u0437 dict \u0438\u043b\u0438 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e.\n\n    data: \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0442\u0447\u0438\u0441\u0442\u043a\u0438\n    keys: \u041a\u043b\u044e\u0447\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\n\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n\n    rm_key_from_deep_dict({\"date\": \"...\", \"user\": \"...\"}, [\"data\"])\n    &gt;&gt;&gt; {\"user\": \"...\"}\n    \"\"\"\n    if isinstance(data, dict):\n        # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043a\u043b\u044e\u0447\u0438 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n        for key in keys:\n            data.pop(key, None)  # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c pop \u0441 None, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c KeyError\n        # \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\n        for value in data.values():\n            rm_key_from_deep_dict(value, keys)\n    elif isinstance(data, list):\n        # \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043f\u0438\u0441\u043a\u0430\n        for item in data:\n            rm_key_from_deep_dict(item, keys)\n\n    return data\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.run_async","title":"<code>run_async(async_function)</code>","text":"<p>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0431\u0435\u0440\u0442\u043a\u0430 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430</p> Source code in <code>fastapi_accelerator/utils.py</code> <pre><code>def run_async(async_function):\n    \"\"\"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0431\u0435\u0440\u0442\u043a\u0430 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430\"\"\"\n    return asyncio.get_event_loop().run_until_complete(async_function)\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.track_queries","title":"<code>track_queries(db_manager, expected_count=None)</code>","text":"<p>\u041f\u0435\u0440\u0435\u0445\u0432\u0430\u0442 SQL \u043a\u043e\u043c\u0430\u043d\u0434, \u0434\u043b\u044f \u0438\u0445 \u0430\u043d\u0430\u043b\u0438\u0437\u0430</p> <p>expected_count: \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c\u0441\u044f SQL \u043a\u043e\u043c\u0430\u043d\u0434</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:</p> <p>def test_get_list(self, client: TestClient, db_manager: MainDatabaseManager):     with track_queries(db_manager, expected_count=2) as tracker:         response = client.get(self.url)</p> <pre><code>print(tracker.queries)\n</code></pre> Source code in <code>fastapi_accelerator/testutils/fixture_db/trace_sql.py</code> <pre><code>@contextmanager\ndef track_queries(\n    db_manager: MainDatabaseManager, expected_count: int = None\n) -&gt; Generator[SQLQueryTracker, None, None]:\n    \"\"\"\n    \u041f\u0435\u0440\u0435\u0445\u0432\u0430\u0442 SQL \u043a\u043e\u043c\u0430\u043d\u0434, \u0434\u043b\u044f \u0438\u0445 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n\n    expected_count: \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c\u0441\u044f SQL \u043a\u043e\u043c\u0430\u043d\u0434\n\n\n    \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:\n\n    def test_get_list(self, client: TestClient, db_manager: MainDatabaseManager):\n        with track_queries(db_manager, expected_count=2) as tracker:\n            response = client.get(self.url)\n\n        print(tracker.queries)\n    \"\"\"\n\n    tracker = SQLQueryTracker()\n\n    def _before_cursor_execute(\n        conn, cursor, statement: str, params: tuple, context, executemany: bool\n    ):\n        tracker.add(statement, params, executemany)\n\n    # \u041e\u0442\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043a\u0430\u043a \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0442\u0430\u043a \u0438 \u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c engine\n    event.listen(\n        db_manager.aengine.sync_engine, \"before_cursor_execute\", _before_cursor_execute\n    )\n    event.listen(db_manager.engine, \"before_cursor_execute\", _before_cursor_execute)\n    try:\n        # \u0422\u0440\u0435\u043a\u0435\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0435\u0441\u0442\u0430\u0445\n        yield tracker\n    finally:\n        # \u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435\n        event.remove(\n            db_manager.aengine.sync_engine,\n            \"before_cursor_execute\",\n            _before_cursor_execute,\n        )\n        event.remove(db_manager.engine, \"before_cursor_execute\", _before_cursor_execute)\n\n        if expected_count:\n            # \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e sql \u043a\u043e\u043c\u0430\u043d\u0434\n            if tracker.count != expected_count:\n                raise ValueError(\n                    f\"{tracker.queries}\\n\\n{tracker.count} != {expected_count}\"\n                )\n</code></pre>"},{"location":"code_docs/#fastapi_accelerator.testutils.url_path_for","title":"<code>url_path_for()</code>","text":"<p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 URL \u043f\u0443\u0442\u044c \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>def test_base(client: TestClient, url_path_for: Callable):\n    response = client.get(url_path_for(\"\u0418\u043c\u044f\u0424\u0443\u043d\u043a\u0446\u0438\u0438\"))\n</code></pre> Source code in <code>fastapi_accelerator/testutils/utils.py</code> <pre><code>@pytest.fixture(scope=\"function\")\ndef url_path_for() -&gt; Generator[Callable[[str], str], None, None]:\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 URL \u043f\u0443\u0442\u044c \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n\n    ```python\n    def test_base(client: TestClient, url_path_for: Callable):\n        response = client.get(url_path_for(\"\u0418\u043c\u044f\u0424\u0443\u043d\u043a\u0446\u0438\u0438\"))\n    ```\n    \"\"\"\n    yield lambda name_url: SettingTest.instance.app.url_path_for(name_url)\n</code></pre>"},{"location":"info_files/","title":"File descriptions","text":""},{"location":"info_files/#fastapi_accelerator","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0441\u043e\u0441\u0442\u0430\u0432\u0435 fastapi_accelerator","text":"<pre><code>fastapi_accelerator/\n\u2502\n\u251c\u2500\u2500 db/                         # \u041b\u043e\u0433\u0438\u043a\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0420\u0421\u0423\u0411\u0414\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 dborm.py\n\u2502   \u2514\u2500\u2500 dbsession.py\n\u2502\n\u251c\u2500\u2500 pattern/                    # \u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 pattern_fastapi.py      # \u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430 FastAPI\n\u2502   \u251c\u2500\u2500 pattern_alembic.py      # \u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f Alembic\n\u2502   \u2514\u2500\u2500 pattern_flask_admin.py  # \u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 Flask \u0430\u0434\u043c\u0438\u043d \u043f\u0430\u043d\u0435\u043b\u0438\n\u2502\n\u251c\u2500\u2500 integration/                # \u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 base_integration.py     # \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439\n\u2502   \u251c\u2500\u2500 http_integration.py     # \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043f\u043e HTTP\n\u2502   \u2514\u2500\u2500 stability_patterns.py   # \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n\u2502\n\u251c\u2500\u2500 commands/                   # CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 py2dantic               # \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0445\u0435\u043c\u044b pydantic \u0438\u0437 python dict\n\u2502\n\u251c\u2500\u2500 testutils                   # \u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f FastAPI\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 fixture_base.py         # \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\n\u2502   \u251c\u2500\u2500 fixture_db              # \u0424\u0438\u043a\u0441\u0442\u0443\u0440\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0411\u0414\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 apply_fixture.py\n\u2502   \u2502   \u251c\u2500\u2500 db.py\n\u2502   \u2502   \u2514\u2500\u2500 trace_sql.py\n\u2502   \u251c\u2500\u2500 fixture_auth.py         # \u0424\u0438\u043a\u0441\u0442\u0443\u0440\u0430 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e JWT\n\u2502   \u2514\u2500\u2500 utils.py\n\u2502\n\u251c\u2500\u2500 cache.py         # \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\u251c\u2500\u2500 auth_jwt.py      # \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e JWT\n\u251c\u2500\u2500 exception.py     # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439\n\u251c\u2500\u2500 middleware.py    # Middleware \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b\n\u251c\u2500\u2500 paginator.py     # \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438\n\u251c\u2500\u2500 timezone.py      # \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043e\u043d\u0430\u043c\u0438\n\u251c\u2500\u2500 appstate.py      # \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u044f Runtime\n\u251c\u2500\u2500 viewset.py       # \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f ViewSet\n\u251c\u2500\u2500 utils.py         # \u041e\u0431\u0449\u0438\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b\n\u251c\u2500\u2500 README.md        # \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f\n\u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"info_files/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0430\u0439\u043b\u043e\u0432","text":""},{"location":"info_files/#mainpy","title":"\u041f\u0440\u0438\u043c\u0435\u0440 <code>main.py</code>","text":"<pre><code>from contextlib import asynccontextmanager\n\nimport uvicorn\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\n\nimport app.api.v1.router as RouterV1\nfrom app.core.config import BASE_DIR_PROJECT, DEBUG, SECRET_KEY\nfrom app.core.db import DatabaseManager\nfrom app.core.security import AuthJWT\nfrom fastapi_accelerator.pattern_fastapi import base_pattern\nfrom fastapi_accelerator.timezone import moscow_tz\n\n\n@asynccontextmanager\nasync def lifespan(app):\n    \"\"\"\u0416\u0438\u0437\u043d\u0435\u043d\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u043f\u0440\u043e\u0435\u043a\u0442\u0430\"\"\"\n    yield\n\napp = FastAPI(\n    title=\"File ddos API\",\n    # \u0424\u0443\u043d\u043a\u0446\u0438\u044f lifespan\n    lifespan=lifespan,\n    # \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043a\u043e \u0432\u0441\u0435\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u043c \u0432 \u044d\u0442\u043e\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u0435.\n    dependencies=None,\n    # \u041a\u043b\u0430\u0441\u0441 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432.\n    default_response_class=ORJSONResponse,\n)\n\n# \u041f\u0430\u0442\u0442\u0435\u0440\u043d \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\nbase_pattern(\n    app,\n    routers=(RouterV1.router,),\n    timezone=moscow_tz,\n    cache_status=True,\n    debug=DEBUG,\n    base_dir=BASE_DIR_PROJECT,\n    database_manager=DatabaseManager,\n    secret_key=SECRET_KEY,\n)\n\n# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT\nAuthJWT.mount_auth(app)\n\nif __name__ == \"__main__\":\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        workers=4,\n        reload=DEBUG,\n        access_log=DEBUG,\n    )\n</code></pre> <p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c <code>python main.py</code></p>"},{"location":"info_files/#makefile","title":"\u041f\u0440\u0438\u043c\u0435\u0440 <code>Makefile</code>","text":"<pre><code>run_test:\n    pytest\n\nrun_dev_server:\n    python -m main\n\n# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044e\nmakemigrate:\n    alembic revision --autogenerate\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438\nmigrate:\n    alembic upgrade head\n</code></pre>"},{"location":"info_files/#configpy","title":"\u041f\u0440\u0438\u043c\u0435\u0440 <code>config.py</code>","text":"<p>\u0424\u0430\u0439\u043b <code>app/core/config.py</code>:</p> <pre><code>\"\"\"\n\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043d\u0430 \u043f\u0440\u043e\u0435\u043a\u0442.\n\n\u041c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0438\u0437 `.settings_local`\n\"\"\"\n\nfrom pathlib import Path\n\nfrom .settings_local import (\n    ADMIN_PASSWORD,\n    ADMIN_USERNAME,\n    CACHE_STATUS,\n    DATABASE_URL,\n    DEBUG,\n    DEV_STATUS,\n    REDIS_URL,\n    SECRET_KEY,\n    TEST_DATABASE_URL,\n)\n\n# \u041f\u0443\u0442\u044c \u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\nBASE_DIR_APP = Path(__file__).parent.parent\n# \u041f\u0443\u0442\u044c \u043a \u043a\u043e\u0440\u043d\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\nBASE_DIR_PROJECT = BASE_DIR_APP.parent\n\n__all__ = (\n    # &gt;&gt;&gt; \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c:\n    # Url \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0411\u0414\n    DATABASE_URL,\n    # Url \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0411\u0414\n    TEST_DATABASE_URL,\n    # Url \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis\n    REDIS_URL,\n    # &gt;&gt;&gt; \u0421\u0442\u0430\u0442\u0443\u0441\u044b:\n    # \u0420\u0435\u0436\u0438\u043c \u043e\u0442\u043b\u0430\u0434\u043a\u0438, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0435\u043d \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0435\n    DEBUG,\n    # \u0420\u0435\u0436\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n    DEV_STATUS,\n    # \u0412\u043a\u043b/\u0412\u044b\u043a\u043b \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n    CACHE_STATUS,\n    # &gt;&gt;&gt; \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c:\n    SECRET_KEY,\n    # \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u0432 Flask-Admin \u043f\u0430\u043d\u0435\u043b\u044c\n    ADMIN_USERNAME,\n    ADMIN_PASSWORD,\n)\n</code></pre> <p>\u0424\u0430\u0439\u043b <code>app/core/settings_local.py</code>:</p> <pre><code>import os\n\nDATABASE_URL = os.getenv(\"DATABASE_URL\", \"postgres://user_app:db@postgres_db:5432/db\")\nTEST_DATABASE_URL = \"postgres://user_app:db@postgres_db:5432/testdb\"\n\nREDIS_URL = os.getenv(\"REDIS_URL\", \"redis://redis:6379\")\nSECRET_KEY = \"your_secret_key_here\"\nDEBUG = True\nDEV_STATUS = False\nCACHE_STATUS = True\nADMIN_USERNAME = \"admin\"\nADMIN_PASSWORD = \"password\"\n</code></pre>"},{"location":"info_files/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b","text":"<pre><code>\u041f\u0440\u043e\u0435\u043a\u0442/\n\u2502\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 utils.py        # \u041f\u0435\u0440\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u2502   \u251c\u2500\u2500 core/           # \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f, \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0438 \u043e\u0431\u0449\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 settings_local.py   # \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 git, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435\n\u2502   \u2502   \u251c\u2500\u2500 config.py           # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\n\u2502   \u2502   \u251c\u2500\u2500 security.py         # \u041b\u043e\u0433\u0438\u043a\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u2502   \u2502   \u251c\u2500\u2500 db.py               # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445.\n\u2502   \u2502   \u251c\u2500\u2500 cache.py            # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\u2502   \u2502   \u251c\u2500\u2500 useintegration.py   # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435\n\u2502   \u2502   \u2514\u2500\u2500 dependencies.py     # \u041e\u0431\u0449\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 api/                    # \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 API \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u0432\u0435\u0440\u0441\u0438\u044f\u043c.\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 v1/\n\u2502   \u2502       \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u251c\u2500\u2500 router.py       # \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 api\n\u2502   \u2502       \u2502\n\u2502   \u2502       \u251c\u2500\u2500 static/         # \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u0441\u0442\u0430\u0442\u0438\u043a\u0438, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043d\u0443\u0436\u043d\u044b\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 js\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 css\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 img\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 html\n\u2502   \u2502       \u2502\n\u2502   \u2502       \u251c\u2500\u2500 logic/          # \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u0438\u0437\u043d\u0435\u0441 \u043b\u043e\u0433\u0438\u043a\u0443\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 users.py\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 items.py\n\u2502   \u2502       \u2502\n\u2502   \u2502       \u251c\u2500\u2500 schemas/        # Pydantic \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 user.py\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 item.py\n\u2502   \u2502       \u2502\n\u2502   \u2502       \u251c\u2500\u2500 crud/           # \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 (Create, Read, Update, Delete).\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 user.py\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 item.py\n\u2502   \u2502       \u2502\n\u2502   \u2502       \u2514\u2500\u2500 tests/          # \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432.\n\u2502   \u2502           \u251c\u2500\u2500 __init__.py\n\u2502   \u2502           \u251c\u2500\u2500 test_users.py\n\u2502   \u2502           \u2514\u2500\u2500 test_items.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 models/         # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, SQLAlchemy \u043c\u043e\u0434\u0435\u043b\u0438).\n\u2502   \u2502    \u251c\u2500\u2500 __init__.py\n\u2502   \u2502    \u251c\u2500\u2500 user.py\n\u2502   \u2502    \u2514\u2500\u2500 item.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 integration/            # \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438\n\u2502   \u2502    \u251c\u2500\u2500 __init__.py\n\u2502   \u2502    \u2514\u2500\u2500 google_translate/  # \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 Google \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0447\u0438\u043a(\u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a\u0430\u043a git submodule)\n\u2502   \u2502        \u251c\u2500\u2500 __init__.py\n\u2502   \u2502        \u251c\u2500\u2500 schema.py      # \u0421\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0445\u0435\u043c\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n\u2502   \u2502        \u2514\u2500\u2500 view.py        # \u0421\u0434\u0435\u0440\u0436\u0438\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 fixture/          # \u0425\u0440\u0430\u043d\u0438\u0442 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 items_v1.py   # \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u043b\u044f \u0411\u0414\n\u2502       \u2514\u2500\u2500 utils.py      # \u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\n\u2502\n\u251c\u2500\u2500 fastapi_accelerator/         # Submodule \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\n\u2502\n\u251c\u2500\u2500 alembic/                # \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0434\u043b\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445.\n\u2502   \u251c\u2500\u2500 versions/           # \u041f\u0430\u043f\u043a\u0430 \u0441 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 0001_init.py    # \u0424\u0430\u0439\u043b \u0441 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0435\u0439\n\u2502   \u2514\u2500\u2500 env.py              # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f alembic\n\u2502\n\u251c\u2500 conf/                            # \u0424\u0430\u0439\u043b\u044b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f prod\n\u2502   \u251c\u2500\u2500 settings_local.example.py   # \u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f settings_local.py\n\u2502   \u2514\u2500\u2500 Dockerfile                  # \u0424\u0430\u0439\u043b \u0434\u043b\u044f prod\n\u2502\n\u251c\u2500\u2500 pytest.ini          # \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u043b\u044f pytest\n\u251c\u2500\u2500 conftest.py         # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\n\u2502\n\u251c\u2500\u2500 .gitignore          # \u041a\u0430\u043a\u0438\u0435 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438 \u0432 git\n\u251c\u2500\u2500 .gitlab-ci.yml      # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 CI pipeline\n\u2502\n\u251c\u2500\u2500 pyproject.toml      # \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 Poetry\n\u2502\n\u251c\u2500\u2500 Makefile            # \u041f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 bash \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n\u2502\n\u251c\u2500\u2500 README.md           # \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u251c\u2500\u2500 CHANGELOG.md        # \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435\n\u251c\u2500\u2500 version.toml        # \u0412\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u2502\n\u251c\u2500\u2500 alembic.ini         # \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f alembic\n\u2502\n\u251c\u2500\u2500 DockerfileDev       # \u0424\u0430\u0439\u043b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f dev \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0441 APP\n\u251c\u2500\u2500 docker-compose.yml  # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 dev \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n\u2502\n\u251c\u2500\u2500 admin_panel.py      # \u0410\u0434\u043c\u0438\u043d \u043f\u0430\u043d\u0435\u043b\u044c\n\u2502\n\u2514\u2500\u2500 main.py             # \u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0433\u0434\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 FastAPI.\n</code></pre>"},{"location":"plan/","title":"Plan","text":""},{"location":"plan/#_1","title":"\u041f\u043b\u0430\u043d\u044b \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f","text":"<p>\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f:</p> <ul> <li> \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c CLI \u0443\u0442\u0438\u043b\u0438\u0442\u0443 \u0432\u043c\u0435\u0441\u0442\u043e Makefile</li> <li> \u0417\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u043a\u043e\u0434\u0430 \u0442\u0435\u0441\u0442\u0430\u043c\u0438</li> </ul> <p>\u0418\u0434\u0435\u0438:</p> <ul> <li> \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0448\u0430\u0431\u043b\u043e\u043d\u0438\u0437\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> <li> \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438(\u043f\u0440\u043e\u0448\u043b\u044b\u043c\u0438) \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438 FastAPI \u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a</li> <li> \u0417\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u043a\u043e\u0434\u0430 \u0442\u0435\u0441\u0442\u0430\u043c\u0438</li> <li> \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438</li> <li> \u041f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0433\u0440\u0443\u0437\u043e\u0447\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043a\u0438 \u043a\u043e\u0434\u0430</li> <li> \u041f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f</li> <li> \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 <code>WebSocket</code></li> <li> \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f</li> </ul> <p>\u0421\u0434\u0435\u043b\u0430\u043d\u043e:</p> <ul> <li> \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 API.</li> </ul>"},{"location":"test_logic/","title":"Testing logic","text":""},{"location":"test_logic/#_1","title":"\u0417\u0430\u0447\u0435\u043c \u0438 \u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b","text":"<p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: REST API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0435\u0433\u043e \u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0421\u0423\u0411\u0414 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON.</p> <p>\u042d\u0442\u043e \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u043a \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u043c\u0443 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044d\u043c\u0443\u043b\u0438\u0440\u0443\u0435\u0442 \u0440\u0443\u0447\u043d\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 API \u043c\u0435\u0442\u043e\u0434\u043e\u0432. \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API \u2013 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0441\u0442\u0430\u0440\u0442. \u042d\u0442\u0438 \u0442\u0435\u0441\u0442\u044b \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442 \u0440\u0443\u0447\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u043e \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f POST-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 <code>Django</code> \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c, \u043e\u0434\u043d\u0430\u043a\u043e \u0432 <code>FastAPI</code> \u044d\u0442\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b API \u043d\u0430 <code>FastAPI</code> \u0442\u0430\u043a \u0436\u0435 \u0443\u0434\u043e\u0431\u043d\u043e \u0438 \u0431\u044b\u0441\u0442\u0440\u043e, \u043a\u0430\u043a \u0438 \u0432 <code>Django</code>.</p>"},{"location":"test_logic/#_2","title":"\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430</li> </ol> <pre><code>poetry add pytest pytest-asyncio httpx\n</code></pre> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b <code>app/pytest.ini</code></li> </ol> <pre><code>[pytest]\n; \u0414\u043e\u043f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0443\naddopts = -v -l -x -s --lf --disable-warnings\n\n; \u041c\u0430\u0441\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438\npython_files = tests.py test_*.py *_tests.py\n\n; \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043b\u043e\u0433\u0438 (logs) \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0442\u0435\u0441\u0442\u043e\u0432.\nlog_cli = true\n</code></pre> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b <code>app/conftest.py</code></li> </ol> <pre><code>from app.core.config import TEST_DATABASE_URL\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\n\n# \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u043f\u043e\u0440\u0442\u0430, \u044d\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u043c\u044b \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435\nfrom fastapi_accelerator.testutils import *  # noqa E402\n\n# \u041d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0411\u0414 \u0434\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0430 APP\n# \u0447\u0442\u043e\u0431\u044b \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043e\u0434\u0438\u043d\u043e\u0447\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 instance\n# \u0438 \u0432 APP \u0443\u0436\u0435 \u0432\u0437\u044f\u043b\u0441\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 instance\nTestDatabaseManager = MainDatabaseManager(\n    TEST_DATABASE_URL, echo=False, DEV_STATUS=True\n)\n\nfrom main import app  # noqa E402\n\n# \u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u043e\u0432\napp.state.CACHE_STATUS = False\n\nSettingTest(TestDatabaseManager, app, alembic_migrate=True, keepdb=True) # noqa F405\n</code></pre>"},{"location":"test_logic/#_3","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0414\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432, \u0438\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b:</p> <ul> <li> <p>\u0424\u0438\u043a\u0441\u0442\u0443\u0440\u044b:</p> <ul> <li><code>client</code> - \u041a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 API \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432</li> <li><code>test_app</code> - \u0422\u0435\u0441\u0442\u043e\u0432\u043e\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435</li> <li><code>url_path_for</code> - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 URL \u043f\u0443\u0442\u044c, \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430</li> <li><code>engine</code> - \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044c</li> <li><code>aengine</code> - \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044c</li> <li><code>db_session</code> - \u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0411\u0414</li> <li><code>db_manager</code> - \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0411\u0414</li> </ul> </li> <li> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u0438:</p> <ul> <li><code>check_response_json</code> - \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u043b\u044f API \u043e\u0442\u0432\u0435\u0442\u0430</li> <li><code>rm_key_from_deep_dict</code> - \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043b\u044e\u0447\u0438 \u0443 API \u043e\u0442\u0432\u0435\u0442\u0430</li> </ul> </li> <li> <p>\u041a\u043b\u0430\u0441\u0441\u044b:</p> <ul> <li><code>BasePytest</code> - \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 \u043a\u043b\u0430\u0441\u0441\u044b</li> <li><code>BaseAuthJwtPytest</code> - \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e JWT(<code>@client_auth_jwt</code>) \u0434\u043b\u044f <code>BasePytest</code></li> </ul> </li> <li> <p>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440:</p> <ul> <li><code>track_queries</code> - \u041f\u0435\u0440\u0435\u0445\u0432\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 SQL \u043a\u043e\u043c\u0430\u043d\u0434, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430, \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437 - \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430.</li> </ul> </li> <li> <p>\u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b:</p> <ul> <li><code>@apply_fixture_db(\u0424\u0443\u043d\u043a\u0446\u0438\u044f\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0430\u044f\u0424\u0438\u043a\u0441\u0442\u0443\u0440\u044b)</code> - \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b \u0432 \u0411\u0414 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u0441\u0442\u043e\u043c \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0438\u0445 \u043f\u043e\u0441\u043b\u0435 \u0442\u0435\u0441\u0442\u0430.</li> <li><code>@client_auth_jwt()</code> - \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e JWT.</li> <li><code>@patch_integration(\u041f\u0440\u0430\u0432\u0438\u043b\u0430\u041f\u043e\u0434\u043c\u0435\u043d\u044b)</code> - \u0414\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u043d\u0430 Mock \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</li> </ul> </li> </ul>"},{"location":"test_logic/#_4","title":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u0440\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"test_logic/#fixture-client","title":"Fixture - <code>client</code>","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 API \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> <p>\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0440\u0430\u0431\u043e\u0442\u044b \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b <code>client</code>:</p> <ul> <li> <p>\u042d\u0442\u0430\u043f\u044b \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435\u0439 \u0432\u0441\u0435\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0441\u0441\u0438\u0438:</p> <ol> <li>(before) \u0421\u043e\u0437\u0434\u0430\u0441\u0442\u0441\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0411\u0414 \u0435\u0441\u043b\u0438 \u0435\u0451 \u043d\u0435\u0442;</li> <li> <p>(before) \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 <code>SettingTest.alembic_migrate</code>;</p> <ul> <li>\u0415\u0441\u043b\u0438 <code>True</code> -&gt; \u0421\u043e\u0437\u0434\u0430\u0441\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0447\u0435\u0440\u0435\u0437 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 <code>alembic</code></li> <li>\u0415\u0441\u043b\u0438 <code>False</code> -&gt; \u0421\u043e\u0437\u0434\u0430\u0441\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0447\u0435\u0440\u0435\u0437 <code>create_all()</code></li> </ul> </li> <li> <p>(after) \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 <code>SettingTest.keepdb</code>;</p> <ul> <li>\u0415\u0441\u043b\u0438 <code>True</code> -&gt; \u041d\u0438\u0447\u0435\u0433\u043e</li> <li>\u0415\u0441\u043b\u0438 <code>False</code> -&gt; \u0423\u0434\u0430\u043b\u044f\u0442\u044c\u0441\u044f \u0432\u0441\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0411\u0414</li> </ul> </li> </ol> </li> <li> <p>\u042d\u0442\u0430\u043f\u044b \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0438/\u043c\u0435\u0442\u043e\u0434\u0430:</p> <ol> <li>\u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e/\u043c\u0435\u0442\u043e\u0434\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 <code>client: TestClient</code>;</li> <li>(after) \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0445\u043e\u0434\u0430 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438/\u043c\u0435\u0442\u043e\u0434\u0430, \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e \u0432\u0441\u0435\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445 \u043e\u0442\u0447\u0438\u0449\u0430\u044e\u0442\u0441\u044f(\u043a\u0440\u043e\u043c\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b <code>alembic_version</code>, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u0430\u043c\u0443 \u0411\u0414 \u043c\u044b \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u043c);</li> </ol> </li> </ul> <pre><code>from fastapi.testclient import TestClient\n\ndef test_\u0438\u043c\u044f(client: TestClient):\n    response = client.get('url')\n</code></pre>"},{"location":"test_logic/#decorator-client_auth_jwt","title":"Decorator - <code>@client_auth_jwt</code>","text":"<p>\u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u043d\u0430\u043c \u0447\u0430\u0441\u0442\u043e \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c API \u043c\u0435\u0442\u043e\u0434\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e. \u0414\u0435\u043b\u0430\u0442\u044c \u043e\u0431\u0445\u043e\u0434 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \u043f\u043b\u043e\u0445\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0443\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0438\u043b\u0438 \u043b\u043e\u0433\u0438\u043a\u0443 API \u043c\u0435\u0442\u043e\u0434\u0430 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u0432\u044f\u0437\u0430\u043d\u0430 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0447\u0442\u043e\u0431\u044b \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@client_auth_jwt</code> \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438/\u043c\u0435\u0442\u043e\u0434\u0430</p> <ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_auth import client_auth_jwt\n\n@client_auth_jwt(username='test')\ndef test_\u0438\u043c\u044f(client: TestClient):\n    print(client.headers['authorization']) # 'Bearer ...'\n</code></pre> <ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 <code>BasePytest</code>:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_base import BasePytest\nfrom fastapi_accelerator.testutils.fixture_auth import client_auth_jwt\n\nclass Test\u0418\u043c\u044f\u041a\u043b\u0430\u0441\u0441\u0430(BasePytest):\n\n    @client_auth_jwt()\n    def test_\u0438\u043c\u044f(self, client: TestClient):\n        print(client.headers['authorization']) # 'Bearer ...'\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@client_auth_jwt</code> \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 <code>BasePytest</code>, \u0442\u043e \u043e\u043d \u0432\u043e\u0437\u044c\u043c\u0435\u0442 <code>username</code> \u0438\u0437 <code>self.TEST_USER['username']</code>, \u044d\u0442\u043e\u0442 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u0443\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432 <code>BasePytest</code> \u0438 \u0440\u0430\u0432\u0435\u043d \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>test</code>.</p>"},{"location":"test_logic/#decorator-apply_fixture_db","title":"Decorator - <code>@apply_fixture_db</code>","text":"<p>\u0418\u0434\u0435\u044f \u0432\u0437\u044f\u0442\u0430 \u0438\u0437 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f <code>Django</code>, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0435 <code>fixtures</code> \u0441\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432, \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f. \u042d\u0442\u043e\u0442 \u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041d\u043e \u044f \u0440\u0435\u0448\u0438\u043b \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b \u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 <code>JSON</code> \u0430 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 <code>SqlAlchemy</code>. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>JSON</code> \u043b\u0443\u0447\u0448\u0435 \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u0442\u044c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b, \u043d\u043e \u0442\u0430\u043a\u043e\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0434\u043a\u043e, \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b \u0434\u043b\u044f backend \u0442\u0435\u0441\u0442\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 backend, \u0438 \u0433\u043e\u0440\u0430\u0437\u0434\u0430 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0438 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0411\u0414, \u0447\u0435\u043c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>JSON</code>. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0431\u0440\u0430\u043d \u0444\u043e\u0440\u043c\u0430\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</p> <p>\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 <code>@apply_fixture_db</code>:</p> <ol> <li>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>export_func</code>;</li> <li>\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0411\u0414;</li> <li>\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u0415\u0441\u043b\u0438 \u043e\u043d\u0430 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 <code>fixtures</code>, \u0442\u043e \u0432 \u043d\u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0434\u0443\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 <code>export_func</code>;</li> <li>\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 \u0411\u0414:<ul> <li>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0443 <code>client</code>, \u0442\u043e \u043e\u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0442\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445, \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.</li> <li>\u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0443 <code>client</code>, \u0442\u043e \u0434\u043b\u044f \u043e\u0442\u0447\u0438\u0441\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 <code>flush=True</code></li> </ul> </li> </ol> <ul> <li>\u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 <code>app.fixture.items_v1.py</code>:</li> </ul> <pre><code>from fastapi_accelerator.utils import to_namedtuple\nfrom app.models.timemeasurement import Task, TaskExecution, TaskUser\n\ndef export_fixture_task():\n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0437\u0430\u0434\u0430\u0447\n    user1 = TaskUser(id=0, name=\"Alice\")\n    user2 = TaskUser(id=1, name=\"Bob\")\n\n    task1 = Task(id=9, name=\"Admins\")\n    task2 = Task(id=8, name=\"Users\")\n\n    # \u0421\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438\n    user1.tasks.append(task1)\n    user2.tasks.append(task1)\n    user2.tasks.append(task2)\n\n    # \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0439 \u043a\u0430\u0440\u0442\u0435\u0436\n    return to_namedtuple(\n        user1=user1,\n        user2=user2,\n        task1=task1,\n        task2=task2,\n        task_execution1=TaskExecution(\n            id=91,\n            task=task1,\n            start_time=\"2024-09-06T10:55:43\",\n            end_time=\"2024-09-06T10:59:43\",\n        ),\n    )\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445:</li> </ul> <pre><code>from fastapi_accelerator.test_utils import apply_fixture_db\nfrom app.fixture.items_v1 import export_fixture_task\n\n@apply_fixture_db(export_fixture_task)\ndef test_\u0438\u043c\u044f(client: TestClient):\n    response = client.get('url')\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u0430\u0445, \u0432 \u044d\u0442\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435 \u0432\u044b \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f <code>setUp</code>, \u0442\u043e\u0433\u0434\u0430 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_base import BasePytest\nfrom fastapi_accelerator.test_utils import apply_fixture_db\nfrom app.fixture.items_v1 import export_fixture_task\n\nclass Test\u0418\u043c\u044f\u041a\u043b\u0430\u0441\u0441\u0430(BasePytest):\n\n    @apply_fixture_db(export_fixture_task)\n    def setUp(self, fixtures: NamedTuple):\n        self.fixtures = fixtures\n\n    def test_\u0438\u043c\u044f(self, client: TestClient):\n        response = client.get('url')\n        print(self.fixtures)\n</code></pre>"},{"location":"test_logic/#decorator-patch_integration","title":"Decorator - <code>@patch_integration</code>","text":"<p>\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 API</p> <p>\u0421\u0430\u043c\u044b\u043c \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 API, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0437\u0431\u0435\u0433\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u044d\u0442\u0438\u043c API. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0434\u043b\u044f \u0438\u043c\u0438\u0442\u0430\u0446\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e API. \u0425\u043e\u0442\u044f \u043d\u0430\u0448\u0430 \u0438\u043c\u0438\u0442\u0430\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0442\u0440\u0430\u0436\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 API, \u044d\u0442\u043e \u0432\u0441\u0435 \u0436\u0435 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e.</p> <p>\u0412 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u0447\u0430\u0441\u0442\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0432\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u043a\u0438 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439, \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u043f\u0443\u0442\u0430\u043d\u0438\u0446\u0435 \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044e \u0435\u0434\u0438\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u0430\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043e\u0448\u0438\u0431\u043e\u043a, \u043a\u043e\u0433\u0434\u0430 \u043c\u043e\u043a \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 API.</p> <p>\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u044b \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 <code>EndpointsDeclaration</code> \u0441 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c <code>@integration.endpoint</code>, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0435\u0434\u0438\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0432\u0445\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u0430 <code>FastAPI</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438:</p> <ul> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a FastAPI:</li> </ul> <pre><code>@router.get(\"/translate\")\nasync def translate_api(\n    text: str, from_lang: str = \"en\", to_lang: str = \"ru\"\n) -&gt; GoogleTranslateEndpoints.Schema.TranslateV2:\n    # \u0412\u044b\u0437\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    return await gtapi.translate(text, from_lang, to_lang)\n</code></pre> <ul> <li><code>test_\u0438\u043c\u044f.py</code> \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 <code>google</code> \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0447\u0438\u043a:</li> </ul> <pre><code>from fastapi_accelerator.testutils.fixture_integration import patch_integration\nfrom app.integration.google_translate.mock import google_translate_mock_rules\n\n# \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e\u0434\u043c\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 mock.\n# \u0415\u0441\u043b\u0438 \u0432 \u043a\u043e\u0434\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0432 mock_rules, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.\n# \u042d\u0442\u043e \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0431\u044b\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c mock.\n@patch_integration(mock_rules=google_translate_mock_rules)\ndef test_integration_google_translate(client: TestClient, url_path_for: Callable):\n    # \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n    response = client.get(\n        url_path_for(\"translate_api\"),\n        params=dict(text=\"Hello\", from_lang=\"en\", to_lang=\"ru\"),\n    )\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430\n    assert response.json() == {\"text\": \"\u041f\u0440\u0438\u0432\u0435\u0442\"}\n</code></pre> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f <code>mock_rules</code> \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043a\u0443\u0434\u0430 \u0443\u0433\u043e\u0434\u043d\u043e, \u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438 \u0431\u0440\u0430\u0442\u044c \u0438\u0437 <code>app/integration/\u041f\u0430\u043a\u0435\u0442\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438/mock.py</code></p> <ul> <li>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043f\u043e\u0434\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0430\u043a\u0435\u0442\u0435 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432 <code>app/integration/\u041f\u0430\u043a\u0435\u0442\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438/mock.py</code>, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0430\u043a\u0435\u0442\u0430 \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0437 <code>mock.py</code>, \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u0441\u0432\u043e\u0438 \u0438\u043c\u0438\u0442\u0430\u0446\u0438\u0438.</li> </ul> <pre><code>from app.integration.google_translate.endpoint import GoogleTranslateEndpoints\nfrom fastapi_accelerator.integration.http_integration import ApiHTTP\nfrom fastapi_accelerator.testutils.fixture_integration import MockRules\n\n\nasync def overwrite_translate(api: ApiHTTP, *args, **kwargs):\n    # \u0423\u0434\u043e\u0431\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u043c\u0438\u0442\u0430\u0446\u0438\u0438, \u043a\u043e\u0433\u0434\u0430 \u0447\u0435\u0440\u0435\u0437 match \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442.\n    match args:\n        case (\"hello\", \"en\", \"ru\"):\n            return {\"text\": \"\u041f\u0440\u0438\u0432\u0435\u0442\"}\n    return None\n\n\n# \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0437\u0430\u043c\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 mock\ngoogle_translate_mock_rules = MockRules(\n    # \u0420\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438: \u0437\u0430\u043c\u0435\u043d\u0430 \u043d\u0430 mock \u0444\u0443\u043d\u043a\u0446\u0438\u044e\n    {GoogleTranslateEndpoints.translate: overwrite_translate}\n)\n</code></pre> <p>\u041a \u043c\u043e\u043a-\u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0442\u0435 \u0436\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u043e\u0442\u0432\u0435\u0442\u0430, \u0447\u0442\u043e \u0438 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043c\u0435\u0442\u043e\u0434\u0443 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.</p>"},{"location":"test_logic/#context-manager-track_queries","title":"Context manager - <code>track_queries</code>","text":"<p>\u0418\u0434\u0435\u044f \u0432\u0437\u044f\u0442\u0430 \u0438\u0437 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f <code>Django</code> \u043c\u0435\u0442\u043e\u0434\u0430 <code>self.assertNumQueries</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0432\u0430\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 SQL \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435. \u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u043a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f ORM, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437 \u0437\u0430 \u043d\u0435\u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0442\u043d\u0438 SQL \u043a\u043e\u043c\u0430\u043d\u0434. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043b\u0443\u0447\u0448\u0435 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e API \u043c\u0435\u0442\u043e\u0434\u0430 \u043e\u0442\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 SQL \u043a\u043e\u043c\u0430\u043d\u0434.</p> <ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 <code>track_queries</code>:</li> </ul> <pre><code>from fastapi_accelerator.testutils.fixture_db.trace_sql import track_queries\n\ndef test_\u0438\u043c\u044f(client: TestClient, db_manager: MainDatabaseManager):\n    with track_queries(db_manager, expected_count=3):\n        response = client.get('url')\n</code></pre> <ul> <li>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 SQL \u043a\u043e\u043c\u0430\u043d\u0434 \u0438\u0437 <code>tracker.queries</code>:</li> </ul> <pre><code>from fastapi_accelerator.testutils.fixture_db.trace_sql import track_queries\n\ndef test_\u0438\u043c\u044f(client: TestClient, db_manager: MainDatabaseManager):\n    with track_queries(db_manager) as tracker:\n        response = client.get('url')\n\n    # \u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 SQL \u043a\u043e\u043c\u0430\u043d\u0434\n    assert tracker.count == 3, tracker.queries\n</code></pre>"},{"location":"test_logic/#func-check_response_json","title":"Func - <code>check_response_json</code>","text":"<p>\u041f\u043e \u043e\u043f\u044b\u0442\u0443 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432, \u043c\u043e\u0433\u0443 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432 API JSON.</p> <ol> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043e\u0442\u0432\u0435\u0442\u0430</li> <li>\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON</li> <li>\u0415\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e, \u0442\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043b\u044e\u0447\u0438 \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0430\u0442\u0443 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0434\u0430\u0442\u0443 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438. \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>rm_key_from_deep_dict</code></li> <li>\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u043c</li> </ol> <p>\u042d\u0442\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>check_response_json</code></p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>def test_\u0438\u043c\u044f(client: TestClient):\n    response = client.post('url', json={...})\n    check_response_json(\n        response,\n        200,\n        {\n            \"page\": 1,\n            \"size\": 10,\n            \"count\": 1,\n            \"items\": [\n                {\n                    \"end_time\": \"2024-09-06T10:59:43\",\n                    \"start_time\": \"2024-09-06T10:55:43\",\n                    \"task\": {\n                        \"description\": None,\n                        \"name\": \"Admins\",\n                    },\n                }\n            ],\n        },\n        exclude_list=['id','task_id']\n    )\n</code></pre>"},{"location":"test_logic/#_5","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u043a\u043b\u0430\u0441\u0441\u044b","text":""},{"location":"test_logic/#basepytest","title":"\u041a\u043b\u0430\u0441\u0441 <code>BasePytest</code>","text":"<p>\u0423\u0434\u043e\u0431\u043d\u0435\u0435 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u0435\u0435, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 \u043e\u0434\u043d\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435, \u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 <code>setUp</code> \u043e\u0431\u0449\u0443\u044e \u0434\u043b\u044f \u043d\u0438\u0445 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043e\u0431\u0449\u0438\u0439 url, \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0411\u0414, \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0445\u0440\u0430\u043d\u044f\u0449\u0438\u0445 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 JSON \u043e\u0442\u0432\u0435\u0442.</p> <ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 <code>BasePytest</code>:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_base import BasePytest\n\nclass Test\u0418\u043c\u044f\u041a\u043b\u0430\u0441\u0441\u0430(BasePytest):\n\n    def setUp(self):\n        # \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u0442\u0435\u0441\u0442\u043e\u043c.\n        ...\n\n    def test_\u0438\u043c\u044f(self, client: TestClient):\n        ...\n</code></pre> <ul> <li>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u044b \u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u0430\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0439 \u043f\u043e JWT:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_base import BasePytest\nfrom fastapi_accelerator.testutils.fixture_auth import client_auth_jwt\n\nclass Test\u0418\u043c\u044f\u041a\u043b\u0430\u0441\u0441\u0430(BasePytest):\n\n    def setUp(self):\n        # \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u0442\u0435\u0441\u0442\u043e\u043c.\n        ...\n\n    @client_auth_jwt()\n    def test_\u0438\u043c\u044f(self, client: TestClient):\n        print(client.headers['authorization']) # 'Bearer ...'\n        ...\n</code></pre>"},{"location":"test_logic/#baseauthjwtpytest","title":"\u041a\u043b\u0430\u0441\u0441 <code>BaseAuthJwtPytest</code>","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435, \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 <code>@client_auth_jwt</code> \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043e\u0442 <code>BaseAuthJwtPytest</code>, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u044d\u0442\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u0443\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430.</p> <ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0435 <code>BaseAuthJwtPytest</code>:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_base import BaseAuthJwtPytest\n\nclass Test\u0418\u043c\u044f\u041a\u043b\u0430\u0441\u0441\u0430(BaseAuthJwtPytest):\n\n    def setUp(self):\n        # \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u0442\u0435\u0441\u0442\u043e\u043c.\n        ...\n\n    def test_\u0438\u043c\u044f(self, client: TestClient):\n        print(client.headers['authorization']) # 'Bearer ...'\n        ...\n</code></pre>"},{"location":"test_logic/#_6","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0442\u0435\u0441\u0442\u043e\u0432","text":""},{"location":"test_logic/#_7","title":"\u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","text":"<p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 REST API \u043c\u0435\u0442\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0420\u0421\u0423\u0411\u0414, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>JSON</code>:</p> <pre><code>from typing import Callable, NamedTuple\n\nfrom fastapi.testclient import TestClient\n\nfrom app.fixture.items_v1 import export_fixture_file\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\nfrom fastapi_accelerator.testutils import apply_fixture_db, client_auth_jwt, track_queries, check_response_json\n\n# \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n@client_auth_jwt(username=\"test\")\n# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0430\u043c\u0438\n@apply_fixture_db(export_fixture_file)\ndef test_\u0438\u043c\u044f(\n    client: TestClient,  # \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f API \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n    url_path_for: Callable,  # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f url \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\n    db_manager: MainDatabaseManager,  # \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0411\u0414\n    fixtures: NamedTuple,  # \u0425\u0440\u0430\u043d\u0438\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\n):\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 SQL \u043a\u043e\u043c\u0430\u043d\u0434\n    with track_queries(db_manager, expected_count=3):\n        # \u0417\u0430\u043f\u0440\u043e\u0441 \u0432 API\n        response = client.get(url_path_for(\"\u0418\u043c\u044f\u0424\u0443\u043d\u043a\u0446\u0438\u0438\"))\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 JSON API \u043e\u0442\u0432\u0435\u0442\u0430\n    check_response_json(\n        response,\n        200,\n        {\n            \"id\": fixtures.\u0418\u043c\u044f.id,\n        },\n    )\n    # TODO \u041c\u043e\u0436\u043d\u043e \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 POST, UPDATE, DELETE \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0411\u0414.\n    ...\n</code></pre>"},{"location":"test_logic/#_8","title":"\u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441","text":"<p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 REST API \u043c\u0435\u0442\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0420\u0421\u0423\u0411\u0414, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>JSON</code>:</p> <pre><code>from typing import Callable, NamedTuple\n\nfrom fastapi.testclient import TestClient\n\nfrom app.fixture.items_v1 import export_fixture_file\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\nfrom fastapi_accelerator.testutils import apply_fixture_db\nfrom fastapi_accelerator.testutils.fixture_auth import client_auth_jwt\nfrom fastapi_accelerator.testutils.fixture_db.trace_sql import track_queries\nfrom fastapi_accelerator.testutils.utils import BaseAuthJwtPytest, check_response_json\n\nBASE_URL_V1 = \"/api/v1/\"\n\nclass Test\u0418\u043c\u044f(BaseAuthJwtPytest):\n\n    # \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\u0430\u043c\u0438\n    @apply_fixture_db(export_fixture_file)\n    def setUp(self, fixtures: NamedTuple):\n        self.url = BASE_URL_V1 + \"taskexecution\"\n        self.fixtures = fixtures # \u0425\u0440\u0430\u043d\u0438\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0438\u043a\u0441\u0442\u0443\u0440\n\n    def test_\u0438\u043c\u044f(self, client: TestClient, db_manager: MainDatabaseManager):\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 SQL \u043a\u043e\u043c\u0430\u043d\u0434\n        with track_queries(db_manager, expected_count=3):\n            # \u0417\u0430\u043f\u0440\u043e\u0441 \u0432 API\n            response = client.get(self.url)\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 JSON API \u043e\u0442\u0432\u0435\u0442\u0430\n        check_response_json(\n            response,\n            200,\n            {\n                \"id\": self.fixtures.\u0418\u043c\u044f.id,\n            },\n        )\n        # TODO \u041c\u043e\u0436\u043d\u043e \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 POST, UPDATE, DELETE \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0411\u0414.\n        ...\n</code></pre>"},{"location":"en/#accelerating-development-with-fastapi-powerful-toolkit-for-creating-and-testing-apis","title":"Accelerating Development with FastAPI: Powerful Toolkit for Creating and Testing APIs","text":"<p>In the world of modern web development, FastAPI has established itself as a powerful and fast framework for creating APIs. However, when working on large projects, developers often face the need to optimize routine processes, improve code structure, and simplify testing. In this article, we will look at a set of tools that will help solve these problems and significantly speed up development with FastAPI.</p> <p>While attending numerous interviews, I noticed that many companies actively using FastAPI have developed their own libraries, but there are practically no similar tools with open access and free licenses. As an experienced Python and Django backend developer, I decided to adapt and integrate the most useful and in-demand solutions for developing REST APIs in FastAPI, based on my experience working with Django.</p> <p>Short-term goal: gather feedback from the community about this idea. Long-term goal: improve the tool in open source, encouraging large companies to abandon the development and support of their own proprietary code. Instead, we aim to create an ecosystem where companies not only use common tools but also actively participate in their improvement, contributing to the open-source project.</p> <ul> <li>https://github.com/denisxab/fastapi_accelerator</li> <li>https://pypi.org/project/fastapi_accelerator</li> </ul>"},{"location":"en/#who-will-find-this-useful","title":"Who will find this useful?","text":"<ul> <li>Python backend developers using or planning to use FastAPI</li> <li>Teams working on medium and large projects with FastAPI</li> <li>Developers who want to improve the structure of their FastAPI projects and speed up the development process</li> <li>Those looking for effective tools for testing FastAPI applications</li> </ul>"},{"location":"en/#why-is-this-toolkit-needed","title":"Why is this toolkit needed?","text":"<p>FastAPI Accelerator is an open-source toolkit created based on best practices for REST API development. The main goal of the presented toolkit is to accelerate and simplify the development of projects on FastAPI. This is achieved by:</p> <ol> <li>Detailed and good documentation.</li> <li>Providing reusable code for typical tasks.</li> <li>Implementing a universal manager for working with RDBMS.</li> <li>Implementing ViewSet for quickly creating views with basic business logic.</li> <li>Integrating JWT authentication.</li> <li>Simplifying writing and executing integration tests for APIs.</li> <li>Optimizing work with Alembic for managing migrations in production and test environments.</li> <li>Standardizing architecture for HTTP integrations.</li> </ol> <p>All these components are interconnected and complement each other, automating routine tasks.</p>"},{"location":"en/#tool-structure","title":"Tool Structure","text":"<p>Let's look at the main components of our toolkit:</p> <pre><code>fastapi_accelerator/\n\u251c\u2500\u2500 db/ # Logic for interacting with RDBMS\n\u251c\u2500\u2500 pattern/ # Templates for projects\n\u251c\u2500\u2500 testutils/ # Utilities for testing FastAPI\n\u251c\u2500\u2500 integration/ # Utilities for integrations with external systems\n\u251c\u2500\u2500 commands/ # CLI commands\n\u251c\u2500\u2500 cache.py # Caching implementation\n\u251c\u2500\u2500 auth_jwt.py # JWT authentication\n\u251c\u2500\u2500 exception.py # Exception handling\n\u251c\u2500\u2500 middleware.py # Middleware components\n\u251c\u2500\u2500 paginator.py # Pagination implementation\n\u251c\u2500\u2500 timezone.py # Working with time zones\n\u251c\u2500\u2500 viewset.py # ViewSet implementation\n\u2514\u2500\u2500 utils.py # General utilities\n</code></pre>"},{"location":"en/#connecting-to-fastapi","title":"Connecting to FastAPI","text":"<p>File <code>main.py</code>:</p> <pre><code>from fastapi import FastAPI\nfrom fastapi_accelerator.pattern.pattern_fastapi import base_pattern\nfrom app.core.config import BASE_DIR_PROJECT, DEBUG, SECRET_KEY\nfrom fastapi_accelerator.timezone import moscow_tz\nfrom app.core.db import DatabaseManager\nfrom app.core.security import AuthJWT\nimport app.api.v1.router as RouterV1\n\napp = FastAPI()\n\n# Pattern for the project\nbase_pattern(\n    app,\n    routers=(RouterV1.router,),\n    timezone=moscow_tz,\n    cache_status=True,\n    debug=DEBUG,\n    base_dir=BASE_DIR_PROJECT,\n    database_manager=DatabaseManager,\n    secret_key=SECRET_KEY,\n    # Connect JWT authentication\n    AuthJWT.mount_auth(app)\n)\n</code></pre>"},{"location":"en/#main-components","title":"Main Components","text":""},{"location":"en/#base-pattern","title":"Base Pattern","text":"<p>The <code>base_pattern</code> function adds many useful functions to <code>app</code>, including:</p> <ul> <li>Filling <code>state</code> and other information in <code>app</code>.</li> <li>Resolving <code>CORS</code>.</li> <li>Connecting routers with <code>ViewSet</code> support.</li> <li>Adding a <code>healthcheck</code> method.</li> <li><code>Middleware</code> for debugging API request execution time.</li> <li>Detailed output for <code>HTTP</code> exceptions.</li> </ul>"},{"location":"en/#databasemanager","title":"DatabaseManager","text":"<p><code>DatabaseManager</code> is a universal tool for working with RDBMS, providing both synchronous and asynchronous (names starting with <code>a</code>) methods. <code>DatabaseManager</code> uses the singleton pattern, so it can be easily substituted in tests.</p> <p>Usage example:</p> <pre><code>from app.core.config import DATABASE_URL, DEBUG, DEV_STATUS\nfrom fastapi_accelerator.dbsession import MainDatabaseManager\n\nDatabaseManager = MainDatabaseManager(DATABASE_URL, echo=DEBUG, DEV_STATUS=DEV_STATUS)\n</code></pre> <ul> <li> <p>General characteristics</p> <ul> <li><code>DEV_STATUS</code> - Development mode indicator. When <code>DEV_STATUS=False</code>, it blocks the execution of critical operations (<code>create_all</code>, <code>drop_all</code>, <code>clear_all</code>). This is a safety measure for the production environment.</li> </ul> </li> <li> <p>Synchronous components</p> <ul> <li><code>database_url</code> - Address for connecting to the synchronous database.</li> <li><code>engine</code> - Mechanism for synchronous interaction with the database.</li> <li><code>session</code> - Generator of synchronous sessions.</li> <li><code>Base</code> - Base class for data models.</li> <li>Functionality:<ul> <li><code>get_session</code> - DB session injector.</li> <li><code>get_session_transaction</code> - DB session injector with transaction support.</li> <li><code>create_all</code> - Initialization of all tables in the database.</li> <li><code>drop_all</code> - Deletion of the entire database structure.</li> <li><code>clear_all</code> - Clearing the contents of tables. The <code>exclude_tables_name</code> parameter allows excluding certain tables from the clearing process.</li> </ul> </li> </ul> </li> <li> <p>Asynchronous components</p> <ul> <li><code>adatabase_url</code> - Address for connecting to the asynchronous database.</li> <li><code>aengine</code> - Asynchronous mechanism for working with the database, including connection pool.</li> <li><code>asession</code> - Generator of asynchronous sessions.</li> <li>Functionality:<ul> <li><code>aget_session</code> - Asynchronous DB session injector.</li> <li><code>aget_session_transaction</code> - Asynchronous DB session injector with transaction support.</li> </ul> </li> </ul> </li> </ul>"},{"location":"en/#ormasync","title":"OrmAsync","text":"<p>This class optimizes asynchronous interaction with the database:</p> <ul> <li><code>get</code> - Retrieving an object based on given criteria.</li> <li><code>get_list</code> - Getting a set of objects by query. (With the possibility of deep selection)</li> <li><code>update</code> - Modifying objects according to the query.</li> <li><code>delete</code> - Deleting objects based on given parameters.</li> <li><code>get_item</code> - Retrieving an object by primary key. (With the possibility of deep selection)</li> <li><code>create_item</code> - Creating a new object. (With the possibility of cascade creation)</li> <li><code>update_item</code> - Updating an object by primary key. (With the possibility of cascade update)</li> <li><code>delete_item</code> - Deleting an object by primary key. (With the possibility of cascade deletion)</li> </ul> <p>Deep selection/cascade operations - the ability to work with related data. Activated by the <code>deep=True</code> parameter Examples:</p> <ul> <li>get_list, get_item - Return objects with all related data, ready for use in Pydantic</li> <li>create_item - Creates records in related tables</li> <li>update_item - Updates data in related tables</li> <li>delete_item - Deletes records from related tables</li> </ul>"},{"location":"en/#viewset","title":"ViewSet","text":"<p>ViewSet allows quickly creating CRUD operations for models. Here's an example of usage:</p> <pre><code>from fastapi_accelerator.viewset import AppOrm, FullViewSet\nfrom fastapi import APIRouter, Depends, Query\nfrom app.api.v1.schemas.timemeasurement import TaskExecution\nfrom app.models.timemeasurement import TaskExecution as TaskExecutionDb\n\nrouter = APIRouter(prefix=\"/api/v1\")\n\nclass FileViewSet(FullViewSet):\n    \"\"\"\n    View for working with files\n    \"\"\"\n    # DB Model\n    db_model = TaskExecutionDb\n    # Schema Model\n    pydantic_model = TaskExecution\n\n    '''\n    # Caching\n    cache_class = redis_client\n    cache_ttl = timedelta(minutes=10)\n\n    # Pagination\n    paginator_class = DefaultPaginator\n\n    # Enable support for nested pydantic schemas\n    # this means that recursive creation, updating, deletion of related records will occur\n    deep_schema = True\n\n    # Enable protection through JWT\n    dependencies = [Depends(jwt_auth)]\n\n    # You can also override methods:\n    async def db_update(\n        self, item_id: str | int | UUID, item: type[BaseModel], aorm: OrmAsync\n    ) -&gt; object:\n        \"\"\"Overriding the db_update method\"\"\"\n        return await super().db_update(item_id, item, aorm)\n\n    def list(self):\n        \"\"\"Overriding the list method\"\"\"\n        @self.router.get(f\"{self.prefix}\", tags=self.tags)\n        async def get_list_items(\n            skip: int = Query(0),\n            limit: int = Query(100),\n            aorm: OrmAsync = Depends(AppOrm.aget_orm),\n        ) -&gt; List[self.pydantic_model]:\n            return await aorm.get_list(\n                select(self.db_model).offset(skip).limit(limit),\n                deep=self.deep_schema,\n                db_model=self.db_model,\n            )\n        return get_list_items\n    '''\n\nrouter.views = [\n    FileViewSet().as_view(router, prefix=\"/file\"),\n]\n</code></pre>"},{"location":"en/#jwt-authentication","title":"JWT Authentication","text":"<p>We use JWT authentication to protect API endpoints:</p> <pre><code>from fastapi_accelerator.auth_jwt import BaseAuthJWT\n\nclass AuthJWT(BaseAuthJWT):\n    async def check_auth(username: str, password: str) -&gt; bool:\n        \"\"\"Check the entered login and password.\"\"\"\n        return username == \"admin\" and password == \"admin\"\n\nAuthJWT.mount_auth(app)\n</code></pre> <p>Example of protecting an API method:</p> <pre><code>from fastapi_accelerator.auth_jwt import jwt_auth\n\n@app.get(\"/check_protected\", summary=\"Check JWT authentication\")\nasync def protected_route(jwt: dict = Depends(jwt_auth)):\n    return {\"message\": \"This is a protected route\", \"user\": jwt}\n</code></pre>"},{"location":"en/#integrations-with-external-apis","title":"Integrations with External APIs","text":"<p>Most API services interact with other APIs or gRPC/RPC services. Such integrations can be complex and often not fully understood by developers. Because of this, they easily turn into legacy code that is difficult to maintain, and testing integrations locally is often impossible.</p> <p>It's important to have a library in the project that monitors the quality of integration writing and forces documentation to simplify further support. That's why I developed special modules:</p> <ul> <li><code>IntegrationHTTP</code>: Class for creating REST HTTP integrations.</li> <li><code>Stability Patterns</code>: Stability patterns to apply to integration methods.</li> <li><code>py2dantic</code>: Utility for converting Python dict to Pydantic schema.</li> <li><code>docintegration</code>: Auto-generation of documentation for used integrations.</li> </ul> <p>Advantages of using this approach:</p> <ul> <li>Explicit specification of request and response formats.</li> <li>Easy portability of code between projects \u2014 just import classes based on <code>IntegrationHTTP</code>.</li> <li>Consolidation of external request logic in one place, which simplifies maintenance.</li> <li>Ability to easily replace real methods with <code>mock</code> for testing.</li> <li>Easy implementation of <code>Stability Patterns</code> for integration methods.</li> </ul> <p>To create an integration, follow these steps:</p> <ol> <li> <p>It's recommended to place integration code in the <code>app/integration/IntegrationPackageName</code> directory.</p> </li> <li> <p>Create an integration class <code>app/integration/IntegrationPackageName/endpoint.py</code>:</p> </li> </ol> <pre><code>import httpx\nfrom pydantic import BaseModel\nfrom fastapi_accelerator.integration.http_integration import (\n    ApiHTTP, EndpointsDeclaration, HTTPMethod, IntegrationHTTP,\n)\nfrom fastapi_accelerator.integration.stability_patterns import sp\n\nclass NameIntegration(EndpointsDeclaration):\n    integration = IntegrationHTTP(\n        \"Integration Name\",\n        doc=\"Integration with ... API\",\n    )\n\n    class Schema:\n        \"\"\"Pydantic schemas for successful responses\"\"\"\n        class Successful(BaseModel):\n            body: str\n\n    class SchemaError:\n        \"\"\"Pydantic schemas for unsuccessful responses\"\"\"\n        class http400(BaseModel):\n            error: str\n\n    @integration.endpoint(\n        HTTPMethod.post,\n        \"/path\",\n        version=\"...\",\n        docurl=\"https://...\"\n    )\n    @sp.RetryPattern()\n    async def method_name(api: ApiHTTP, argument_1: str) -&gt; Schema.Successful | SchemaError.http400:\n        try:\n            response: httpx.Response = await api.client.post(api.url.geturl(), json=...)\n            return response.json()\n        except httpx.RequestError as e:\n            raise e\n</code></pre> <ol> <li>Configure and connect integrations to the project <code>app/core/useintegration.py</code>:</li> </ol> <pre><code>\"\"\"Integrations used in the project\"\"\"\nfrom app.integration.IntegrationPackageName.endpoint import NameIntegration\n\n# Creating an instance of the integration\nname_api = NameIntegration(\n    # Beginning for url path\n    base_url=\"https://path...\",\n    # Credentials that we can use in integration methods\n    credentials={...},\n)\n</code></pre> <ol> <li>Example of using the integration class in <code>FastAPI</code>:</li> </ol> <pre><code>from app.core.useintegration import name_api\nfrom app.integration.IntegrationPackageName.schema import NameSchema\n\n@router.get(\"/name\")\nasync def name(argument_1: str) -&gt; NameIntegration.Schema.Successful:\n    # Call the integration method\n    return await name_api.method_name(argument_1)\n</code></pre>"},{"location":"en/#testing","title":"Testing","text":"<p>One of the key features of our toolkit is a powerful system for writing and executing tests. It includes:</p> <ol> <li>Fixtures for working with a test database and API client.</li> <li>Decorators for authentication and applying fixtures.</li> <li>Context manager for tracking SQL queries.</li> <li>Utilities for checking JSON responses.</li> <li>Testing through classes.</li> </ol> <p>Example of a test function:</p> <pre><code>from typing import Callable, NamedTuple\nfrom fastapi.testclient import TestClient\nfrom app.fixture.items_v1 import export_fixture_file\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\nfrom fastapi_accelerator.testutils import apply_fixture_db, client_auth_jwt, track_queries, check_response_json\n\n# Authenticate test client\n@client_auth_jwt(username=\"test\")\n# Create test data from function with fixtures\n@apply_fixture_db(export_fixture_file)\ndef test_name(\n    client: TestClient,  # Test client for API requests\n    url_path_for: Callable,  # Function to get url by handler function name\n    db_manager: MainDatabaseManager,  # Test DB manager\n    fixtures: NamedTuple,  # Stores created data from fixtures\n):\n    # Check the number of executed SQL commands\n    with track_queries(db_manager, expected_count=3):\n        # API request\n        response = client.get(url_path_for(\"FunctionName\"))\n\n    # Check JSON API response\n    check_response_json(\n        response,\n        200,\n        {\n            \"id\": fixtures.Name.id,\n        },\n    )\n</code></pre> <p>Example of a test class:</p> <pre><code>from typing import Callable, NamedTuple\nfrom fastapi.testclient import TestClient\nfrom app.fixture.items_v1 import export_fixture_file\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\nfrom fastapi_accelerator.testutils import apply_fixture_db\nfrom fastapi_accelerator.testutils.fixture_auth import client_auth_jwt\nfrom fastapi_accelerator.testutils.fixture_db.trace_sql import track_queries\nfrom fastapi_accelerator.testutils.utils import BaseAuthJwtPytest, check_response_json\n\nBASE_URL_V1 = \"/api/v1/\"\n\nclass TestName(BaseAuthJwtPytest):\n    # Create test data from function with fixtures\n    @apply_fixture_db(export_fixture_file)\n    def setUp(self, fixtures: NamedTuple):\n        self.url = BASE_URL_V1 + \"taskexecution\"\n        self.fixtures = fixtures  # Stores created data from fixtures\n\n    def test_name(self, client: TestClient, db_manager: MainDatabaseManager):\n        # Check the number of executed SQL commands\n        with track_queries(db_manager, expected_count=3):\n            # API request\n            response = client.get(self.url)\n        # Check JSON API response\n        check_response_json(\n            response,\n            200,\n            {\n                \"id\": self.fixtures.Name.id,\n            },\n        )\n</code></pre>"},{"location":"en/#comparison-with-existing-solutions","title":"Comparison with Existing Solutions","text":"<p>While there are several projects offering tools for developing and testing FastAPI applications, our solution stands out for its comprehensiveness and specialization:</p> <ol> <li><code>FastAPI-Utils</code>: Provides utilities for development but is less focused on testing.</li> <li><code>FastAPI-SQLAlchemy</code>: Integrates FastAPI with SQLAlchemy, including some testing utilities.</li> <li><code>FastAPI-Toolkit</code>: Offers a set of tools but is less specialized in testing tasks.</li> <li><code>freddie</code> - Archived on GitHub, only provides viewset functionality.</li> <li><code>fastapi_viewsets</code> - Only offers viewset functionality.</li> <li><code>FastAPIwee</code> - Less specialized in testing tasks.</li> </ol> <p>Our solution differs in that it:</p> <ol> <li>Is more specific to FastAPI application testing tasks.</li> <li>Provides a wider range of tools for various aspects of testing.</li> <li>Includes unique features such as the <code>@apply_fixture_db</code> decorator and <code>track_queries</code> context manager.</li> <li>Offers a comprehensive approach covering various aspects of FastAPI application development and testing.</li> </ol>"},{"location":"en/#conclusion","title":"Conclusion","text":"<p>The presented toolkit significantly simplifies and accelerates development with FastAPI. It provides ready-made solutions for typical tasks, improves project structure, and facilitates testing. Using these tools will allow developers to focus on the business logic of the application rather than on technical implementation details.</p> <p>Despite the presence of other tools in the FastAPI ecosystem, our solution stands out for its completeness and specialization in testing tasks. This makes it a valuable addition to existing resources for FastAPI developers.</p> <p>We continue to develop this toolkit and welcome feedback from the community. If you have ideas for improvement or have found a bug, please create an issue in our GitHub repository.</p> <p>By providing this comprehensive set of tools, we aim to contribute to the FastAPI community and help developers create more robust and efficient applications. The combination of powerful development utilities and advanced testing capabilities makes FastAPI Accelerator a valuable asset for both individual developers and teams working on FastAPI projects of any scale.</p>"},{"location":"en/business_logic/#use-base-pattern","title":"Use Base Pattern","text":"<p>The <code>base_pattern</code> function adds many useful features to the <code>app</code>, including:</p> <ul> <li>Populating <code>state</code> and other information for the <code>app</code>.</li> <li>Enabling <code>CORS</code>.</li> <li>Connecting routers with <code>ViewSet</code> support.</li> <li>Adding a <code>healthcheck</code> method.</li> <li><code>Middleware</code> for debugging API request execution time.</li> <li>Detailed output for <code>HTTP</code> exceptions.</li> <li>Adding docintegration</li> </ul>"},{"location":"en/business_logic/#use-databasemanager","title":"Use DatabaseManager","text":"<p><code>DatabaseManager</code> is a universal tool for working with RDBMS, providing both synchronous and asynchronous (names starting with <code>a</code>) methods. <code>DatabaseManager</code> uses the singleton pattern, so it can be easily substituted in tests.</p> <p>Example of creating a DB manager in the <code>app/db/base.py</code> file:</p> <pre><code>\"\"\"Module for connecting to RDBMS\"\"\"\n\nfrom app.core.config import DATABASE_URL, DEBUG, DEV_STATUS\nfrom fastapi_accelerator.dbsession import MainDatabaseManager\n\n# Manager for RDBMS\nDatabaseManager = MainDatabaseManager(DATABASE_URL, echo=DEBUG, DEV_STATUS=DEV_STATUS)\n</code></pre>"},{"location":"en/business_logic/#main-components-of-maindatabasemanager","title":"Main components of <code>MainDatabaseManager</code>","text":"<ul> <li> <p>General characteristics</p> <ul> <li><code>DEV_STATUS</code> - Development mode indicator. When <code>DEV_STATUS=False</code>, it blocks the execution of critical operations (<code>create_all</code>, <code>drop_all</code>, <code>clear_all</code>). This is a safety measure for the production environment.</li> </ul> </li> <li> <p>Synchronous components</p> <ul> <li><code>database_url</code> - Address for connecting to the synchronous database.</li> <li><code>engine</code> - Mechanism for synchronous interaction with the DB.</li> <li><code>session</code> - Generator of synchronous sessions.</li> <li> <p><code>Base</code> - Base class for data models.</p> </li> <li> <p>Functionality:</p> <ul> <li><code>get_session</code> - DB session injector.</li> <li><code>get_session_transaction</code> - DB session injector with transaction support.</li> <li><code>create_all</code> - Initialization of all tables in the DB.</li> <li><code>drop_all</code> - Deletion of the entire DB structure.</li> <li><code>clear_all</code> - Clearing the contents of tables. The <code>exclude_tables_name</code> parameter allows excluding certain tables from the clearing process.</li> </ul> </li> </ul> </li> <li> <p>Asynchronous components</p> <ul> <li><code>adatabase_url</code> - Address for connecting to the asynchronous DB.</li> <li><code>aengine</code> - Asynchronous mechanism for working with the DB, including connection pool.</li> <li> <p><code>asession</code> - Generator of asynchronous sessions.</p> </li> <li> <p>Functionality:</p> <ul> <li><code>aget_session</code> - Asynchronous DB session injector.</li> <li><code>aget_session_transaction</code> - Asynchronous DB session injector with transaction support.</li> </ul> </li> </ul> </li> </ul>"},{"location":"en/business_logic/#use-ormasync","title":"Use OrmAsync","text":"<p>This class optimizes asynchronous interaction with the DB:</p> <ul> <li><code>get</code> - Retrieving an object based on given criteria.</li> <li><code>get_list</code> - Getting a set of objects based on a query. (With the possibility of deep selection)</li> <li><code>update</code> - Modifying objects according to a query.</li> <li><code>delete</code> - Deleting objects based on given parameters.</li> <li><code>get_item</code> - Retrieving an object by primary key. (With the possibility of deep selection)</li> <li><code>create_item</code> - Creating a new object. (With the possibility of cascade creation)</li> <li><code>update_item</code> - Updating an object by primary key. (With the possibility of cascade update)</li> <li><code>delete_item</code> - Deleting an object by primary key. (With the possibility of cascade deletion)</li> <li><code>eager_refresh</code> - Full loading of all related data for an object.</li> </ul> <p>Deep selection/cascade operations - the ability to work with related data. Activated by the <code>deep=True</code> parameter</p> <p>Examples:</p> <ul> <li>get_list, get_item - Return objects with all related data, ready for use in Pydantic</li> <li>create_item - Creates records in related tables</li> <li>update_item - Updates data in related tables</li> <li>delete_item - Deletes records from related tables</li> </ul>"},{"location":"en/business_logic/#create-a-model-using-databasemanager","title":"Create a model using DatabaseManager","text":"<pre><code>from sqlalchemy import Column, Integer, String\n\nfrom app.db.base import DatabaseManager\n\n\nclass User(DatabaseManager.Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    login = Column(String, index=True)\n    pthone = Column(String, index=True)\n    email = Column(String, unique=True, index=True)\n</code></pre>"},{"location":"en/business_logic/#performing-crud-through-databasemanager","title":"Performing CRUD through DatabaseManager","text":"<pre><code># Asynchronous version\nclass FileView:\n    @router.get(\"/file\")\n    async def get_files(\n        skip=Query(0),\n        limit=Query(100),\n        aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n    ) -&gt; List[File]:\n        return await aorm.get_list(select(FileDb).offset(skip).limit(limit))\n\n    @router.get(\"/file/{file_uid}\")\n    async def get_file(\n        file_uid: str = Path(),\n        aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n    ) -&gt; File:\n        return await aorm.get(select(FileDb).filter(FileDb.uid == file_uid))\n\n    @router.post(\"/file\")\n    async def create_file(\n        aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n    ) -&gt; File:\n        file_uid = uuid.uuid4()\n        new_user = FileDb(uid=file_uid)\n        return await aorm.create_item(new_user)\n\n    @router.put(\"/file/{file_uid}\")\n    async def update_file(\n        file_uid: str = Path(),\n        aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n    ) -&gt; File:\n        update_data = {\"filename\": \"new\"}\n        return await aorm.update(\n            update(FileDb).filter(FileDb.uid == file_uid), update_data\n        )\n\n    @router.delete(\"/file/{file_uid}\")\n    async def delte_file(\n        file_uid: str = Path(),\n        aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n    ):\n        return await aorm.delete(delete(FileDb).filter(FileDb.uid == file_uid))\n\n# Synchronous version\n@router.get(\"/file-sync\")\nasync def get_file_sync(\n    session: Session = Depends(DatabaseManager.get_session),\n) -&gt; List[File]:\n    skip = 0\n    limit = 100\n    res = session.query(FileDb).offset(skip).limit(limit).all()\n    return res\n</code></pre>"},{"location":"en/business_logic/#working-with-migrations-through-alembic","title":"Working with migrations through Alembic","text":"<ol> <li>Installation</li> </ol> <pre><code>poetry add alembic\n</code></pre> <ol> <li>Project initialization</li> </ol> <pre><code>alembic init alembic\n</code></pre> <ol> <li>Modify <code>alembic/env.py</code></li> </ol> <pre><code># Import the DB manager\nfrom app.core.db import DatabaseManager\n\n# &gt; ! Import models that need to be tracked\nfrom app.models import *  # noqa F401\n\nfrom fastapi_accelerator.pattern.pattern_alembic import AlembicEnv\n\n# Pre-configured logic for creating and executing migrations through Alembic\nAlembicEnv(DatabaseManager).run()\n</code></pre> <ol> <li>We can modify <code>alembic.ini</code></li> </ol> <pre><code># Format for the migration file name\nfile_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n</code></pre> <p>Important aspect of migration search</p> <p>Models need to be imported in <code>alembic/env.py</code> so that these models record their data in <code>Base.metadata</code></p> <p>Therefore, you need to:</p> <ol> <li>In <code>app.models.__init__.py</code> import all models</li> </ol> <pre><code>from .files import *\nfrom .users import *\n</code></pre> <ol> <li>In <code>alembic/env.py</code> import all (or only specific) models</li> </ol> <pre><code>from app.models import *\n</code></pre> <ol> <li>Create migrations and apply them</li> </ol> <pre><code># Create a migration\nalembic revision --autogenerate\n# Apply migration to the DB\nalembic upgrade head\n</code></pre>"},{"location":"en/business_logic/#use-cache","title":"Use Cache","text":"<ul> <li>Preliminary setup, fill in the <code>app/core/cache.py</code> file:</li> </ul> <pre><code>import redis.asyncio as redis\n\nfrom app.core.config import REDIS_URL\n\n# Create a global Redis object\nredis_client = redis.from_url(REDIS_URL, encoding=\"utf-8\", decode_responses=True)\n</code></pre> <ul> <li>You can use API response caching through the <code>@cache_redis()</code> decorator</li> </ul> <pre><code>from datetime import timedelta\nfrom fastapi_accelerator.cache import cache_redis\n\n@app.get(f\"files/{{item_id}}\")\n@cache_redis(cache_class=redis_client, cache_ttl=timedelta(minutes=10))\nasync def get_item(\n    request: Request,\n    item_uid: str = Path(...),\n    aorm: OrmAsync = Depends(DatabaseManager.aget_orm),\n) -&gt; FilesSchema:\n    response = await aorm.get(\n        select(Files).filter(Files.id == item_uid)\n    )\n    return response\n</code></pre>"},{"location":"en/business_logic/#use-viewset","title":"Use ViewSet","text":"<ol> <li>Let's create, for example, <code>app/api/v1/router.py</code></li> </ol> <pre><code>from datetime import timedelta\nfrom typing import List\nfrom uuid import UUID\n\nfrom fastapi import APIRouter, Depends, Query\nfrom pydantic import BaseModel\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Session\n\nfrom app.api.v1.schemas.file import File\nfrom app.api.v1.schemas.timemeasurement import TaskExecution\nfrom app.api.v1.schemas.user import User\nfrom app.core.cache import redis_client\nfrom app.core.db import DatabaseManager\nfrom app.models.file import File as FileDb\nfrom app.models.timemeasurement import TaskExecution as TaskExecutionDb\nfrom app.models.users import User as UserDb\nfrom fastapi_accelerator.auth_jwt import jwt_auth\nfrom fastapi_accelerator.db.dbsession import OrmAsync\nfrom fastapi_accelerator.paginator import DefaultPaginator\nfrom fastapi_accelerator.viewset import AppOrm, FullViewSet\n\nrouter = APIRouter(prefix=\"/api/v1\")\n\nclass FileViewSet(FullViewSet):\n    \"\"\"\n    View for working with files\n    \"\"\"\n\n    # DB Model\n    db_model = FileDb\n    # Schema Model\n    pydantic_model = File\n    # Caching\n    cache_class = redis_client\n    cache_ttl = timedelta(minutes=10)\n    # Pagination\n    paginator_class = DefaultPaginator\n\n    async def db_update(\n        self, item_id: str | int | UUID, item: type[BaseModel], aorm: OrmAsync\n    ) -&gt; object:\n        \"\"\"Overriding the db_update method\"\"\"\n        return await super().db_update(item_id, item, aorm)\n\n\nclass UserViewSet(FullViewSet):\n    \"\"\"\n    View for working with users\n    \"\"\"\n\n    # DB Model\n    db_model = UserDb\n    # Schema Model\n    pydantic_model = User\n\n    def list(self):\n        \"\"\"Overriding the list method\"\"\"\n\n        @self.router.get(f\"{self.prefix}\", tags=self.tags)\n        async def get_list_items(\n            skip: int = Query(0),\n            limit: int = Query(100),\n            aorm: OrmAsync = Depends(AppOrm.aget_orm),\n        ) -&gt; List[self.pydantic_model]:\n            return await aorm.get_list(\n                select(self.db_model).offset(skip).limit(limit),\n                deep=self.deep_schema,\n                db_model=self.db_model,\n            )\n        return get_list_items\n\nclass TaskExecutionViewSet(FullViewSet):\n    \"\"\"\n    View for working with task executions\n    \"\"\"\n\n    # DB Model\n    db_model = TaskExecutionDb\n    # Schema Model\n    pydantic_model = TaskExecution\n\n    # Pagination\n    paginator_class = DefaultPaginator\n\n    # Enable support for nested pydantic schemas\n    # this means that recursive creation, updating,\n    # and deletion of related records will occur\n    deep_schema = True\n\n    # Enable protection through JWT\n    dependencies = [Depends(jwt_auth)]\n\n# Connect ViewSet\nrouter.views = [\n    FileViewSet().as_view(router, prefix=\"/file\"),\n    UserViewSet().as_view(router, prefix=\"/user\"),\n    TaskExecutionViewSet().as_view(router, prefix=\"/taskexecution\"),\n]\n</code></pre>"},{"location":"en/business_logic/#use-time-zone","title":"Use Time Zone","text":"<p>Get the current server time considering its time zone</p> <pre><code>import pytz\nfrom fastapi_accelerator.timezone import get_datetime_now\n\n# Option 1\nget_datetime_now(request.app.state.TIMEZONE).isoformat()\n# Option 2\nget_datetime_now(app.state.TIMEZONE).isoformat()\n# Option 3\nget_datetime_now(pytz.timezone(\"Europe/Moscow\")).isoformat()\n# Option 4\ntimezone = TIMEZONE() or TIMEZONE(request.app)\nget_datetime_now(timezone).isoformat()\n</code></pre>"},{"location":"en/business_logic/#use-httpexception","title":"Use HTTPException","text":"<ul> <li>Usage:</li> </ul> <pre><code>from fastapi_accelerator.exception import HTTPException403\n\n@router.get(\"/\")\nasync def get_users():\n    if True:\n        raise HTTPException403()\n    return [{\"user_id\": \"user1\"}, {\"user_id\": \"user2\"}]\n</code></pre>"},{"location":"en/business_logic/#use-authjwt","title":"Use AuthJWT","text":"<p>Using authentication through JWT</p> <ul> <li>Connect to FastAPI project:</li> </ul> <pre><code>from fastapi_accelerator.auth_jwt import BaseAuthJWT\n\nclass AuthJWT(BaseAuthJWT):\n    async def check_auth(username: str, password: str) -&gt; bool:\n        \"\"\"Check the entered login and password.\"\"\"\n        return username == \"admin\" and password == \"admin\"\n\n    async def add_jwt_body(username: str) -&gt; dict:\n        \"\"\"Function to add additional data to the user's JWT token\"\"\"\n        return {\"version\": username.title()}\n\n\n# Connect JWT authentication\nAuthJWT.mount_auth(app)\n</code></pre> <ul> <li>Example of protecting an API method:</li> </ul> <pre><code>from fastapi_accelerator.auth_jwt import jwt_auth\n\n@app.get(\"/check_protected\", summary=\"Check JWT authentication\")\nasync def protected_route(jwt: dict = Depends(jwt_auth)):\n    return {\"message\": \"This is a protected route\", \"user\": jwt}\n</code></pre> <p>Here's the translation of the text into English while preserving its structure:</p>"},{"location":"en/business_logic/#use-integration","title":"Use Integration","text":"<p>Most API services interact with other APIs or gRPC/RPC services. Such integrations can be complex and often not fully understood by developers. Because of this, they easily turn into legacy code that is difficult to maintain, and testing integrations locally is often impossible.</p> <p>It's important to have a library in the project that monitors the quality of integration writing and forces documentation to simplify further support. For this purpose, I developed special modules:</p> <ul> <li> <p><code>IntegrationHTTP</code>: A class for creating HTTP integrations.</p> </li> <li> <p><code>Stability Patterns</code>: Stability patterns to apply to integration methods.</p> </li> <li> <p><code>py2dantic</code>: A utility for converting Python dict to Pydantic schema.</p> </li> <li> <p><code>docintegration</code>: Auto-generation of documentation for used integrations.</p> </li> </ul>"},{"location":"en/business_logic/#use-integration-http","title":"Use Integration HTTP","text":"<p><code>IntegrationHTTP</code> - A class for creating HTTP integration methods, centralizing the logic of calls to external systems, validating outgoing data. The class also specifies the version and documentation of the external API.</p> <p>Advantages of using this approach:</p> <ul> <li> <p>Explicit specification of request and response formats.</p> </li> <li> <p>Easy portability of code between projects \u2014 just import classes based on <code>IntegrationHTTP</code>.</p> </li> <li> <p>Consolidation of external request logic in one place, simplifying maintenance.</p> </li> <li> <p>Ability to easily replace real methods with <code>mock</code> for testing.</p> </li> <li> <p>Easy implementation of <code>Stability Patterns</code> for integration methods.</p> </li> </ul> <p>To create an integration, follow these steps:</p> <ol> <li> <p>It is recommended to place integration code in the directory <code>app/integration/IntegrationPackageName</code>.</p> </li> <li> <p>Create an integration class <code>app/integration/IntegrationPackageName/endpoint.py</code>:</p> </li> </ol> <pre><code>import httpx\nfrom pydantic import BaseModel\nfrom fastapi_accelerator.integration.http_integration import (\n    ApiHTTP,\n    EndpointsDeclaration,\n    HTTPMethod,\n    IntegrationHTTP,\n)\nfrom fastapi_accelerator.integration.stability_patterns import sp\n\nclass NameIntegration(EndpointsDeclaration):\n    integration = IntegrationHTTP(\n        \"Integration Name\",\n        doc=\"Integration with ... API\",\n    )\n\n    class Schema:\n        \"\"\"Pydantic schemas for successful responses\"\"\"\n        class Successful(BaseModel):\n            body: str\n\n    class SchemaError:\n        \"\"\"Pydantic schemas for unsuccessful responses\"\"\"\n        class http400(BaseModel):\n            error: str\n\n    @integration.endpoint(\n        HTTPMethod.post,\n        \"/path\",\n        version=\"...\",\n        docurl=\"https://...\"\n    )\n    @sp.RetryPattern()\n    async def method_name(api: ApiHTTP, argument_1: str) -&gt; Schema.Successful | SchemaError.http400:\n        try:\n            response: httpx.Response = await api.client.post(api.url.geturl(), json=...)\n            return response.json()\n        except httpx.RequestError as e:\n            raise e\n</code></pre> <ol> <li>Configure and connect integrations to the project <code>app/core/useintegration.py</code>:</li> </ol> <pre><code>\"\"\"Integrations used in the project\"\"\"\nfrom app.integration.IntegrationPackageName.endpoint import NameIntegration\n\n# Creating an instance of integration\nname_api = NameIntegration(\n    # Start for url path\n    base_url=\"https://path...\",\n    # Credentials that we can use in integration methods\n    credentials={...},\n)\n</code></pre> <ol> <li>Example of using the integration class in <code>FastAPI</code>:</li> </ol> <pre><code>from app.core.useintegration import name_api\nfrom app.integration.IntegrationPackageName.schema import NameSchema\n\n@router.get(\"/name\")\nasync def name(argument_1: str) -&gt; NameIntegration.Schema.Successful:\n    # Call integration method\n    return await name_api.method_name(argument_1)\n</code></pre> <p>You need to specify the type of object returned from the integration method.</p> <p>The response can be:</p> <ul> <li> <p><code>dict</code>: which can be converted to a single <code>Pydantic</code> schema.</p> </li> <li> <p><code>list[dict]</code>: which can be converted to a list of <code>Pydantic</code> schemas.</p> </li> <li> <p>Multiple response types: This is necessary to specify the type of correct response and for error handling. For example, <code>-&gt; SuccessfulResponse | UnsuccessfulResponse</code> or <code>-&gt; list[SuccessfulResponse] | UnsuccessfulResponse</code>.</p> </li> <li> <p>In the worst case, you can specify <code>Any</code>.</p> </li> </ul>"},{"location":"en/business_logic/#example-of-integration-with-google-translate","title":"Example of integration with Google Translate","text":"<ul> <li>Integration class <code>app/integration/google_translate/endpoint.py</code>:</li> </ul> <pre><code>import httpx\nfrom pydantic import BaseModel\nfrom fastapi_accelerator.integration.http_integration import (\n    ApiHTTP,\n    EndpointsDeclaration,\n    HTTPMethod,\n    IntegrationHTTP,\n)\nfrom fastapi_accelerator.integration.stability_patterns import sp\n\nclass GoogleTranslateEndpoints(EndpointsDeclaration):\n    integration = IntegrationHTTP(\n        \"Google Translate\",\n        doc=\"Integration with Google Translate API\",\n    )\n\n    class Schema:\n        \"\"\"Schemas for successful responses\"\"\"\n        class TranslateV2(BaseModel):\n            text: str\n\n    class SchemaError:\n        \"\"\"Schemas for unsuccessful responses\"\"\"\n        class http400Error(BaseModel):\n            code: int\n            message: str\n            errors: list[dict]\n            status: str\n            details: list[dict]\n\n        class http400(BaseModel):\n            error: dict\n\n    @integration.endpoint(\n        HTTPMethod.post,\n        \"/v1/translateHtml\",\n        version=\"v2\",\n        docurl=\"https://cloud.google.com/translate/docs/reference/rest\",\n    )\n    # Apply stability patterns\n    @sp.Timeout()\n    # Automatically retries the request when an error occurs.\n    @sp.RetryPattern()\n    async def translate(\n        api: ApiHTTP,\n        text: str,\n        from_lang: str,\n        to_lang: str,\n    ) -&gt; Schema.TranslateV2 | SchemaError.http400: # Specify response type\n        \"\"\"Translate text using Google Translate\"\"\"\n        try:\n            # Execute request to external system\n            response: httpx.Response = await api.client.post(\n                api.url.geturl(),\n                json=[[text.split(\"\\n\"), from_lang, to_lang], \"te_lib\"],\n                headers={\n                    \"content-type\": \"application/json+protobuf\",\n                    \"x-goog-api-key\": api.credentials[\"API_TOKEN\"],\n                },\n            )\n            # Process response\n            print(f\"Processed {api.url}: Status {response.status_code}\")\n            return {\"text\": \"\\n\".join(x[0] for x in response.json())}\n        except httpx.RequestError as e:\n            print(f\"Error processing {api.url}: {e}\")\n            raise e\n</code></pre> <ul> <li>Connection in <code>app/core/useintegration.py</code>:</li> </ul> <pre><code>\"\"\"Integrations used in the project\"\"\"\nfrom app.integration.google_translate.endpoint import GoogleTranslateIntegration\n\n# Creating an instance of integration\ngtapi = GoogleTranslateIntegration(\n    base_url=\"https://translate-pa.googleapis.com\",\n    # Save credentials in the class that we can use in integration methods\n    credentials={\"API_TOKEN\": \"...\"},\n)\n</code></pre> <ul> <li>Example of usage in a <code>FastAPI</code> endpoint:</li> </ul> <pre><code>from datetime import timedelta\nfrom fastapi_accelerator.cache import cache_redis\nfrom app.core.cache import redis_client\nfrom app.core.useintegration import gtapi\nfrom app.integration.google_translate.schema import GoogleTranslateSchema\n\n@router.get(\"/translate\")\n# We can easily cache responses from integrations\n@cache_redis(cache_class=redis_client, cache_ttl=timedelta(minutes=10))\nasync def translate(\n    text: str, from_lang: str = \"en\", to_lang: str = \"ru\"\n) -&gt; GoogleTranslateEndpoints.Schema.TranslateV2:\n    # Call integration method\n    return await gtapi.translate(text, from_lang, to_lang)\n</code></pre>"},{"location":"en/business_logic/#use-stability-patterns","title":"Use Stability Patterns","text":"<p>The module supports stability patterns that help avoid errors and overloads when working with external services.</p> <p>The main criterion for unsuccessful execution is the occurrence of an exception (raise) in the integration method. If you received a response with code 400 (client error) or 500 (server error), but did not raise an exception, Stability Patterns will consider this a successful execution and will not apply its error handling logic.</p> <p>Below is a description of the main decorators:</p> <ul> <li><code>@sp.Fallback</code> (Fallback) - Provides an alternative execution path in case of main path failure. Allows the system to degrade in a controlled manner rather than failing with an error.</li> <li><code>@sp.Timeout</code> (Timeout) - Limits the response waiting time from an external service. Prevents resource blocking when a call hangs.</li> <li><code>@sp.CircuitBreaker</code> (Circuit Breaker) - Tracks the number of errors when calling an external service. When the limit is exceeded, it temporarily blocks the call, preventing cascading failures.</li> <li><code>@sp.RetryPattern</code> (Retry Pattern) - Automatically retries the request when an error occurs.</li> <li><code>@sp.Throttling</code> (Throttling) - Limits the number of requests to a resource to prevent its overload. Protects the system from request storms.</li> </ul> <p>These patterns make the system more resilient, minimizing the risk of failures and ensuring smooth degradation when problems occur.</p> <p>\u0412\u043e\u0442 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0439\u0441\u044f \u0447\u0430\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b:</p>"},{"location":"en/business_logic/#use-docintegration","title":"Use docintegration","text":"<p>This functionality allows you to find out which integrations are used in the project, similar to how it's implemented in OpenAPI Swagger for standard FastAPI.</p> <p>The documentation is available at: <code>http://host:port/docintegration</code>.</p> <p>To activate this path, you need to specify a list of integrations in the <code>useintegration</code> argument of the <code>base_pattern</code> parameter in the <code>main.py</code> file:</p> <pre><code>from app.core.useintegration import integration_1, integration_2\nfrom fastapi_accelerator.pattern.pattern_fastapi import base_pattern\n\n# Pattern for the project\nbase_pattern(\n    app,\n    ...,\n    useintegration=[integration_1, integration_2],\n)\n</code></pre> <p>Documentation appearance</p>"},{"location":"en/business_logic/#use-admin-panel","title":"Use Admin Panel","text":"<ol> <li>Installation</li> </ol> <pre><code>poetry add flask-admin\n</code></pre> <ol> <li>Create a file <code>admin_panel.py</code></li> </ol> <pre><code>from flask import Flask\n\nfrom app.core.config import ADMIN_PASSWORD, ADMIN_USERNAME, SECRET_KEY\nfrom app.db.base import DatabaseManager\nfrom app.models import File, User\nfrom fastapi_accelerator.pattern_flask_admin import base_pattern\n\napp = Flask(__name__)\n\nadmin = base_pattern(\n    app,\n    SECRET_KEY,\n    ADMIN_PASSWORD,\n    ADMIN_USERNAME,\n    # &gt; Models needed in the admin panel\n    models=[User, File],\n    database_manager=DatabaseManager,\n)\n\n\nif __name__ == \"__main__\":\n    app.run(\n        host=\"0.0.0.0\",\n        port=8001,\n        debug=True,\n    )\n</code></pre> <ol> <li> <p>Run <code>python admin_panel.py</code></p> </li> <li> <p>Log in to the admin panel:</p> </li> <li> <p><code>http://localhost:8233/admin</code></p> </li> <li><code>http://localhost:8233/login</code></li> <li><code>http://localhost:8233/logout</code></li> </ol>"},{"location":"en/info_files/#description-of-files-in-the-fastapi_accelerator-package","title":"Description of files in the fastapi_accelerator package","text":"<pre><code>fastapi_accelerator/\n\n\u251c\u2500\u2500 db/ # Logic for interacting with RDBMS\n\u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u251c\u2500\u2500 dborm.py\n\u2502 \u2514\u2500\u2500 dbsession.py\n\u2502\n\u251c\u2500\u2500 pattern/ # Templates for projects\n\u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u251c\u2500\u2500 pattern_fastapi.py # Templates for creating a FastAPI project\n\u2502 \u251c\u2500\u2500 pattern_alembic.py # Templates for creating Alembic\n\u2502 \u2514\u2500\u2500 pattern_flask_admin.py # Templates for creating a Flask admin panel project\n\u2502\n\u251c\u2500\u2500 integration/ # Utilities for integrations with external systems\n\u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u251c\u2500\u2500 base_integration.py # Base class for all types of integrations\n\u2502 \u251c\u2500\u2500 http_integration.py # HTTP integrations\n\u2502 \u2514\u2500\u2500 stability_patterns.py # Implementation of stability patterns\n\u2502\n\u251c\u2500\u2500 commands/ # CLI commands\n\u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2514\u2500\u2500 py2dantic # Generating pydantic schema from python dict\n\u2502\n\u251c\u2500\u2500 testutils # Utilities for testing FastAPI\n\u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u251c\u2500\u2500 fixture_base.py # Main fixture for tests\n\u2502 \u251c\u2500\u2500 fixture_db # Fixtures for working with test DB\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u251c\u2500\u2500 apply_fixture.py\n\u2502 \u2502 \u251c\u2500\u2500 db.py\n\u2502 \u2502 \u2514\u2500\u2500 trace_sql.py\n\u2502 \u251c\u2500\u2500 fixture_auth.py # Fixture for client authentication via JWT\n\u2502 \u2514\u2500\u2500 utils.py\n\u2502\n\u251c\u2500\u2500 cache.py # Caching implementation\n\u251c\u2500\u2500 auth_jwt.py # JWT authentication\n\u251c\u2500\u2500 exception.py # Exception handling\n\u251c\u2500\u2500 middleware.py # Middleware components\n\u251c\u2500\u2500 paginator.py # Pagination implementation\n\u251c\u2500\u2500 timezone.py # Working with time zones\n\u251c\u2500\u2500 appstate.py # Get project settings once during Runtime\n\u251c\u2500\u2500 viewset.py # ViewSet implementation\n\u251c\u2500\u2500 utils.py # General utilities\n\u251c\u2500\u2500 README.md # Documentation\n\u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"en/info_files/#file-examples","title":"File examples","text":""},{"location":"en/info_files/#example-of-mainpy","title":"Example of <code>main.py</code>","text":"<pre><code>from contextlib import asynccontextmanager\nimport uvicorn\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\nimport app.api.v1.router as RouterV1\nfrom app.core.config import BASE_DIR_PROJECT, DEBUG, SECRET_KEY\nfrom app.core.db import DatabaseManager\nfrom app.core.security import AuthJWT\nfrom fastapi_accelerator.pattern_fastapi import base_pattern\nfrom fastapi_accelerator.timezone import moscow_tz\n\n@asynccontextmanager\nasync def lifespan(app):\n    \"\"\"Project lifecycle\"\"\"\n    yield\n\napp = FastAPI(\n    title=\"File ddos API\",\n    # Lifespan function\n    lifespan=lifespan,\n    # Dependencies that will be applied to all routes in this router.\n    dependencies=None,\n    # Default response class for all routes.\n    default_response_class=ORJSONResponse,\n\n    # Pattern for the project\n    base_pattern(\n        app,\n        routers=(RouterV1.router,),\n        timezone=moscow_tz,\n        cache_status=True,\n        debug=DEBUG,\n        base_dir=BASE_DIR_PROJECT,\n        database_manager=DatabaseManager,\n        secret_key=SECRET_KEY,\n\n        # Connect JWT authentication\n        AuthJWT.mount_auth(app)\n    )\n)\n\nif __name__ == \"__main__\":\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        workers=4,\n        reload=DEBUG,\n        access_log=DEBUG,\n</code></pre> <p>Run with <code>python main.py</code></p>"},{"location":"en/info_files/#example-of-makefile","title":"Example of <code>Makefile</code>","text":"<pre><code>run_test:\n    pytest\n\nrun_dev_server:\n    python -m main\n\n# Create migration\nmakemigrate:\n    alembic revision --autogenerate\n\n# Apply migrations\nmigrate:\n    alembic upgrade head\n</code></pre>"},{"location":"en/info_files/#example-of-configpy","title":"Example of <code>config.py</code>","text":"<p>File <code>app/core/config.py</code>:</p> <pre><code>\"\"\"\nGlobal project settings.\nCan additionally contain conversion of setting values from `.settings_local`\n\"\"\"\n\nfrom pathlib import Path\nfrom .settings_local import (\n    ADMIN_PASSWORD,\n    ADMIN_USERNAME,\n    CACHE_STATUS,\n    DATABASE_URL,\n    DEBUG,\n    DEV_STATUS,\n    REDIS_URL,\n    SECRET_KEY,\n    TEST_DATABASE_URL,\n)\n\n# Path to the project application\nBASE_DIR_APP = Path(__file__).parent.parent\n# Path to the project root\nBASE_DIR_PROJECT = BASE_DIR_APP.parent\n\n__all__ = (\n    # &gt;&gt;&gt; Connections to external systems:\n    # URL for connecting to the DB\n    DATABASE_URL,\n    # URL for connecting to the test DB\n    TEST_DATABASE_URL,\n    # URL for connecting to Redis\n    REDIS_URL,\n    # &gt;&gt;&gt; Statuses:\n    # Debug mode, can be enabled on the test server\n    DEBUG,\n    # Development mode, enable only in local development\n    DEV_STATUS,\n    # Enable/Disable caching\n    CACHE_STATUS,\n    # &gt;&gt;&gt; Security:\n    SECRET_KEY,\n    # Login data for Flask-Admin panel\n    ADMIN_USERNAME,\n    ADMIN_PASSWORD,\n)\n</code></pre> <p>File <code>app/core/settings_local.py</code>:</p> <pre><code>import os\n\nDATABASE_URL = os.getenv(\"DATABASE_URL\", \"postgres://user_app:db@postgres_db:5432/db\")\nTEST_DATABASE_URL = \"postgres://user_app:db@postgres_db:5432/testdb\"\nREDIS_URL = os.getenv(\"REDIS_URL\", \"redis://redis:6379\")\nSECRET_KEY = \"your_secret_key_here\"\nDEBUG = True\nDEV_STATUS = False\nCACHE_STATUS = True\nADMIN_USERNAME = \"admin\"\nADMIN_PASSWORD = \"password\"\n</code></pre>"},{"location":"en/info_files/#example-of-file-structure","title":"Example of file structure","text":"<pre><code>Project/\n\u2502\n\u251c\u2500\u2500 app/\n\u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u251c\u2500\u2500 utils.py # Reusable functionality for the project\n\u2502 \u251c\u2500\u2500 core/ # Contains core modules such as configuration, security, and common dependencies.\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u251c\u2500\u2500 settings_local.py # Local values for settings, should not be in git, create directly on the server\n\u2502 \u2502 \u251c\u2500\u2500 config.py # Project settings that do not depend on external settings\n\u2502 \u2502 \u251c\u2500\u2500 security.py # Project security logic\n\u2502 \u2502 \u251c\u2500\u2500 db.py # Database settings and sessions.\n\u2502 \u2502 \u251c\u2500\u2500 cache.py # Caching settings\n\u2502 \u2502 \u251c\u2500\u2500 useintegration.py # Integrations used in the project\n\u2502 \u2502 \u2514\u2500\u2500 dependencies.py # Common dependencies for the project\n\u2502 \u2502\n\u2502 \u251c\u2500\u2500 api/ # Contains all API endpoints, divided by versions.\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u2514\u2500\u2500 v1/\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u251c\u2500\u2500 router.py # Contains request handlers for the specified api version\n\u2502 \u2502 \u2502\n\u2502 \u2502 \u251c\u2500\u2500 static/ # Contains static files, if needed\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 js\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 css\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 img\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 html\n\u2502 \u2502 \u2502\n\u2502 \u2502 \u251c\u2500\u2500 logic/ # Contains business logic\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 users.py\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 items.py\n\u2502 \u2502 \u2502\n\u2502 \u2502 \u251c\u2500\u2500 schemas/ # Pydantic models for request and response validation.\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 user.py\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 item.py\n\u2502 \u2502 \u2502\n\u2502 \u2502 \u251c\u2500\u2500 crud/ # Functions for working with the database (Create, Read, Update, Delete).\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 user.py\n\u2502 \u2502 \u2502 \u2514\u2500\u2500 item.py\n\u2502 \u2502 \u2502\n\u2502 \u2502 \u2514\u2500\u2500 tests/ # Directory for tests.\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u251c\u2500\u2500 test_users.py\n\u2502 \u2502 \u2514\u2500\u2500 test_items.py\n\u2502 \u2502\n\u2502 \u251c\u2500\u2500 models/ # Database model definitions (e.g., SQLAlchemy models).\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u251c\u2500\u2500 user.py\n\u2502 \u2502 \u2514\u2500\u2500 item.py\n\u2502 \u2502\n\u2502 \u251c\u2500\u2500 integration/ # Integrations with external services\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u251c\u2500\u2500 google_translate/ # Example of integration package with Google Translator (it can be connected as a git submodule)\n\u2502 \u2502 \u2502    \u2514\u2500\u2500 __init__.py\n\u2502 \u2502 \u251c\u2500\u2500 schema.py # Contains request and response schemas\n\u2502 \u2502 \u2514\u2500\u2500 view.py # Contains integration logic\n\u2502 \u2502\n\u2502 \u2514\u2500\u2500 fixture/ # Stores fixtures for testing this project\n\u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u251c\u2500\u2500 items_v1.py # Test records for DB\n\u2502 \u2514\u2500\u2500 utils.py # Reusable fixtures for tests\n\u2502\n\u251c\u2500\u2500 fastapi_accelerator/ # Submodule for reuse\n\u2502\n\u251c\u2500\u2500 alembic/ # Directory for database migrations.\n\u2502 \u251c\u2500\u2500 versions/ # Folder with migrations\n\u2502 \u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u2502 \u2514\u2500\u2500 0001_init.py # Migration file\n\u2502 \u2514\u2500\u2500 env.py # Settings for alembic\n\u2502\n\u251c\u2500 conf/ # Configuration files for prod\n\u2502 \u251c\u2500\u2500 settings_local.example.py # Example for creating settings_local.py\n\u2502 \u2514\u2500\u2500 Dockerfile # File for prod\n\u2502\n\u251c\u2500\u2500 pytest.ini # Configuration for pytest\n\u251c\u2500\u2500 conftest.py # Test execution settings\n\u2502\n\u251c\u2500\u2500 .gitignore # Which files and folders to ignore in git\n\u251c\u2500\u2500 .gitlab-ci.yml # CI pipeline settings\n\u2502\n\u251c\u2500\u2500 pyproject.toml # Poetry settings\n\u2502\n\u251c\u2500\u2500 Makefile # Reusable bash commands\n\u2502\n\u251c\u2500\u2500 README.md # Project description\n\u251c\u2500\u2500 CHANGELOG.md # Project changes\n\u251c\u2500\u2500 version.toml # Project version\n\u2502\n\u251c\u2500\u2500 alembic.ini # Configurations for alembic\n\u2502\n\u251c\u2500\u2500 DockerfileDev # File for creating dev container with APP\n\u251c\u2500\u2500 docker-compose.yml # Used for building dev environment\n\u2502\n\u251c\u2500\u2500 admin_panel.py # Admin panel\n\u2502\n\u2514\u2500\u2500 main.py # Entry point to the application, where the FastAPI instance is created.\n</code></pre>"},{"location":"en/plan/#development-plans","title":"Development Plans","text":"<p>In progress:</p> <ul> <li> Add CLI utility instead of Makefile</li> <li> Significantly increase code test coverage</li> </ul> <p>Ideas:</p> <ul> <li> Add project templating</li> <li> Ensure compatibility with the latest (previous) versions of FastAPI and related libraries</li> <li> Significantly increase code test coverage</li> <li> Optimize existing code for improved performance</li> <li> Conduct load testing and optimize critical code sections</li> <li> Perform refactoring considering best practices and design patterns</li> <li> Develop and add a similar version for working with <code>WebSocket</code></li> <li> Create several detailed project examples demonstrating various use cases</li> </ul> <p>Done:</p> <ul> <li> Add logic for integrations with other APIs.</li> </ul>"},{"location":"en/test_logic/#why-and-how-to-write-tests","title":"Why and how to write tests","text":"<p>Let's consider testing: a REST API that uses a relational DBMS and returns responses in JSON format. This is one of the most common approaches to integration testing, which emulates manual checking of API methods. This approach allows covering a significant part of business logic with tests, so automating API testing is a good start. These tests not only reproduce manual testing but also allow checking side effects in the database, such as creating new records after executing POST requests. Implementing such tests in <code>Django</code> is quite simple thanks to built-in tools, however, in <code>FastAPI</code>, this task requires more attention. Therefore, I developed components that allow creating integration API tests on <code>FastAPI</code> as conveniently and quickly as in <code>Django</code>.</p>"},{"location":"en/test_logic/#preliminary-setup-for-testing","title":"Preliminary setup for testing","text":"<ol> <li>Installation</li> </ol> <pre><code>poetry add pytest pytest-asyncio httpx\n</code></pre> <ol> <li>Create file <code>app/pytest.ini</code></li> </ol> <pre><code>[pytest]\n; Additional arguments for running\naddopts = -v -l -x -s --lf --disable-warnings\n; Mask for searching test files\npython_files = tests.py test_*.py *_tests.py\n; Allows outputting logs to the console when running tests\nlog_cli = true\n</code></pre> <ol> <li>Create file <code>app/conftest.py</code></li> </ol> <pre><code>from app.core.config import TEST_DATABASE_URL\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\n# You can specify an exact import list, for simplicity we import everything\nfrom fastapi_accelerator.testutils import * # noqa E402\n\n# Need to create DB manager before importing APP\n# so that the singleton pattern creates only a test instance\n# and APP already takes the test instance\nTestDatabaseManager = MainDatabaseManager(\n    TEST_DATABASE_URL,\n    echo=False,\n    DEV_STATUS=True\n)\n\nfrom main import app # noqa E402\n\n# Disable caching during tests\napp.state.CACHE_STATUS = False\n\nSettingTest(TestDatabaseManager, app, alembic_migrate=True, keepdb=True) # noqa F405\n</code></pre>"},{"location":"en/test_logic/#main-components-for-testing","title":"Main components for testing","text":"<p>To simplify writing tests, standardize them,... you can use the following components:</p> <ul> <li> <p>Fixtures:</p> <ul> <li><code>client</code> - Client for executing test API requests</li> <li><code>test_app</code> - Test FastAPI application</li> <li><code>url_path_for</code> - Get full URL path by handler function name</li> <li><code>engine</code> - Synchronous engine</li> <li><code>aengine</code> - Asynchronous engine</li> <li><code>db_session</code> - Connection to test DB</li> <li><code>db_manager</code> - Manager with test DB</li> </ul> </li> <li> <p>Functions:</p> <ul> <li><code>check_response_json</code> - Function that combines main checks for API response</li> <li><code>rm_key_from_deep_dict</code> - Function to clean unnecessary keys from API response</li> </ul> </li> <li> <p>Classes:</p> <ul> <li><code>BasePytest</code> - Base class for testing through classes</li> <li><code>BaseAuthJwtPytest</code> - Adding JWT authentication (<code>@client_auth_jwt</code>) for <code>BasePytest</code></li> </ul> </li> <li> <p>Context manager:</p> <ul> <li><code>track_queries</code> - Intercept executed SQL commands during the context for subsequent analysis - for example, counting.</li> </ul> </li> <li> <p>Decorators:</p> <ul> <li><code>@apply_fixture_db(FunctionReturningFixtures)</code> - Decorator that adds fixtures to DB before test and removes them after test.</li> <li><code>@client_auth_jwt()</code> - Decorator that authenticates test client by JWT.</li> <li><code>@patch_integration(ReplacementRules)</code> - Decorator that replaces integration methods with Mock functions.</li> </ul> </li> </ul>"},{"location":"en/test_logic/#more-about-testing-components","title":"More about testing components","text":""},{"location":"en/test_logic/#fixture-client","title":"Fixture - <code>client</code>","text":"<p>The main fixture for executing test API requests.</p> <p>The order of work for the <code>client</code> fixture:</p> <ul> <li> <p>Stages at the level of the entire test session:</p> </li> <li> <p>(before) Test DB will be created if it doesn't exist;</p> </li> <li>(before) Depending on the <code>SettingTest.alembic_migrate</code> setting;<ul> <li>If <code>True</code> -&gt; Will create tables through <code>alembic</code> migrations</li> <li>If <code>False</code> -&gt; Will create tables through <code>create_all()</code></li> </ul> </li> <li> <p>(after) After completing all tests, depending on the <code>SettingTest.keepdb</code> setting;</p> <ul> <li>If <code>True</code> -&gt; Nothing</li> <li>If <code>False</code> -&gt; All tables from the test DB will be deleted</li> </ul> </li> <li> <p>Stages at the level of each test function/method:</p> </li> <li> <p>The test function/method receives the argument <code>client: TestClient</code>;</p> </li> <li>(after) After exiting the test function/method, all data in all tables is cleared (except the <code>alembic_version</code> table, as we don't delete the DB itself);</li> </ul> <pre><code>from fastapi.testclient import TestClient\n\ndef test_name(client: TestClient):\n    response = client.get('url')\n</code></pre>"},{"location":"en/test_logic/#decorator-client_auth_jwt","title":"Decorator - <code>@client_auth_jwt</code>","text":"<p>In practice, we often have to test API methods that require authentication. Bypassing authentication in tests is a bad option, as some exceptions or API method logic tied to authenticated user data may be missed. Therefore, to authenticate the test client, specify the <code>@client_auth_jwt</code> decorator for the test function/method</p> <ul> <li>Example of using the decorator for a test function:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_auth import client_auth_jwt\n\n@client_auth_jwt(username='test')\ndef test_name(client: TestClient):\n    print(client.headers['authorization']) # 'Bearer ...'\n</code></pre> <ul> <li>Example of using the decorator for a test method in the <code>BasePytest</code> class:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_base import BasePytest\nfrom fastapi_accelerator.testutils.fixture_auth import client_auth_jwt\n\nclass TestClassName(BasePytest):\n    @client_auth_jwt()\n    def test_name(self, client: TestClient):\n        print(client.headers['authorization']) # 'Bearer ...'\n</code></pre> <p>If you use the <code>@client_auth_jwt</code> decorator in the <code>BasePytest</code> class, it will take <code>username</code> from <code>self.TEST_USER['username']</code>, this attribute is already defined in <code>BasePytest</code> and equals <code>test</code> by default.</p>"},{"location":"en/test_logic/#decorator-apply_fixture_db","title":"Decorator - <code>@apply_fixture_db</code>","text":"<p>The idea is taken from <code>Django</code> testing, where you can specify in the <code>fixtures</code> attribute a list of files with fixtures that will be loaded for tests and removed after completion. This is very convenient for reusing test data. But I decided to modify this option and make fixtures not in <code>JSON</code> format but in the form of <code>SqlAlchemy</code> objects. Using <code>JSON</code> is better when you need to transfer this data to other platforms, but this is rare, most often fixtures for backend tests are used only on the backend,... and it's much more convenient and faster to write in the format of DB objects than in <code>JSON</code> format. Therefore, the object format was chosen.</p> <p>The order of work for the <code>@apply_fixture_db</code> decorator:</p> <ol> <li>Gets records from the passed <code>export_func</code> function;</li> <li>Creates records in the DB;</li> <li>The test function is executed. If it expects a <code>fixtures</code> argument, it will be passed records from <code>export_func</code>;</li> <li>Deletes records from the DB:<ul> <li>If you use the <code>client</code> fixture, it will automatically clear all data in the tables after executing the test function.</li> <li>If you don't use the <code>client</code> fixture, specify the <code>flush=True</code> argument in the decorator for data clearing.</li> </ul> </li> </ol> <ul> <li>Formatting files with test data <code>app.fixture.items_v1.py</code>:</li> </ul> <pre><code>from fastapi_accelerator.utils import to_namedtuple\nfrom app.models.timemeasurement import Task, TaskExecution, TaskUser\n\ndef export_fixture_task():\n    # Creating users and tasks\n    user1 = TaskUser(id=0, name=\"Alice\")\n    user2 = TaskUser(id=1, name=\"Bob\")\n    task1 = Task(id=9, name=\"Admins\")\n    task2 = Task(id=8, name=\"Users\")\n\n    # Linking users with tasks\n    user1.tasks.append(task1)\n    user2.tasks.append(task1)\n    user2.tasks.append(task2)\n\n    # Return named tuple\n    return to_namedtuple(\n        user1=user1,\n        user2=user2,\n        task1=task1,\n        task2=task2,\n        task_execution1=TaskExecution(\n            id=91,\n            task=task1,\n            start_time=\"2024-09-06T10:55:43\",\n            end_time=\"2024-09-06T10:59:43\",\n        ),\n    )\n</code></pre> <ul> <li>Using the decorator in test functions:</li> </ul> <pre><code>from fastapi_accelerator.test_utils import apply_fixture_db\nfrom app.fixture.items_v1 import export_fixture_task\n\n@apply_fixture_db(export_fixture_task)\ndef test_name(client: TestClient):\n    response = client.get('url')\n</code></pre> <ul> <li>Using the decorator in test methods, in this case you can specify only for <code>setUp</code>, then it will be applied to all test methods:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_base import BasePytest\nfrom fastapi_accelerator.test_utils import apply_fixture_db\nfrom app.fixture.items_v1 import export_fixture_task\n\nclass TestClassName(BasePytest):\n    @apply_fixture_db(export_fixture_task)\n    def setUp(self, fixtures: NamedTuple):\n        self.fixtures = fixtures\n\n    def test_name(self, client: TestClient):\n        response = client.get('url')\n        print(self.fixtures)\n</code></pre>"},{"location":"en/test_logic/#decorator-patch_integration","title":"Decorator - <code>@patch_integration</code>","text":"<p>Testing integrations with external APIs</p> <p>The most difficult aspect of testing is integrations with external APIs, as during tests we need to avoid executing real requests to these APIs. Therefore, we have to develop logic ourselves to simulate the work of the external API. Although our simulation may not fully reflect the real work of the API, it's still better than ignoring the integration. In teams, often each developer creates their own mocks for integrations, which leads to confusion and lack of a single standard. There is a high probability of errors when the mock may not work, and a request will be sent to the real API.</p> <p>To solve this problem, we use integration classes <code>EndpointsDeclaration</code> with the <code>@integration.endpoint</code> decorator, which allows creating a single entry point that can be easily replaced during testing and exclude the possibility of executing the real integration method.</p> <p>Example of testing a <code>FastAPI</code> method that calls an integration method:</p> <ul> <li>FastAPI handler:</li> </ul> <pre><code>@router.get(\"/translate\")\nasync def translate_api(\n    text: str,\n    from_lang: str = \"en\",\n    to_lang: str = \"ru\"\n) -&gt; GoogleTranslateEndpoints.Schema.TranslateV2:\n    # Call integration method\n    return await gtapi.translate(text, from_lang, to_lang)\n</code></pre> <ul> <li><code>test_name.py</code> example of integration with <code>google</code> translator:</li> </ul> <pre><code>from fastapi_accelerator.testutils.fixture_integration import patch_integration\nfrom app.integration.google_translate.mock import google_translate_mock_rules\n\n# Rules for replacing integration methods with mock.\n# If an integration is called in the code that is not specified in mock_rules, an exception occurs.\n# This prevents accidental real requests if you forgot to specify a mock.\n@patch_integration(mock_rules=google_translate_mock_rules)\ndef test_integration_google_translate(client: TestClient, url_path_for: Callable):\n    # Executing test request\n    response = client.get(\n        url_path_for(\"translate_api\"),\n        params=dict(text=\"Hello\", from_lang=\"en\", to_lang=\"ru\"),\n    )\n    # Checking response\n    assert response.json() == {\"text\": \"\u041f\u0440\u0438\u0432\u0435\u0442\"}\n</code></pre> <p>The value for <code>mock_rules</code> can be used from anywhere, but I recommend storing and taking it from <code>app/integration/IntegrationPackage/mock.py</code></p> <ul> <li>It's recommended to store replacement functions in the same package with integration in <code>app/integration/IntegrationPackage/mock.py</code>, so that when importing this package into another project, you can also use functions from <code>mock.py</code> without creating your own imitations.</li> </ul> <pre><code>from app.integration.google_translate.endpoint import GoogleTranslateEndpoints\nfrom fastapi_accelerator.integration.http_integration import ApiHTTP\nfrom fastapi_accelerator.testutils.fixture_integration import MockRules\n\nasync def overwrite_translate(api: ApiHTTP, *args, **kwargs):\n    # Convenient imitation option when through match of arguments, we return a certain response.\n    match args:\n        case (\"hello\", \"en\", \"ru\"):\n            return {\"text\": \"\u041f\u0440\u0438\u0432\u0435\u0442\"}\n    return None\n\n# Rules for replacing integration methods with mock\ngoogle_translate_mock_rules = MockRules(\n    # Real integration method: replacement with mock function\n    {GoogleTranslateEndpoints.translate: overwrite_translate}\n)\n</code></pre> <p>The same requirements for response format apply to mock functions as to the real integration method.</p>"},{"location":"en/test_logic/#context-manager-track_queries","title":"Context manager - <code>track_queries</code>","text":"<p>The idea is taken from <code>Django</code> testing method <code>self.assertNumQueries</code>, which allows checking the number of executed SQL commands in the context. This is very useful when using ORM, which can generate hundreds of SQL commands due to careless use. Therefore, it's better to track the number of executed SQL commands for each test API method call.</p> <ul> <li>Example of using the <code>track_queries</code> context manager:</li> </ul> <pre><code>from fastapi_accelerator.testutils.fixture_db.trace_sql import track_queries\n\ndef test_name(client: TestClient, db_manager: MainDatabaseManager):\n    with track_queries(db_manager, expected_count=3):\n        response = client.get('url')\n</code></pre> <ul> <li>You can get a full list of executed SQL commands from <code>tracker.queries</code>:</li> </ul> <pre><code>from fastapi_accelerator.testutils.fixture_db.trace_sql import track_queries\n\ndef test_name(client: TestClient, db_manager: MainDatabaseManager):\n    with track_queries(db_manager) as tracker:\n        response = client.get('url')\n        # If the number changes, a list of all executed SQL commands will be displayed\n        assert tracker.count == 3, tracker.queries\n</code></pre>"},{"location":"en/test_logic/#func-check_response_json","title":"Func - <code>check_response_json</code>","text":"<p>From experience in writing tests, I can highlight several main checks for API JSON responses.</p> <ol> <li>Check response status</li> <li>Get response in JSON format</li> <li>If needed, remove dynamic keys from the response, for example creation date, update date, primary key of a new record. Works through the <code>rm_key_from_deep_dict</code> function</li> <li>Compare the response with the expected one</li> </ol> <p>These checks are performed in the <code>check_response_json</code> function</p> <p>Example of use:</p> <pre><code>def test_name(client: TestClient):\n    response = client.post('url', json={...})\n    check_response_json(\n        response,\n        200,\n        {\n            \"page\": 1,\n            \"size\": 10,\n            \"count\": 1,\n            \"items\": [\n                {\n                    \"end_time\": \"2024-09-06T10:59:43\",\n                    \"start_time\": \"2024-09-06T10:55:43\",\n                    \"task\": {\n                        \"description\": None,\n                        \"name\": \"Admins\",\n                    },\n                },\n            ],\n        },\n        exclude_list=['id','task_id']\n    )\n</code></pre>"},{"location":"en/test_logic/#testing-through-classes","title":"Testing through classes","text":""},{"location":"en/test_logic/#class-basepytest","title":"Class <code>BasePytest</code>","text":"<p>It's more convenient and understandable to create logically related tests in one class, and specify common initialization for them in the <code>setUp</code> method, for example, a common URL, or creation of test objects in the database, or creation of variables storing the expected JSON response.</p> <ul> <li>Example of creating a test class based on <code>BasePytest</code>:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_base import BasePytest\n\nclass TestClassName(BasePytest):\n\n    def setUp(self):\n        # Method for performing necessary setup before each test.\n        ...\n\n    def test_name(self, client: TestClient):\n        ...\n</code></pre> <ul> <li>You can use fixtures and decorators for test methods, for example, JWT authentication:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_base import BasePytest\nfrom fastapi_accelerator.testutils.fixture_auth import client_auth_jwt\n\nclass TestClassName(BasePytest):\n\n    def setUp(self):\n        # Method for performing necessary setup before each test.\n        ...\n\n    @client_auth_jwt()\n    def test_name(self, client: TestClient):\n        print(client.headers['authorization']) # 'Bearer ...'\n        ...\n</code></pre>"},{"location":"en/test_logic/#class-baseauthjwtpytest","title":"Class <code>BaseAuthJwtPytest</code>","text":"<p>To avoid writing the <code>@client_auth_jwt</code> decorator for each test method in the class, you can inherit from <code>BaseAuthJwtPytest</code>, which already implements this logic.</p> <ul> <li>Example of creating a test class based on <code>BaseAuthJwtPytest</code>:</li> </ul> <pre><code>from fastapi.testclient import TestClient\nfrom fastapi_accelerator.testutils.fixture_base import BaseAuthJwtPytest\n\nclass TestClassName(BaseAuthJwtPytest):\n\n    def setUp(self):\n        # Method for performing necessary setup before each test.\n        ...\n\n    def test_name(self, client: TestClient):\n        print(client.headers['authorization']) # 'Bearer ...'\n        ...\n</code></pre>"},{"location":"en/test_logic/#test-examples","title":"Test Examples","text":""},{"location":"en/test_logic/#classic-test-function","title":"Classic test function","text":"<p>Checking a REST API method that uses RDBMS and returns a response in <code>JSON</code> format:</p> <pre><code>from typing import Callable, NamedTuple\n\nfrom fastapi.testclient import TestClient\n\nfrom app.fixture.items_v1 import export_fixture_file\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\nfrom fastapi_accelerator.testutils import apply_fixture_db, client_auth_jwt, track_queries, check_response_json\n\n# Authenticate test client\n@client_auth_jwt(username=\"test\")\n# Create test data from fixture function\n@apply_fixture_db(export_fixture_file)\ndef test_name(\n    client: TestClient,  # Test client for API requests\n    url_path_for: Callable,  # Function to get URL by handler function name\n    db_manager: MainDatabaseManager,  # Test DB manager\n    fixtures: NamedTuple,  # Stores created data from fixtures\n):\n    # Check the number of executed SQL commands\n    with track_queries(db_manager, expected_count=3):\n        # API request\n        response = client.get(url_path_for(\"FunctionName\"))\n    # Check JSON API response\n    check_response_json(\n        response,\n        200,\n        {\n            \"id\": fixtures.Name.id,\n        },\n    )\n    # TODO For POST, UPDATE, DELETE methods, you can add a check for changes in DB records.\n    ...\n</code></pre>"},{"location":"en/test_logic/#classic-test-class","title":"Classic test class","text":"<p>Checking a REST API method that uses RDBMS and returns a response in <code>JSON</code> format:</p> <pre><code>from typing import Callable, NamedTuple\n\nfrom fastapi.testclient import TestClient\n\nfrom app.fixture.items_v1 import export_fixture_file\nfrom fastapi_accelerator.db.dbsession import MainDatabaseManager\nfrom fastapi_accelerator.testutils import apply_fixture_db\nfrom fastapi_accelerator.testutils.fixture_auth import client_auth_jwt\nfrom fastapi_accelerator.testutils.fixture_db.trace_sql import track_queries\nfrom fastapi_accelerator.testutils.utils import BaseAuthJwtPytest, check_response_json\n\nBASE_URL_V1 = \"/api/v1/\"\n\nclass TestName(BaseAuthJwtPytest):\n\n    # Create test data from fixture function\n    @apply_fixture_db(export_fixture_file)\n    def setUp(self, fixtures: NamedTuple):\n        self.url = BASE_URL_V1 + \"taskexecution\"\n        self.fixtures = fixtures # Stores created data from fixtures\n\n    def test_name(self, client: TestClient, db_manager: MainDatabaseManager):\n        # Check the number of executed SQL commands\n        with track_queries(db_manager, expected_count=3):\n            # API request\n            response = client.get(self.url)\n        # Check JSON API response\n        check_response_json(\n            response,\n            200,\n            {\n                \"id\": self.fixtures.Name.id,\n            },\n        )\n        # TODO For POST, UPDATE, DELETE methods, you can add a check for changes in DB records.\n        ...\n</code></pre>"}]}